// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: filecenter.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Filecenter_GetCosInfo_FullMethodName                      = "/pb.filecenter/GetCosInfo"
	Filecenter_GetFileByMd5_FullMethodName                    = "/pb.filecenter/GetFileByMd5"
	Filecenter_GetFileInfoByFileId_FullMethodName             = "/pb.filecenter/GetFileInfoByFileId"
	Filecenter_GetFileByFileIdWithUserId_FullMethodName       = "/pb.filecenter/GetFileByFileIdWithUserId"
	Filecenter_GetFileInfoByFileIds_FullMethodName            = "/pb.filecenter/GetFileInfoByFileIds"
	Filecenter_GetFileInfoByFileIdsWithUserId_FullMethodName  = "/pb.filecenter/GetFileInfoByFileIdsWithUserId"
	Filecenter_GetFilesByFatherId_FullMethodName              = "/pb.filecenter/GetFilesByFatherId"
	Filecenter_GetFilesByFatherIdWithUserId_FullMethodName    = "/pb.filecenter/GetFilesByFatherIdWithUserId"
	Filecenter_GetAllFileByFatherId_FullMethodName            = "/pb.filecenter/GetAllFileByFatherId"
	Filecenter_GetFileCount_FullMethodName                    = "/pb.filecenter/GetFileCount"
	Filecenter_GetFileType_FullMethodName                     = "/pb.filecenter/GetFileType"
	Filecenter_GetFileInfoInPublicByFileId_FullMethodName     = "/pb.filecenter/GetFileInfoInPublicByFileId"
	Filecenter_GetPublicFileByFileIdWithUserId_FullMethodName = "/pb.filecenter/GetPublicFileByFileIdWithUserId"
	Filecenter_GetPublicByFileIds_FullMethodName              = "/pb.filecenter/GetPublicByFileIds"
	Filecenter_GetPublicFilesByUserId_FullMethodName          = "/pb.filecenter/GetPublicFilesByUserId"
	Filecenter_GetPublicFilesByFatherId_FullMethodName        = "/pb.filecenter/GetPublicFilesByFatherId"
	Filecenter_GetAllPublicFileByFatherId_FullMethodName      = "/pb.filecenter/GetAllPublicFileByFatherId"
	Filecenter_GetFileBySharingCode_FullMethodName            = "/pb.filecenter/GetFileBySharingCode"
	Filecenter_CalFileSize_FullMethodName                     = "/pb.filecenter/CalFileSize"
	Filecenter_CalPublicFileSize_FullMethodName               = "/pb.filecenter/CalPublicFileSize"
	Filecenter_UploadFile_FullMethodName                      = "/pb.filecenter/UploadFile"
	Filecenter_AskUploadFile_FullMethodName                   = "/pb.filecenter/AskUploadFile"
	Filecenter_AskUploadFileRollback_FullMethodName           = "/pb.filecenter/AskUploadFileRollback"
	Filecenter_DeleteExpiredFiles_FullMethodName              = "/pb.filecenter/DeleteExpiredFiles"
	Filecenter_DeleteExpiredShareCodes_FullMethodName         = "/pb.filecenter/DeleteExpiredShareCodes"
)

// FilecenterClient is the client API for Filecenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilecenterClient interface {
	GetCosInfo(ctx context.Context, in *GetCosInfoReq, opts ...grpc.CallOption) (*GetCosInfoResp, error)
	GetFileByMd5(ctx context.Context, in *GetFileByMd5Req, opts ...grpc.CallOption) (*GetFileByMd5Resp, error)
	GetFileInfoByFileId(ctx context.Context, in *GetFileInfoByFileIdReq, opts ...grpc.CallOption) (*GetFileInfoByFileIdResp, error)
	GetFileByFileIdWithUserId(ctx context.Context, in *GetFileByFileIdWithUserIdReq, opts ...grpc.CallOption) (*GetFileByFileIdWithUserIdResp, error)
	GetFileInfoByFileIds(ctx context.Context, in *GetFileInfoByFileIdsReq, opts ...grpc.CallOption) (*GetFileInfoByFileIdsResp, error)
	GetFileInfoByFileIdsWithUserId(ctx context.Context, in *GetFileInfoByFileIdsWithUserIdReq, opts ...grpc.CallOption) (*GetFileInfoByFileIdsWithUserIdResp, error)
	GetFilesByFatherId(ctx context.Context, in *GetFilesByFatherIdReq, opts ...grpc.CallOption) (*GetFilesByFatherIdResp, error)
	GetFilesByFatherIdWithUserId(ctx context.Context, in *GetFilesByFatherIdWithUserIdReq, opts ...grpc.CallOption) (*GetFilesByFatherIdWithUserIdResp, error)
	GetAllFileByFatherId(ctx context.Context, in *GetAllFileByFatherIdReq, opts ...grpc.CallOption) (*GetAllFileByFatherIdResp, error)
	GetFileCount(ctx context.Context, in *GetFileCountReq, opts ...grpc.CallOption) (*GetFileCountResp, error)
	GetFileType(ctx context.Context, in *GetFileTypeReq, opts ...grpc.CallOption) (*GetFileTypeReq, error)
	GetFileInfoInPublicByFileId(ctx context.Context, in *GetFileInfoInPublicByFileIdReq, opts ...grpc.CallOption) (*GetFileInfoInPublicByFileIdResp, error)
	GetPublicFileByFileIdWithUserId(ctx context.Context, in *GetPublicFileByFileIdWithUserIdReq, opts ...grpc.CallOption) (*GetPublicFileByFileIdWithUserIdResp, error)
	GetPublicByFileIds(ctx context.Context, in *GetPublicByFileIdsReq, opts ...grpc.CallOption) (*GetPublicByFileIdsResp, error)
	GetPublicFilesByUserId(ctx context.Context, in *GetPublicFilesByUserIdReq, opts ...grpc.CallOption) (*GetPublicFilesByUserIdResp, error)
	GetPublicFilesByFatherId(ctx context.Context, in *GetPublicFilesByFatherIdReq, opts ...grpc.CallOption) (*GetPublicFilesByFatherIdResp, error)
	GetAllPublicFileByFatherId(ctx context.Context, in *GetAllPublicFileByFatherIdReq, opts ...grpc.CallOption) (*GetAllPublicFileByFatherIdResp, error)
	GetFileBySharingCode(ctx context.Context, in *GetFileBySharingCodeReq, opts ...grpc.CallOption) (*GetFileBySharingCodeResp, error)
	CalFileSize(ctx context.Context, in *CalFileSizeReq, opts ...grpc.CallOption) (*CalFileSizeResp, error)
	CalPublicFileSize(ctx context.Context, in *CalPublicFileSizeReq, opts ...grpc.CallOption) (*CalPublicFileSizeResp, error)
	UploadFile(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadFileResp, error)
	AskUploadFile(ctx context.Context, in *AskUploadFileReq, opts ...grpc.CallOption) (*AskUploadFileResp, error)
	AskUploadFileRollback(ctx context.Context, in *AskUploadFileReq, opts ...grpc.CallOption) (*AskUploadFileResp, error)
	DeleteExpiredFiles(ctx context.Context, in *DeleteExpiredFilesReq, opts ...grpc.CallOption) (*DeleteExpiredFilesResp, error)
	DeleteExpiredShareCodes(ctx context.Context, in *DeleteExpiredShareCodesReq, opts ...grpc.CallOption) (*DeleteExpiredShareCodesResp, error)
}

type filecenterClient struct {
	cc grpc.ClientConnInterface
}

func NewFilecenterClient(cc grpc.ClientConnInterface) FilecenterClient {
	return &filecenterClient{cc}
}

func (c *filecenterClient) GetCosInfo(ctx context.Context, in *GetCosInfoReq, opts ...grpc.CallOption) (*GetCosInfoResp, error) {
	out := new(GetCosInfoResp)
	err := c.cc.Invoke(ctx, Filecenter_GetCosInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) GetFileByMd5(ctx context.Context, in *GetFileByMd5Req, opts ...grpc.CallOption) (*GetFileByMd5Resp, error) {
	out := new(GetFileByMd5Resp)
	err := c.cc.Invoke(ctx, Filecenter_GetFileByMd5_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) GetFileInfoByFileId(ctx context.Context, in *GetFileInfoByFileIdReq, opts ...grpc.CallOption) (*GetFileInfoByFileIdResp, error) {
	out := new(GetFileInfoByFileIdResp)
	err := c.cc.Invoke(ctx, Filecenter_GetFileInfoByFileId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) GetFileByFileIdWithUserId(ctx context.Context, in *GetFileByFileIdWithUserIdReq, opts ...grpc.CallOption) (*GetFileByFileIdWithUserIdResp, error) {
	out := new(GetFileByFileIdWithUserIdResp)
	err := c.cc.Invoke(ctx, Filecenter_GetFileByFileIdWithUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) GetFileInfoByFileIds(ctx context.Context, in *GetFileInfoByFileIdsReq, opts ...grpc.CallOption) (*GetFileInfoByFileIdsResp, error) {
	out := new(GetFileInfoByFileIdsResp)
	err := c.cc.Invoke(ctx, Filecenter_GetFileInfoByFileIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) GetFileInfoByFileIdsWithUserId(ctx context.Context, in *GetFileInfoByFileIdsWithUserIdReq, opts ...grpc.CallOption) (*GetFileInfoByFileIdsWithUserIdResp, error) {
	out := new(GetFileInfoByFileIdsWithUserIdResp)
	err := c.cc.Invoke(ctx, Filecenter_GetFileInfoByFileIdsWithUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) GetFilesByFatherId(ctx context.Context, in *GetFilesByFatherIdReq, opts ...grpc.CallOption) (*GetFilesByFatherIdResp, error) {
	out := new(GetFilesByFatherIdResp)
	err := c.cc.Invoke(ctx, Filecenter_GetFilesByFatherId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) GetFilesByFatherIdWithUserId(ctx context.Context, in *GetFilesByFatherIdWithUserIdReq, opts ...grpc.CallOption) (*GetFilesByFatherIdWithUserIdResp, error) {
	out := new(GetFilesByFatherIdWithUserIdResp)
	err := c.cc.Invoke(ctx, Filecenter_GetFilesByFatherIdWithUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) GetAllFileByFatherId(ctx context.Context, in *GetAllFileByFatherIdReq, opts ...grpc.CallOption) (*GetAllFileByFatherIdResp, error) {
	out := new(GetAllFileByFatherIdResp)
	err := c.cc.Invoke(ctx, Filecenter_GetAllFileByFatherId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) GetFileCount(ctx context.Context, in *GetFileCountReq, opts ...grpc.CallOption) (*GetFileCountResp, error) {
	out := new(GetFileCountResp)
	err := c.cc.Invoke(ctx, Filecenter_GetFileCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) GetFileType(ctx context.Context, in *GetFileTypeReq, opts ...grpc.CallOption) (*GetFileTypeReq, error) {
	out := new(GetFileTypeReq)
	err := c.cc.Invoke(ctx, Filecenter_GetFileType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) GetFileInfoInPublicByFileId(ctx context.Context, in *GetFileInfoInPublicByFileIdReq, opts ...grpc.CallOption) (*GetFileInfoInPublicByFileIdResp, error) {
	out := new(GetFileInfoInPublicByFileIdResp)
	err := c.cc.Invoke(ctx, Filecenter_GetFileInfoInPublicByFileId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) GetPublicFileByFileIdWithUserId(ctx context.Context, in *GetPublicFileByFileIdWithUserIdReq, opts ...grpc.CallOption) (*GetPublicFileByFileIdWithUserIdResp, error) {
	out := new(GetPublicFileByFileIdWithUserIdResp)
	err := c.cc.Invoke(ctx, Filecenter_GetPublicFileByFileIdWithUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) GetPublicByFileIds(ctx context.Context, in *GetPublicByFileIdsReq, opts ...grpc.CallOption) (*GetPublicByFileIdsResp, error) {
	out := new(GetPublicByFileIdsResp)
	err := c.cc.Invoke(ctx, Filecenter_GetPublicByFileIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) GetPublicFilesByUserId(ctx context.Context, in *GetPublicFilesByUserIdReq, opts ...grpc.CallOption) (*GetPublicFilesByUserIdResp, error) {
	out := new(GetPublicFilesByUserIdResp)
	err := c.cc.Invoke(ctx, Filecenter_GetPublicFilesByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) GetPublicFilesByFatherId(ctx context.Context, in *GetPublicFilesByFatherIdReq, opts ...grpc.CallOption) (*GetPublicFilesByFatherIdResp, error) {
	out := new(GetPublicFilesByFatherIdResp)
	err := c.cc.Invoke(ctx, Filecenter_GetPublicFilesByFatherId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) GetAllPublicFileByFatherId(ctx context.Context, in *GetAllPublicFileByFatherIdReq, opts ...grpc.CallOption) (*GetAllPublicFileByFatherIdResp, error) {
	out := new(GetAllPublicFileByFatherIdResp)
	err := c.cc.Invoke(ctx, Filecenter_GetAllPublicFileByFatherId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) GetFileBySharingCode(ctx context.Context, in *GetFileBySharingCodeReq, opts ...grpc.CallOption) (*GetFileBySharingCodeResp, error) {
	out := new(GetFileBySharingCodeResp)
	err := c.cc.Invoke(ctx, Filecenter_GetFileBySharingCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) CalFileSize(ctx context.Context, in *CalFileSizeReq, opts ...grpc.CallOption) (*CalFileSizeResp, error) {
	out := new(CalFileSizeResp)
	err := c.cc.Invoke(ctx, Filecenter_CalFileSize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) CalPublicFileSize(ctx context.Context, in *CalPublicFileSizeReq, opts ...grpc.CallOption) (*CalPublicFileSizeResp, error) {
	out := new(CalPublicFileSizeResp)
	err := c.cc.Invoke(ctx, Filecenter_CalPublicFileSize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) UploadFile(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadFileResp, error) {
	out := new(UploadFileResp)
	err := c.cc.Invoke(ctx, Filecenter_UploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) AskUploadFile(ctx context.Context, in *AskUploadFileReq, opts ...grpc.CallOption) (*AskUploadFileResp, error) {
	out := new(AskUploadFileResp)
	err := c.cc.Invoke(ctx, Filecenter_AskUploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) AskUploadFileRollback(ctx context.Context, in *AskUploadFileReq, opts ...grpc.CallOption) (*AskUploadFileResp, error) {
	out := new(AskUploadFileResp)
	err := c.cc.Invoke(ctx, Filecenter_AskUploadFileRollback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) DeleteExpiredFiles(ctx context.Context, in *DeleteExpiredFilesReq, opts ...grpc.CallOption) (*DeleteExpiredFilesResp, error) {
	out := new(DeleteExpiredFilesResp)
	err := c.cc.Invoke(ctx, Filecenter_DeleteExpiredFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) DeleteExpiredShareCodes(ctx context.Context, in *DeleteExpiredShareCodesReq, opts ...grpc.CallOption) (*DeleteExpiredShareCodesResp, error) {
	out := new(DeleteExpiredShareCodesResp)
	err := c.cc.Invoke(ctx, Filecenter_DeleteExpiredShareCodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilecenterServer is the server API for Filecenter service.
// All implementations must embed UnimplementedFilecenterServer
// for forward compatibility
type FilecenterServer interface {
	GetCosInfo(context.Context, *GetCosInfoReq) (*GetCosInfoResp, error)
	GetFileByMd5(context.Context, *GetFileByMd5Req) (*GetFileByMd5Resp, error)
	GetFileInfoByFileId(context.Context, *GetFileInfoByFileIdReq) (*GetFileInfoByFileIdResp, error)
	GetFileByFileIdWithUserId(context.Context, *GetFileByFileIdWithUserIdReq) (*GetFileByFileIdWithUserIdResp, error)
	GetFileInfoByFileIds(context.Context, *GetFileInfoByFileIdsReq) (*GetFileInfoByFileIdsResp, error)
	GetFileInfoByFileIdsWithUserId(context.Context, *GetFileInfoByFileIdsWithUserIdReq) (*GetFileInfoByFileIdsWithUserIdResp, error)
	GetFilesByFatherId(context.Context, *GetFilesByFatherIdReq) (*GetFilesByFatherIdResp, error)
	GetFilesByFatherIdWithUserId(context.Context, *GetFilesByFatherIdWithUserIdReq) (*GetFilesByFatherIdWithUserIdResp, error)
	GetAllFileByFatherId(context.Context, *GetAllFileByFatherIdReq) (*GetAllFileByFatherIdResp, error)
	GetFileCount(context.Context, *GetFileCountReq) (*GetFileCountResp, error)
	GetFileType(context.Context, *GetFileTypeReq) (*GetFileTypeReq, error)
	GetFileInfoInPublicByFileId(context.Context, *GetFileInfoInPublicByFileIdReq) (*GetFileInfoInPublicByFileIdResp, error)
	GetPublicFileByFileIdWithUserId(context.Context, *GetPublicFileByFileIdWithUserIdReq) (*GetPublicFileByFileIdWithUserIdResp, error)
	GetPublicByFileIds(context.Context, *GetPublicByFileIdsReq) (*GetPublicByFileIdsResp, error)
	GetPublicFilesByUserId(context.Context, *GetPublicFilesByUserIdReq) (*GetPublicFilesByUserIdResp, error)
	GetPublicFilesByFatherId(context.Context, *GetPublicFilesByFatherIdReq) (*GetPublicFilesByFatherIdResp, error)
	GetAllPublicFileByFatherId(context.Context, *GetAllPublicFileByFatherIdReq) (*GetAllPublicFileByFatherIdResp, error)
	GetFileBySharingCode(context.Context, *GetFileBySharingCodeReq) (*GetFileBySharingCodeResp, error)
	CalFileSize(context.Context, *CalFileSizeReq) (*CalFileSizeResp, error)
	CalPublicFileSize(context.Context, *CalPublicFileSizeReq) (*CalPublicFileSizeResp, error)
	UploadFile(context.Context, *UploadFileReq) (*UploadFileResp, error)
	AskUploadFile(context.Context, *AskUploadFileReq) (*AskUploadFileResp, error)
	AskUploadFileRollback(context.Context, *AskUploadFileReq) (*AskUploadFileResp, error)
	DeleteExpiredFiles(context.Context, *DeleteExpiredFilesReq) (*DeleteExpiredFilesResp, error)
	DeleteExpiredShareCodes(context.Context, *DeleteExpiredShareCodesReq) (*DeleteExpiredShareCodesResp, error)
	mustEmbedUnimplementedFilecenterServer()
}

// UnimplementedFilecenterServer must be embedded to have forward compatible implementations.
type UnimplementedFilecenterServer struct {
}

func (UnimplementedFilecenterServer) GetCosInfo(context.Context, *GetCosInfoReq) (*GetCosInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCosInfo not implemented")
}
func (UnimplementedFilecenterServer) GetFileByMd5(context.Context, *GetFileByMd5Req) (*GetFileByMd5Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileByMd5 not implemented")
}
func (UnimplementedFilecenterServer) GetFileInfoByFileId(context.Context, *GetFileInfoByFileIdReq) (*GetFileInfoByFileIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfoByFileId not implemented")
}
func (UnimplementedFilecenterServer) GetFileByFileIdWithUserId(context.Context, *GetFileByFileIdWithUserIdReq) (*GetFileByFileIdWithUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileByFileIdWithUserId not implemented")
}
func (UnimplementedFilecenterServer) GetFileInfoByFileIds(context.Context, *GetFileInfoByFileIdsReq) (*GetFileInfoByFileIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfoByFileIds not implemented")
}
func (UnimplementedFilecenterServer) GetFileInfoByFileIdsWithUserId(context.Context, *GetFileInfoByFileIdsWithUserIdReq) (*GetFileInfoByFileIdsWithUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfoByFileIdsWithUserId not implemented")
}
func (UnimplementedFilecenterServer) GetFilesByFatherId(context.Context, *GetFilesByFatherIdReq) (*GetFilesByFatherIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesByFatherId not implemented")
}
func (UnimplementedFilecenterServer) GetFilesByFatherIdWithUserId(context.Context, *GetFilesByFatherIdWithUserIdReq) (*GetFilesByFatherIdWithUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesByFatherIdWithUserId not implemented")
}
func (UnimplementedFilecenterServer) GetAllFileByFatherId(context.Context, *GetAllFileByFatherIdReq) (*GetAllFileByFatherIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFileByFatherId not implemented")
}
func (UnimplementedFilecenterServer) GetFileCount(context.Context, *GetFileCountReq) (*GetFileCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileCount not implemented")
}
func (UnimplementedFilecenterServer) GetFileType(context.Context, *GetFileTypeReq) (*GetFileTypeReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileType not implemented")
}
func (UnimplementedFilecenterServer) GetFileInfoInPublicByFileId(context.Context, *GetFileInfoInPublicByFileIdReq) (*GetFileInfoInPublicByFileIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfoInPublicByFileId not implemented")
}
func (UnimplementedFilecenterServer) GetPublicFileByFileIdWithUserId(context.Context, *GetPublicFileByFileIdWithUserIdReq) (*GetPublicFileByFileIdWithUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicFileByFileIdWithUserId not implemented")
}
func (UnimplementedFilecenterServer) GetPublicByFileIds(context.Context, *GetPublicByFileIdsReq) (*GetPublicByFileIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicByFileIds not implemented")
}
func (UnimplementedFilecenterServer) GetPublicFilesByUserId(context.Context, *GetPublicFilesByUserIdReq) (*GetPublicFilesByUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicFilesByUserId not implemented")
}
func (UnimplementedFilecenterServer) GetPublicFilesByFatherId(context.Context, *GetPublicFilesByFatherIdReq) (*GetPublicFilesByFatherIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicFilesByFatherId not implemented")
}
func (UnimplementedFilecenterServer) GetAllPublicFileByFatherId(context.Context, *GetAllPublicFileByFatherIdReq) (*GetAllPublicFileByFatherIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPublicFileByFatherId not implemented")
}
func (UnimplementedFilecenterServer) GetFileBySharingCode(context.Context, *GetFileBySharingCodeReq) (*GetFileBySharingCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileBySharingCode not implemented")
}
func (UnimplementedFilecenterServer) CalFileSize(context.Context, *CalFileSizeReq) (*CalFileSizeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalFileSize not implemented")
}
func (UnimplementedFilecenterServer) CalPublicFileSize(context.Context, *CalPublicFileSizeReq) (*CalPublicFileSizeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalPublicFileSize not implemented")
}
func (UnimplementedFilecenterServer) UploadFile(context.Context, *UploadFileReq) (*UploadFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFilecenterServer) AskUploadFile(context.Context, *AskUploadFileReq) (*AskUploadFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskUploadFile not implemented")
}
func (UnimplementedFilecenterServer) AskUploadFileRollback(context.Context, *AskUploadFileReq) (*AskUploadFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskUploadFileRollback not implemented")
}
func (UnimplementedFilecenterServer) DeleteExpiredFiles(context.Context, *DeleteExpiredFilesReq) (*DeleteExpiredFilesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExpiredFiles not implemented")
}
func (UnimplementedFilecenterServer) DeleteExpiredShareCodes(context.Context, *DeleteExpiredShareCodesReq) (*DeleteExpiredShareCodesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExpiredShareCodes not implemented")
}
func (UnimplementedFilecenterServer) mustEmbedUnimplementedFilecenterServer() {}

// UnsafeFilecenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilecenterServer will
// result in compilation errors.
type UnsafeFilecenterServer interface {
	mustEmbedUnimplementedFilecenterServer()
}

func RegisterFilecenterServer(s grpc.ServiceRegistrar, srv FilecenterServer) {
	s.RegisterService(&Filecenter_ServiceDesc, srv)
}

func _Filecenter_GetCosInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCosInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).GetCosInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_GetCosInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).GetCosInfo(ctx, req.(*GetCosInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_GetFileByMd5_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileByMd5Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).GetFileByMd5(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_GetFileByMd5_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).GetFileByMd5(ctx, req.(*GetFileByMd5Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_GetFileInfoByFileId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileInfoByFileIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).GetFileInfoByFileId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_GetFileInfoByFileId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).GetFileInfoByFileId(ctx, req.(*GetFileInfoByFileIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_GetFileByFileIdWithUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileByFileIdWithUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).GetFileByFileIdWithUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_GetFileByFileIdWithUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).GetFileByFileIdWithUserId(ctx, req.(*GetFileByFileIdWithUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_GetFileInfoByFileIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileInfoByFileIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).GetFileInfoByFileIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_GetFileInfoByFileIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).GetFileInfoByFileIds(ctx, req.(*GetFileInfoByFileIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_GetFileInfoByFileIdsWithUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileInfoByFileIdsWithUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).GetFileInfoByFileIdsWithUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_GetFileInfoByFileIdsWithUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).GetFileInfoByFileIdsWithUserId(ctx, req.(*GetFileInfoByFileIdsWithUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_GetFilesByFatherId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilesByFatherIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).GetFilesByFatherId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_GetFilesByFatherId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).GetFilesByFatherId(ctx, req.(*GetFilesByFatherIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_GetFilesByFatherIdWithUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilesByFatherIdWithUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).GetFilesByFatherIdWithUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_GetFilesByFatherIdWithUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).GetFilesByFatherIdWithUserId(ctx, req.(*GetFilesByFatherIdWithUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_GetAllFileByFatherId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFileByFatherIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).GetAllFileByFatherId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_GetAllFileByFatherId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).GetAllFileByFatherId(ctx, req.(*GetAllFileByFatherIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_GetFileCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).GetFileCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_GetFileCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).GetFileCount(ctx, req.(*GetFileCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_GetFileType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).GetFileType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_GetFileType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).GetFileType(ctx, req.(*GetFileTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_GetFileInfoInPublicByFileId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileInfoInPublicByFileIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).GetFileInfoInPublicByFileId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_GetFileInfoInPublicByFileId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).GetFileInfoInPublicByFileId(ctx, req.(*GetFileInfoInPublicByFileIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_GetPublicFileByFileIdWithUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicFileByFileIdWithUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).GetPublicFileByFileIdWithUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_GetPublicFileByFileIdWithUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).GetPublicFileByFileIdWithUserId(ctx, req.(*GetPublicFileByFileIdWithUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_GetPublicByFileIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicByFileIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).GetPublicByFileIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_GetPublicByFileIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).GetPublicByFileIds(ctx, req.(*GetPublicByFileIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_GetPublicFilesByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicFilesByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).GetPublicFilesByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_GetPublicFilesByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).GetPublicFilesByUserId(ctx, req.(*GetPublicFilesByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_GetPublicFilesByFatherId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicFilesByFatherIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).GetPublicFilesByFatherId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_GetPublicFilesByFatherId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).GetPublicFilesByFatherId(ctx, req.(*GetPublicFilesByFatherIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_GetAllPublicFileByFatherId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPublicFileByFatherIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).GetAllPublicFileByFatherId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_GetAllPublicFileByFatherId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).GetAllPublicFileByFatherId(ctx, req.(*GetAllPublicFileByFatherIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_GetFileBySharingCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileBySharingCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).GetFileBySharingCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_GetFileBySharingCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).GetFileBySharingCode(ctx, req.(*GetFileBySharingCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_CalFileSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalFileSizeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).CalFileSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_CalFileSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).CalFileSize(ctx, req.(*CalFileSizeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_CalPublicFileSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalPublicFileSizeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).CalPublicFileSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_CalPublicFileSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).CalPublicFileSize(ctx, req.(*CalPublicFileSizeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).UploadFile(ctx, req.(*UploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_AskUploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskUploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).AskUploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_AskUploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).AskUploadFile(ctx, req.(*AskUploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_AskUploadFileRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskUploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).AskUploadFileRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_AskUploadFileRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).AskUploadFileRollback(ctx, req.(*AskUploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_DeleteExpiredFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExpiredFilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).DeleteExpiredFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_DeleteExpiredFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).DeleteExpiredFiles(ctx, req.(*DeleteExpiredFilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_DeleteExpiredShareCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExpiredShareCodesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).DeleteExpiredShareCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_DeleteExpiredShareCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).DeleteExpiredShareCodes(ctx, req.(*DeleteExpiredShareCodesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Filecenter_ServiceDesc is the grpc.ServiceDesc for Filecenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Filecenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.filecenter",
	HandlerType: (*FilecenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCosInfo",
			Handler:    _Filecenter_GetCosInfo_Handler,
		},
		{
			MethodName: "GetFileByMd5",
			Handler:    _Filecenter_GetFileByMd5_Handler,
		},
		{
			MethodName: "GetFileInfoByFileId",
			Handler:    _Filecenter_GetFileInfoByFileId_Handler,
		},
		{
			MethodName: "GetFileByFileIdWithUserId",
			Handler:    _Filecenter_GetFileByFileIdWithUserId_Handler,
		},
		{
			MethodName: "GetFileInfoByFileIds",
			Handler:    _Filecenter_GetFileInfoByFileIds_Handler,
		},
		{
			MethodName: "GetFileInfoByFileIdsWithUserId",
			Handler:    _Filecenter_GetFileInfoByFileIdsWithUserId_Handler,
		},
		{
			MethodName: "GetFilesByFatherId",
			Handler:    _Filecenter_GetFilesByFatherId_Handler,
		},
		{
			MethodName: "GetFilesByFatherIdWithUserId",
			Handler:    _Filecenter_GetFilesByFatherIdWithUserId_Handler,
		},
		{
			MethodName: "GetAllFileByFatherId",
			Handler:    _Filecenter_GetAllFileByFatherId_Handler,
		},
		{
			MethodName: "GetFileCount",
			Handler:    _Filecenter_GetFileCount_Handler,
		},
		{
			MethodName: "GetFileType",
			Handler:    _Filecenter_GetFileType_Handler,
		},
		{
			MethodName: "GetFileInfoInPublicByFileId",
			Handler:    _Filecenter_GetFileInfoInPublicByFileId_Handler,
		},
		{
			MethodName: "GetPublicFileByFileIdWithUserId",
			Handler:    _Filecenter_GetPublicFileByFileIdWithUserId_Handler,
		},
		{
			MethodName: "GetPublicByFileIds",
			Handler:    _Filecenter_GetPublicByFileIds_Handler,
		},
		{
			MethodName: "GetPublicFilesByUserId",
			Handler:    _Filecenter_GetPublicFilesByUserId_Handler,
		},
		{
			MethodName: "GetPublicFilesByFatherId",
			Handler:    _Filecenter_GetPublicFilesByFatherId_Handler,
		},
		{
			MethodName: "GetAllPublicFileByFatherId",
			Handler:    _Filecenter_GetAllPublicFileByFatherId_Handler,
		},
		{
			MethodName: "GetFileBySharingCode",
			Handler:    _Filecenter_GetFileBySharingCode_Handler,
		},
		{
			MethodName: "CalFileSize",
			Handler:    _Filecenter_CalFileSize_Handler,
		},
		{
			MethodName: "CalPublicFileSize",
			Handler:    _Filecenter_CalPublicFileSize_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _Filecenter_UploadFile_Handler,
		},
		{
			MethodName: "AskUploadFile",
			Handler:    _Filecenter_AskUploadFile_Handler,
		},
		{
			MethodName: "AskUploadFileRollback",
			Handler:    _Filecenter_AskUploadFileRollback_Handler,
		},
		{
			MethodName: "DeleteExpiredFiles",
			Handler:    _Filecenter_DeleteExpiredFiles_Handler,
		},
		{
			MethodName: "DeleteExpiredShareCodes",
			Handler:    _Filecenter_DeleteExpiredShareCodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filecenter.proto",
}
