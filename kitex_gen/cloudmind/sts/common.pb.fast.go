// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package sts

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *User) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_User[number], err)
}

func (x *User) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Role, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *User) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserInfo[number], err)
}

func (x *UserInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Role = Role(v)
	return offset, nil
}

func (x *UserInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Password = &tmp
	return offset, err
}

func (x *Auth) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Auth[number], err)
}

func (x *Auth) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AuthType, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Auth) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AppId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Auth) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.UnionId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AuthInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AuthInfo[number], err)
}

func (x *AuthInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.AuthType = AuthType(v)
	return offset, nil
}

func (x *AuthInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AppId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AuthInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.UnionId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *EmailOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_EmailOptions[number], err)
}

func (x *EmailOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *EmailOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserIdOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserIdOptions[number], err)
}

func (x *UserIdOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserIdOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Point) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Point[number], err)
}

func (x *Point) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.X, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Point) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Y, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Captcha) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Captcha[number], err)
}

func (x *Captcha) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Point
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Point = &v
	return offset, nil
}

func (x *Captcha) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Key, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *User) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *User) fastWriteField2(buf []byte) (offset int) {
	if x.Role == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetRole())
	return offset
}

func (x *User) fastWriteField3(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetPassword())
	return offset
}

func (x *UserInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UserInfo) fastWriteField1(buf []byte) (offset int) {
	if x.Role == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, int32(x.GetRole()))
	return offset
}

func (x *UserInfo) fastWriteField2(buf []byte) (offset int) {
	if x.Password == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPassword())
	return offset
}

func (x *Auth) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Auth) fastWriteField1(buf []byte) (offset int) {
	if x.AuthType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetAuthType())
	return offset
}

func (x *Auth) fastWriteField2(buf []byte) (offset int) {
	if x.AppId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAppId())
	return offset
}

func (x *Auth) fastWriteField3(buf []byte) (offset int) {
	if x.UnionId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUnionId())
	return offset
}

func (x *AuthInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *AuthInfo) fastWriteField1(buf []byte) (offset int) {
	if x.AuthType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, int32(x.GetAuthType()))
	return offset
}

func (x *AuthInfo) fastWriteField2(buf []byte) (offset int) {
	if x.AppId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAppId())
	return offset
}

func (x *AuthInfo) fastWriteField3(buf []byte) (offset int) {
	if x.UnionId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUnionId())
	return offset
}

func (x *EmailOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *EmailOptions) fastWriteField1(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetEmail())
	return offset
}

func (x *EmailOptions) fastWriteField2(buf []byte) (offset int) {
	if x.Code == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetCode())
	return offset
}

func (x *UserIdOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UserIdOptions) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *UserIdOptions) fastWriteField2(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPassword())
	return offset
}

func (x *Point) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Point) fastWriteField1(buf []byte) (offset int) {
	if x.X == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetX())
	return offset
}

func (x *Point) fastWriteField2(buf []byte) (offset int) {
	if x.Y == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetY())
	return offset
}

func (x *Captcha) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Captcha) fastWriteField1(buf []byte) (offset int) {
	if x.Point == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPoint())
	return offset
}

func (x *Captcha) fastWriteField2(buf []byte) (offset int) {
	if x.Key == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetKey())
	return offset
}

func (x *User) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *User) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *User) sizeField2() (n int) {
	if x.Role == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetRole())
	return n
}

func (x *User) sizeField3() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetPassword())
	return n
}

func (x *UserInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UserInfo) sizeField1() (n int) {
	if x.Role == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, int32(x.GetRole()))
	return n
}

func (x *UserInfo) sizeField2() (n int) {
	if x.Password == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetPassword())
	return n
}

func (x *Auth) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Auth) sizeField1() (n int) {
	if x.AuthType == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetAuthType())
	return n
}

func (x *Auth) sizeField2() (n int) {
	if x.AppId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAppId())
	return n
}

func (x *Auth) sizeField3() (n int) {
	if x.UnionId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUnionId())
	return n
}

func (x *AuthInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *AuthInfo) sizeField1() (n int) {
	if x.AuthType == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, int32(x.GetAuthType()))
	return n
}

func (x *AuthInfo) sizeField2() (n int) {
	if x.AppId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAppId())
	return n
}

func (x *AuthInfo) sizeField3() (n int) {
	if x.UnionId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUnionId())
	return n
}

func (x *EmailOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *EmailOptions) sizeField1() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetEmail())
	return n
}

func (x *EmailOptions) sizeField2() (n int) {
	if x.Code == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetCode())
	return n
}

func (x *UserIdOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UserIdOptions) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *UserIdOptions) sizeField2() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPassword())
	return n
}

func (x *Point) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Point) sizeField1() (n int) {
	if x.X == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetX())
	return n
}

func (x *Point) sizeField2() (n int) {
	if x.Y == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetY())
	return n
}

func (x *Captcha) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Captcha) sizeField1() (n int) {
	if x.Point == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPoint())
	return n
}

func (x *Captcha) sizeField2() (n int) {
	if x.Key == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetKey())
	return n
}

var fieldIDToName_User = map[int32]string{
	1: "UserId",
	2: "Role",
	3: "Password",
}

var fieldIDToName_UserInfo = map[int32]string{
	1: "Role",
	2: "Password",
}

var fieldIDToName_Auth = map[int32]string{
	1: "AuthType",
	2: "AppId",
	3: "UnionId",
}

var fieldIDToName_AuthInfo = map[int32]string{
	1: "AuthType",
	2: "AppId",
	3: "UnionId",
}

var fieldIDToName_EmailOptions = map[int32]string{
	1: "Email",
	2: "Code",
}

var fieldIDToName_UserIdOptions = map[int32]string{
	1: "UserId",
	2: "Password",
}

var fieldIDToName_Point = map[int32]string{
	1: "X",
	2: "Y",
}

var fieldIDToName_Captcha = map[int32]string{
	1: "Point",
	2: "Key",
}
