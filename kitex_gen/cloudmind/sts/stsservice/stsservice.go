// Code generated by Kitex v0.8.0. DO NOT EDIT.

package stsservice

import (
	"context"
	sts "github.com/CloudStriver/service-idl-gen-go/kitex_gen/cloudmind/sts"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return stsServiceServiceInfo
}

var stsServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "StsService"
	handlerType := (*sts.StsService)(nil)
	methods := map[string]kitex.MethodInfo{
		"SetPassword":  kitex.NewMethodInfo(setPasswordHandler, newSetPasswordArgs, newSetPasswordResult, false),
		"SendEmail":    kitex.NewMethodInfo(sendEmailHandler, newSendEmailArgs, newSendEmailResult, false),
		"CheckEmail":   kitex.NewMethodInfo(checkEmailHandler, newCheckEmailArgs, newCheckEmailResult, false),
		"CreateAuth":   kitex.NewMethodInfo(createAuthHandler, newCreateAuthArgs, newCreateAuthResult, false),
		"Login":        kitex.NewMethodInfo(loginHandler, newLoginArgs, newLoginResult, false),
		"AppendAuth":   kitex.NewMethodInfo(appendAuthHandler, newAppendAuthArgs, newAppendAuthResult, false),
		"genCosSts":    kitex.NewMethodInfo(genCosStsHandler, newGenCosStsArgs, newGenCosStsResult, false),
		"genSignedUrl": kitex.NewMethodInfo(genSignedUrlHandler, newGenSignedUrlArgs, newGenSignedUrlResult, false),
		"deleteObject": kitex.NewMethodInfo(deleteObjectHandler, newDeleteObjectArgs, newDeleteObjectResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "cloudmind.sts",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func setPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.SetPasswordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).SetPassword(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SetPasswordArgs:
		success, err := handler.(sts.StsService).SetPassword(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SetPasswordResult)
		realResult.Success = success
	}
	return nil
}
func newSetPasswordArgs() interface{} {
	return &SetPasswordArgs{}
}

func newSetPasswordResult() interface{} {
	return &SetPasswordResult{}
}

type SetPasswordArgs struct {
	Req *sts.SetPasswordReq
}

func (p *SetPasswordArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.SetPasswordReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SetPasswordArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SetPasswordArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SetPasswordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SetPasswordArgs) Unmarshal(in []byte) error {
	msg := new(sts.SetPasswordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SetPasswordArgs_Req_DEFAULT *sts.SetPasswordReq

func (p *SetPasswordArgs) GetReq() *sts.SetPasswordReq {
	if !p.IsSetReq() {
		return SetPasswordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SetPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SetPasswordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SetPasswordResult struct {
	Success *sts.SetPasswordResp
}

var SetPasswordResult_Success_DEFAULT *sts.SetPasswordResp

func (p *SetPasswordResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.SetPasswordResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SetPasswordResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SetPasswordResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SetPasswordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SetPasswordResult) Unmarshal(in []byte) error {
	msg := new(sts.SetPasswordResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SetPasswordResult) GetSuccess() *sts.SetPasswordResp {
	if !p.IsSetSuccess() {
		return SetPasswordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SetPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.SetPasswordResp)
}

func (p *SetPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SetPasswordResult) GetResult() interface{} {
	return p.Success
}

func sendEmailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.SendEmailReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).SendEmail(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SendEmailArgs:
		success, err := handler.(sts.StsService).SendEmail(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendEmailResult)
		realResult.Success = success
	}
	return nil
}
func newSendEmailArgs() interface{} {
	return &SendEmailArgs{}
}

func newSendEmailResult() interface{} {
	return &SendEmailResult{}
}

type SendEmailArgs struct {
	Req *sts.SendEmailReq
}

func (p *SendEmailArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.SendEmailReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendEmailArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendEmailArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendEmailArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SendEmailArgs) Unmarshal(in []byte) error {
	msg := new(sts.SendEmailReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendEmailArgs_Req_DEFAULT *sts.SendEmailReq

func (p *SendEmailArgs) GetReq() *sts.SendEmailReq {
	if !p.IsSetReq() {
		return SendEmailArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendEmailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SendEmailArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SendEmailResult struct {
	Success *sts.SendEmailResp
}

var SendEmailResult_Success_DEFAULT *sts.SendEmailResp

func (p *SendEmailResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.SendEmailResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendEmailResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendEmailResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendEmailResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SendEmailResult) Unmarshal(in []byte) error {
	msg := new(sts.SendEmailResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendEmailResult) GetSuccess() *sts.SendEmailResp {
	if !p.IsSetSuccess() {
		return SendEmailResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendEmailResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.SendEmailResp)
}

func (p *SendEmailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendEmailResult) GetResult() interface{} {
	return p.Success
}

func checkEmailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.CheckEmailReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).CheckEmail(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CheckEmailArgs:
		success, err := handler.(sts.StsService).CheckEmail(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckEmailResult)
		realResult.Success = success
	}
	return nil
}
func newCheckEmailArgs() interface{} {
	return &CheckEmailArgs{}
}

func newCheckEmailResult() interface{} {
	return &CheckEmailResult{}
}

type CheckEmailArgs struct {
	Req *sts.CheckEmailReq
}

func (p *CheckEmailArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.CheckEmailReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CheckEmailArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CheckEmailArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CheckEmailArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CheckEmailArgs) Unmarshal(in []byte) error {
	msg := new(sts.CheckEmailReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckEmailArgs_Req_DEFAULT *sts.CheckEmailReq

func (p *CheckEmailArgs) GetReq() *sts.CheckEmailReq {
	if !p.IsSetReq() {
		return CheckEmailArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckEmailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CheckEmailArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CheckEmailResult struct {
	Success *sts.CheckEmailResp
}

var CheckEmailResult_Success_DEFAULT *sts.CheckEmailResp

func (p *CheckEmailResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.CheckEmailResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CheckEmailResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CheckEmailResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CheckEmailResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CheckEmailResult) Unmarshal(in []byte) error {
	msg := new(sts.CheckEmailResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckEmailResult) GetSuccess() *sts.CheckEmailResp {
	if !p.IsSetSuccess() {
		return CheckEmailResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckEmailResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.CheckEmailResp)
}

func (p *CheckEmailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckEmailResult) GetResult() interface{} {
	return p.Success
}

func createAuthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.CreateAuthReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).CreateAuth(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateAuthArgs:
		success, err := handler.(sts.StsService).CreateAuth(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateAuthResult)
		realResult.Success = success
	}
	return nil
}
func newCreateAuthArgs() interface{} {
	return &CreateAuthArgs{}
}

func newCreateAuthResult() interface{} {
	return &CreateAuthResult{}
}

type CreateAuthArgs struct {
	Req *sts.CreateAuthReq
}

func (p *CreateAuthArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.CreateAuthReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateAuthArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateAuthArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateAuthArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateAuthArgs) Unmarshal(in []byte) error {
	msg := new(sts.CreateAuthReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateAuthArgs_Req_DEFAULT *sts.CreateAuthReq

func (p *CreateAuthArgs) GetReq() *sts.CreateAuthReq {
	if !p.IsSetReq() {
		return CreateAuthArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateAuthArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateAuthArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateAuthResult struct {
	Success *sts.CreateAuthResp
}

var CreateAuthResult_Success_DEFAULT *sts.CreateAuthResp

func (p *CreateAuthResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.CreateAuthResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateAuthResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateAuthResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateAuthResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateAuthResult) Unmarshal(in []byte) error {
	msg := new(sts.CreateAuthResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateAuthResult) GetSuccess() *sts.CreateAuthResp {
	if !p.IsSetSuccess() {
		return CreateAuthResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateAuthResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.CreateAuthResp)
}

func (p *CreateAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateAuthResult) GetResult() interface{} {
	return p.Success
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.LoginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).Login(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *LoginArgs:
		success, err := handler.(sts.StsService).Login(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LoginResult)
		realResult.Success = success
	}
	return nil
}
func newLoginArgs() interface{} {
	return &LoginArgs{}
}

func newLoginResult() interface{} {
	return &LoginResult{}
}

type LoginArgs struct {
	Req *sts.LoginReq
}

func (p *LoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.LoginReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LoginArgs) Unmarshal(in []byte) error {
	msg := new(sts.LoginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LoginArgs_Req_DEFAULT *sts.LoginReq

func (p *LoginArgs) GetReq() *sts.LoginReq {
	if !p.IsSetReq() {
		return LoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LoginResult struct {
	Success *sts.LoginResp
}

var LoginResult_Success_DEFAULT *sts.LoginResp

func (p *LoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.LoginResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LoginResult) Unmarshal(in []byte) error {
	msg := new(sts.LoginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LoginResult) GetSuccess() *sts.LoginResp {
	if !p.IsSetSuccess() {
		return LoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.LoginResp)
}

func (p *LoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LoginResult) GetResult() interface{} {
	return p.Success
}

func appendAuthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.AppendAuthReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).AppendAuth(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AppendAuthArgs:
		success, err := handler.(sts.StsService).AppendAuth(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AppendAuthResult)
		realResult.Success = success
	}
	return nil
}
func newAppendAuthArgs() interface{} {
	return &AppendAuthArgs{}
}

func newAppendAuthResult() interface{} {
	return &AppendAuthResult{}
}

type AppendAuthArgs struct {
	Req *sts.AppendAuthReq
}

func (p *AppendAuthArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.AppendAuthReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AppendAuthArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AppendAuthArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AppendAuthArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AppendAuthArgs) Unmarshal(in []byte) error {
	msg := new(sts.AppendAuthReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AppendAuthArgs_Req_DEFAULT *sts.AppendAuthReq

func (p *AppendAuthArgs) GetReq() *sts.AppendAuthReq {
	if !p.IsSetReq() {
		return AppendAuthArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AppendAuthArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppendAuthArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AppendAuthResult struct {
	Success *sts.AppendAuthResp
}

var AppendAuthResult_Success_DEFAULT *sts.AppendAuthResp

func (p *AppendAuthResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.AppendAuthResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AppendAuthResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AppendAuthResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AppendAuthResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AppendAuthResult) Unmarshal(in []byte) error {
	msg := new(sts.AppendAuthResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AppendAuthResult) GetSuccess() *sts.AppendAuthResp {
	if !p.IsSetSuccess() {
		return AppendAuthResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AppendAuthResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.AppendAuthResp)
}

func (p *AppendAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppendAuthResult) GetResult() interface{} {
	return p.Success
}

func genCosStsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.GenCosStsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).GenCosSts(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GenCosStsArgs:
		success, err := handler.(sts.StsService).GenCosSts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GenCosStsResult)
		realResult.Success = success
	}
	return nil
}
func newGenCosStsArgs() interface{} {
	return &GenCosStsArgs{}
}

func newGenCosStsResult() interface{} {
	return &GenCosStsResult{}
}

type GenCosStsArgs struct {
	Req *sts.GenCosStsReq
}

func (p *GenCosStsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.GenCosStsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GenCosStsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GenCosStsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GenCosStsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GenCosStsArgs) Unmarshal(in []byte) error {
	msg := new(sts.GenCosStsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GenCosStsArgs_Req_DEFAULT *sts.GenCosStsReq

func (p *GenCosStsArgs) GetReq() *sts.GenCosStsReq {
	if !p.IsSetReq() {
		return GenCosStsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GenCosStsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GenCosStsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GenCosStsResult struct {
	Success *sts.GenCosStsResp
}

var GenCosStsResult_Success_DEFAULT *sts.GenCosStsResp

func (p *GenCosStsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.GenCosStsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GenCosStsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GenCosStsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GenCosStsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GenCosStsResult) Unmarshal(in []byte) error {
	msg := new(sts.GenCosStsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GenCosStsResult) GetSuccess() *sts.GenCosStsResp {
	if !p.IsSetSuccess() {
		return GenCosStsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GenCosStsResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.GenCosStsResp)
}

func (p *GenCosStsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenCosStsResult) GetResult() interface{} {
	return p.Success
}

func genSignedUrlHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.GenSignedUrlReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).GenSignedUrl(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GenSignedUrlArgs:
		success, err := handler.(sts.StsService).GenSignedUrl(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GenSignedUrlResult)
		realResult.Success = success
	}
	return nil
}
func newGenSignedUrlArgs() interface{} {
	return &GenSignedUrlArgs{}
}

func newGenSignedUrlResult() interface{} {
	return &GenSignedUrlResult{}
}

type GenSignedUrlArgs struct {
	Req *sts.GenSignedUrlReq
}

func (p *GenSignedUrlArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.GenSignedUrlReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GenSignedUrlArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GenSignedUrlArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GenSignedUrlArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GenSignedUrlArgs) Unmarshal(in []byte) error {
	msg := new(sts.GenSignedUrlReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GenSignedUrlArgs_Req_DEFAULT *sts.GenSignedUrlReq

func (p *GenSignedUrlArgs) GetReq() *sts.GenSignedUrlReq {
	if !p.IsSetReq() {
		return GenSignedUrlArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GenSignedUrlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GenSignedUrlArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GenSignedUrlResult struct {
	Success *sts.GenSignedUrlResp
}

var GenSignedUrlResult_Success_DEFAULT *sts.GenSignedUrlResp

func (p *GenSignedUrlResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.GenSignedUrlResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GenSignedUrlResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GenSignedUrlResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GenSignedUrlResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GenSignedUrlResult) Unmarshal(in []byte) error {
	msg := new(sts.GenSignedUrlResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GenSignedUrlResult) GetSuccess() *sts.GenSignedUrlResp {
	if !p.IsSetSuccess() {
		return GenSignedUrlResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GenSignedUrlResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.GenSignedUrlResp)
}

func (p *GenSignedUrlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenSignedUrlResult) GetResult() interface{} {
	return p.Success
}

func deleteObjectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.DeleteObjectReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).DeleteObject(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteObjectArgs:
		success, err := handler.(sts.StsService).DeleteObject(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteObjectResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteObjectArgs() interface{} {
	return &DeleteObjectArgs{}
}

func newDeleteObjectResult() interface{} {
	return &DeleteObjectResult{}
}

type DeleteObjectArgs struct {
	Req *sts.DeleteObjectReq
}

func (p *DeleteObjectArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.DeleteObjectReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteObjectArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteObjectArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteObjectArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteObjectArgs) Unmarshal(in []byte) error {
	msg := new(sts.DeleteObjectReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteObjectArgs_Req_DEFAULT *sts.DeleteObjectReq

func (p *DeleteObjectArgs) GetReq() *sts.DeleteObjectReq {
	if !p.IsSetReq() {
		return DeleteObjectArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteObjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteObjectArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteObjectResult struct {
	Success *sts.DeleteObjectResp
}

var DeleteObjectResult_Success_DEFAULT *sts.DeleteObjectResp

func (p *DeleteObjectResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.DeleteObjectResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteObjectResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteObjectResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteObjectResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteObjectResult) Unmarshal(in []byte) error {
	msg := new(sts.DeleteObjectResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteObjectResult) GetSuccess() *sts.DeleteObjectResp {
	if !p.IsSetSuccess() {
		return DeleteObjectResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteObjectResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.DeleteObjectResp)
}

func (p *DeleteObjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteObjectResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SetPassword(ctx context.Context, Req *sts.SetPasswordReq) (r *sts.SetPasswordResp, err error) {
	var _args SetPasswordArgs
	_args.Req = Req
	var _result SetPasswordResult
	if err = p.c.Call(ctx, "SetPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendEmail(ctx context.Context, Req *sts.SendEmailReq) (r *sts.SendEmailResp, err error) {
	var _args SendEmailArgs
	_args.Req = Req
	var _result SendEmailResult
	if err = p.c.Call(ctx, "SendEmail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckEmail(ctx context.Context, Req *sts.CheckEmailReq) (r *sts.CheckEmailResp, err error) {
	var _args CheckEmailArgs
	_args.Req = Req
	var _result CheckEmailResult
	if err = p.c.Call(ctx, "CheckEmail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateAuth(ctx context.Context, Req *sts.CreateAuthReq) (r *sts.CreateAuthResp, err error) {
	var _args CreateAuthArgs
	_args.Req = Req
	var _result CreateAuthResult
	if err = p.c.Call(ctx, "CreateAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, Req *sts.LoginReq) (r *sts.LoginResp, err error) {
	var _args LoginArgs
	_args.Req = Req
	var _result LoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AppendAuth(ctx context.Context, Req *sts.AppendAuthReq) (r *sts.AppendAuthResp, err error) {
	var _args AppendAuthArgs
	_args.Req = Req
	var _result AppendAuthResult
	if err = p.c.Call(ctx, "AppendAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GenCosSts(ctx context.Context, Req *sts.GenCosStsReq) (r *sts.GenCosStsResp, err error) {
	var _args GenCosStsArgs
	_args.Req = Req
	var _result GenCosStsResult
	if err = p.c.Call(ctx, "genCosSts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GenSignedUrl(ctx context.Context, Req *sts.GenSignedUrlReq) (r *sts.GenSignedUrlResp, err error) {
	var _args GenSignedUrlArgs
	_args.Req = Req
	var _result GenSignedUrlResult
	if err = p.c.Call(ctx, "genSignedUrl", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteObject(ctx context.Context, Req *sts.DeleteObjectReq) (r *sts.DeleteObjectResp, err error) {
	var _args DeleteObjectArgs
	_args.Req = Req
	var _result DeleteObjectResult
	if err = p.c.Call(ctx, "deleteObject", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
