// Code generated by Kitex v0.9.0. DO NOT EDIT.

package tradeservice

import (
	"context"
	trade "github.com/CloudStriver/service-idl-gen-go/kitex_gen/cloudmind/trade"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	UpdateBalance(ctx context.Context, Req *trade.UpdateBalanceReq, callOptions ...callopt.Option) (r *trade.UpdateBalanceResp, err error)
	GetBalance(ctx context.Context, Req *trade.GetBalanceReq, callOptions ...callopt.Option) (r *trade.GetBalanceResp, err error)
	CreateBalance(ctx context.Context, Req *trade.CreateBalanceReq, callOptions ...callopt.Option) (r *trade.CreateBalanceResp, err error)
	AddStock(ctx context.Context, Req *trade.AddStockReq, callOptions ...callopt.Option) (r *trade.AddStockResp, err error)
	GetStock(ctx context.Context, Req *trade.GetStockReq, callOptions ...callopt.Option) (r *trade.GetStockResp, err error)
	GetStocks(ctx context.Context, Req *trade.GetStocksReq, callOptions ...callopt.Option) (r *trade.GetStocksResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kTradeServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kTradeServiceClient struct {
	*kClient
}

func (p *kTradeServiceClient) UpdateBalance(ctx context.Context, Req *trade.UpdateBalanceReq, callOptions ...callopt.Option) (r *trade.UpdateBalanceResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateBalance(ctx, Req)
}

func (p *kTradeServiceClient) GetBalance(ctx context.Context, Req *trade.GetBalanceReq, callOptions ...callopt.Option) (r *trade.GetBalanceResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetBalance(ctx, Req)
}

func (p *kTradeServiceClient) CreateBalance(ctx context.Context, Req *trade.CreateBalanceReq, callOptions ...callopt.Option) (r *trade.CreateBalanceResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateBalance(ctx, Req)
}

func (p *kTradeServiceClient) AddStock(ctx context.Context, Req *trade.AddStockReq, callOptions ...callopt.Option) (r *trade.AddStockResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddStock(ctx, Req)
}

func (p *kTradeServiceClient) GetStock(ctx context.Context, Req *trade.GetStockReq, callOptions ...callopt.Option) (r *trade.GetStockResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetStock(ctx, Req)
}

func (p *kTradeServiceClient) GetStocks(ctx context.Context, Req *trade.GetStocksReq, callOptions ...callopt.Option) (r *trade.GetStocksResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetStocks(ctx, Req)
}
