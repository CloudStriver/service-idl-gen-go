// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package content

import (
	fmt "fmt"
	basic "github.com/CloudStriver/service-idl-gen-go/kitex_gen/basic"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *GetFileIsExistReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileIsExistReq[number], err)
}

func (x *GetFileIsExistReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Md5, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileIsExistResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileIsExistResp[number], err)
}

func (x *GetFileIsExistResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Ok, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileReq[number], err)
}

func (x *GetFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FileFilterOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FilterOptions = &v
	return offset, nil
}

func (x *GetFileReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.IsGetSize, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileResp[number], err)
}

func (x *GetFileResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FileInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.File = &v
	return offset, nil
}

func (x *GetFileListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileListReq[number], err)
}

func (x *GetFileListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v SearchOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SearchOptions = &v
	return offset, nil
}

func (x *GetFileListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v FileFilterOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FilterOptions = &v
	return offset, nil
}

func (x *GetFileListReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *GetFileListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileListResp[number], err)
}

func (x *GetFileListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FileInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *GetFileListResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetFileListResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFolderSizeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFolderSizeReq[number], err)
}

func (x *GetFolderSizeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FileFilterOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FilterOptions = &v
	return offset, nil
}

func (x *GetFolderSizeResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFolderSizeResp[number], err)
}

func (x *GetFolderSizeResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.SpaceSize, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetFileCountReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileCountReq[number], err)
}

func (x *GetFileCountReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v SearchOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SearchOptions = &v
	return offset, nil
}

func (x *GetFileCountReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v FileFilterOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FilterOptions = &v
	return offset, nil
}

func (x *GetFileCountResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileCountResp[number], err)
}

func (x *GetFileCountResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Count, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetFileBySharingCodeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileBySharingCodeReq[number], err)
}

func (x *GetFileBySharingCodeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.SharingCode, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileBySharingCodeResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileBySharingCodeResp[number], err)
}

func (x *GetFileBySharingCodeResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FileInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *CreateFolderReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateFolderReq[number], err)
}

func (x *CreateFolderReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v File
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.File = &v
	return offset, nil
}

func (x *CreateFolderResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateFolderResp[number], err)
}

func (x *CreateFolderResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateFileReq[number], err)
}

func (x *UpdateFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v File
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.File = &v
	return offset, nil
}

func (x *UpdateFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *MoveFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MoveFileReq[number], err)
}

func (x *MoveFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FileFilterOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FilterOptions = &v
	return offset, nil
}

func (x *MoveFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeleteFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteFileReq[number], err)
}

func (x *DeleteFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteFileReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteFileReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ClearUpload, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *DeleteFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteFileResp[number], err)
}

func (x *DeleteFileResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Ok, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *DeleteShareFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteShareFileReq[number], err)
}

func (x *DeleteShareFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ShareId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteShareFileReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteShareFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteShareFileResp[number], err)
}

func (x *DeleteShareFileResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Ok, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *DeleteExpiredFilesReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeleteExpiredFilesResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeleteExpiredShareCodesReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeleteExpiredShareCodesResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *AskUploadFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AskUploadFileReq[number], err)
}

func (x *AskUploadFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v File
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.File = &v
	return offset, nil
}

func (x *AskUploadFileReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Ok, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *AskUploadFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *CreateLabelReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateLabelReq[number], err)
}

func (x *CreateLabelReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Label
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Label = &v
	return offset, nil
}

func (x *CreateLabelResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateLabelResp[number], err)
}

func (x *CreateLabelResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetLabelReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetLabelReq[number], err)
}

func (x *GetLabelReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetLabelResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetLabelResp[number], err)
}

func (x *GetLabelResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Label
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Label = &v
	return offset, nil
}

func (x *UpdateLabelReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateLabelReq[number], err)
}

func (x *UpdateLabelReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Label
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Label = &v
	return offset, nil
}

func (x *UpdateLabelResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeleteLabelReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteLabelReq[number], err)
}

func (x *DeleteLabelReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteLabelResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetFileIsExistReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetFileIsExistReq) fastWriteField1(buf []byte) (offset int) {
	if x.Md5 == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMd5())
	return offset
}

func (x *GetFileIsExistResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetFileIsExistResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Ok {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetOk())
	return offset
}

func (x *GetFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.FilterOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFilterOptions())
	return offset
}

func (x *GetFileReq) fastWriteField2(buf []byte) (offset int) {
	if !x.IsGetSize {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetIsGetSize())
	return offset
}

func (x *GetFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetFileResp) fastWriteField1(buf []byte) (offset int) {
	if x.File == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFile())
	return offset
}

func (x *GetFileListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetFileListReq) fastWriteField1(buf []byte) (offset int) {
	if x.SearchOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetSearchOptions())
	return offset
}

func (x *GetFileListReq) fastWriteField2(buf []byte) (offset int) {
	if x.FilterOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetFilterOptions())
	return offset
}

func (x *GetFileListReq) fastWriteField3(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetPaginationOptions())
	return offset
}

func (x *GetFileListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetFileListResp) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *GetFileListResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *GetFileListResp) fastWriteField3(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetToken())
	return offset
}

func (x *GetFolderSizeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetFolderSizeReq) fastWriteField1(buf []byte) (offset int) {
	if x.FilterOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFilterOptions())
	return offset
}

func (x *GetFolderSizeResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetFolderSizeResp) fastWriteField1(buf []byte) (offset int) {
	if x.SpaceSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetSpaceSize())
	return offset
}

func (x *GetFileCountReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFileCountReq) fastWriteField1(buf []byte) (offset int) {
	if x.SearchOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetSearchOptions())
	return offset
}

func (x *GetFileCountReq) fastWriteField2(buf []byte) (offset int) {
	if x.FilterOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetFilterOptions())
	return offset
}

func (x *GetFileCountResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetFileCountResp) fastWriteField1(buf []byte) (offset int) {
	if x.Count == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCount())
	return offset
}

func (x *GetFileBySharingCodeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetFileBySharingCodeReq) fastWriteField1(buf []byte) (offset int) {
	if x.SharingCode == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetSharingCode())
	return offset
}

func (x *GetFileBySharingCodeResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetFileBySharingCodeResp) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *CreateFolderReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateFolderReq) fastWriteField1(buf []byte) (offset int) {
	if x.File == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFile())
	return offset
}

func (x *CreateFolderResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateFolderResp) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *UpdateFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.File == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFile())
	return offset
}

func (x *UpdateFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *MoveFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *MoveFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.FilterOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFilterOptions())
	return offset
}

func (x *MoveFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeleteFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *DeleteFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *DeleteFileReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *DeleteFileReq) fastWriteField3(buf []byte) (offset int) {
	if !x.ClearUpload {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 3, x.GetClearUpload())
	return offset
}

func (x *DeleteFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteFileResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Ok {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetOk())
	return offset
}

func (x *DeleteShareFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *DeleteShareFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.ShareId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetShareId())
	return offset
}

func (x *DeleteShareFileReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *DeleteShareFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteShareFileResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Ok {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetOk())
	return offset
}

func (x *DeleteExpiredFilesReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeleteExpiredFilesResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeleteExpiredShareCodesReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeleteExpiredShareCodesResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *AskUploadFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *AskUploadFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.File == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFile())
	return offset
}

func (x *AskUploadFileReq) fastWriteField2(buf []byte) (offset int) {
	if !x.Ok {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetOk())
	return offset
}

func (x *AskUploadFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *CreateLabelReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateLabelReq) fastWriteField1(buf []byte) (offset int) {
	if x.Label == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLabel())
	return offset
}

func (x *CreateLabelResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateLabelResp) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetLabelReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetLabelReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetLabelResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetLabelResp) fastWriteField1(buf []byte) (offset int) {
	if x.Label == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLabel())
	return offset
}

func (x *UpdateLabelReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateLabelReq) fastWriteField1(buf []byte) (offset int) {
	if x.Label == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLabel())
	return offset
}

func (x *UpdateLabelResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeleteLabelReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteLabelReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeleteLabelResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetFileIsExistReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetFileIsExistReq) sizeField1() (n int) {
	if x.Md5 == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMd5())
	return n
}

func (x *GetFileIsExistResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetFileIsExistResp) sizeField1() (n int) {
	if !x.Ok {
		return n
	}
	n += fastpb.SizeBool(1, x.GetOk())
	return n
}

func (x *GetFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFileReq) sizeField1() (n int) {
	if x.FilterOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFilterOptions())
	return n
}

func (x *GetFileReq) sizeField2() (n int) {
	if !x.IsGetSize {
		return n
	}
	n += fastpb.SizeBool(2, x.GetIsGetSize())
	return n
}

func (x *GetFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetFileResp) sizeField1() (n int) {
	if x.File == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFile())
	return n
}

func (x *GetFileListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetFileListReq) sizeField1() (n int) {
	if x.SearchOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetSearchOptions())
	return n
}

func (x *GetFileListReq) sizeField2() (n int) {
	if x.FilterOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetFilterOptions())
	return n
}

func (x *GetFileListReq) sizeField3() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetPaginationOptions())
	return n
}

func (x *GetFileListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetFileListResp) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *GetFileListResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *GetFileListResp) sizeField3() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetToken())
	return n
}

func (x *GetFolderSizeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetFolderSizeReq) sizeField1() (n int) {
	if x.FilterOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFilterOptions())
	return n
}

func (x *GetFolderSizeResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetFolderSizeResp) sizeField1() (n int) {
	if x.SpaceSize == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetSpaceSize())
	return n
}

func (x *GetFileCountReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFileCountReq) sizeField1() (n int) {
	if x.SearchOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetSearchOptions())
	return n
}

func (x *GetFileCountReq) sizeField2() (n int) {
	if x.FilterOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetFilterOptions())
	return n
}

func (x *GetFileCountResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetFileCountResp) sizeField1() (n int) {
	if x.Count == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCount())
	return n
}

func (x *GetFileBySharingCodeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetFileBySharingCodeReq) sizeField1() (n int) {
	if x.SharingCode == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetSharingCode())
	return n
}

func (x *GetFileBySharingCodeResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetFileBySharingCodeResp) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *CreateFolderReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateFolderReq) sizeField1() (n int) {
	if x.File == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFile())
	return n
}

func (x *CreateFolderResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateFolderResp) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *UpdateFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateFileReq) sizeField1() (n int) {
	if x.File == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFile())
	return n
}

func (x *UpdateFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *MoveFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *MoveFileReq) sizeField1() (n int) {
	if x.FilterOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFilterOptions())
	return n
}

func (x *MoveFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeleteFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *DeleteFileReq) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *DeleteFileReq) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *DeleteFileReq) sizeField3() (n int) {
	if !x.ClearUpload {
		return n
	}
	n += fastpb.SizeBool(3, x.GetClearUpload())
	return n
}

func (x *DeleteFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteFileResp) sizeField1() (n int) {
	if !x.Ok {
		return n
	}
	n += fastpb.SizeBool(1, x.GetOk())
	return n
}

func (x *DeleteShareFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *DeleteShareFileReq) sizeField1() (n int) {
	if x.ShareId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetShareId())
	return n
}

func (x *DeleteShareFileReq) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *DeleteShareFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteShareFileResp) sizeField1() (n int) {
	if !x.Ok {
		return n
	}
	n += fastpb.SizeBool(1, x.GetOk())
	return n
}

func (x *DeleteExpiredFilesReq) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeleteExpiredFilesResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeleteExpiredShareCodesReq) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeleteExpiredShareCodesResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *AskUploadFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *AskUploadFileReq) sizeField1() (n int) {
	if x.File == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFile())
	return n
}

func (x *AskUploadFileReq) sizeField2() (n int) {
	if !x.Ok {
		return n
	}
	n += fastpb.SizeBool(2, x.GetOk())
	return n
}

func (x *AskUploadFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *CreateLabelReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateLabelReq) sizeField1() (n int) {
	if x.Label == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetLabel())
	return n
}

func (x *CreateLabelResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateLabelResp) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *GetLabelReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetLabelReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *GetLabelResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetLabelResp) sizeField1() (n int) {
	if x.Label == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetLabel())
	return n
}

func (x *UpdateLabelReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateLabelReq) sizeField1() (n int) {
	if x.Label == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetLabel())
	return n
}

func (x *UpdateLabelResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeleteLabelReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteLabelReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *DeleteLabelResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

var fieldIDToName_GetFileIsExistReq = map[int32]string{
	1: "Md5",
}

var fieldIDToName_GetFileIsExistResp = map[int32]string{
	1: "Ok",
}

var fieldIDToName_GetFileReq = map[int32]string{
	1: "FilterOptions",
	2: "IsGetSize",
}

var fieldIDToName_GetFileResp = map[int32]string{
	1: "File",
}

var fieldIDToName_GetFileListReq = map[int32]string{
	1: "SearchOptions",
	2: "FilterOptions",
	3: "PaginationOptions",
}

var fieldIDToName_GetFileListResp = map[int32]string{
	1: "Files",
	2: "Total",
	3: "Token",
}

var fieldIDToName_GetFolderSizeReq = map[int32]string{
	1: "FilterOptions",
}

var fieldIDToName_GetFolderSizeResp = map[int32]string{
	1: "SpaceSize",
}

var fieldIDToName_GetFileCountReq = map[int32]string{
	1: "SearchOptions",
	2: "FilterOptions",
}

var fieldIDToName_GetFileCountResp = map[int32]string{
	1: "Count",
}

var fieldIDToName_GetFileBySharingCodeReq = map[int32]string{
	1: "SharingCode",
}

var fieldIDToName_GetFileBySharingCodeResp = map[int32]string{
	1: "Files",
}

var fieldIDToName_CreateFolderReq = map[int32]string{
	1: "File",
}

var fieldIDToName_CreateFolderResp = map[int32]string{
	1: "FileId",
}

var fieldIDToName_UpdateFileReq = map[int32]string{
	1: "File",
}

var fieldIDToName_UpdateFileResp = map[int32]string{}

var fieldIDToName_MoveFileReq = map[int32]string{
	1: "FilterOptions",
}

var fieldIDToName_MoveFileResp = map[int32]string{}

var fieldIDToName_DeleteFileReq = map[int32]string{
	1: "FileId",
	2: "UserId",
	3: "ClearUpload",
}

var fieldIDToName_DeleteFileResp = map[int32]string{
	1: "Ok",
}

var fieldIDToName_DeleteShareFileReq = map[int32]string{
	1: "ShareId",
	2: "UserId",
}

var fieldIDToName_DeleteShareFileResp = map[int32]string{
	1: "Ok",
}

var fieldIDToName_DeleteExpiredFilesReq = map[int32]string{}

var fieldIDToName_DeleteExpiredFilesResp = map[int32]string{}

var fieldIDToName_DeleteExpiredShareCodesReq = map[int32]string{}

var fieldIDToName_DeleteExpiredShareCodesResp = map[int32]string{}

var fieldIDToName_AskUploadFileReq = map[int32]string{
	1: "File",
	2: "Ok",
}

var fieldIDToName_AskUploadFileResp = map[int32]string{}

var fieldIDToName_CreateLabelReq = map[int32]string{
	1: "Label",
}

var fieldIDToName_CreateLabelResp = map[int32]string{
	1: "Id",
}

var fieldIDToName_GetLabelReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_GetLabelResp = map[int32]string{
	1: "Label",
}

var fieldIDToName_UpdateLabelReq = map[int32]string{
	1: "Label",
}

var fieldIDToName_UpdateLabelResp = map[int32]string{}

var fieldIDToName_DeleteLabelReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeleteLabelResp = map[int32]string{}

var _ = basic.File_basic_pagination_proto
