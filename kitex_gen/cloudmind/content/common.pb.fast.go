// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package content

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *File) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_File[number], err)
}

func (x *File) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *File) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *File) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *File) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.TypeString, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *File) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Type = Type(v)
	return offset, nil
}

func (x *File) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Path, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *File) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *File) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.SpaceSize = &tmp
	return offset, err
}

func (x *File) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Md5, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *File) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.IsDel, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *File) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.Zone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *File) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.SubZone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *File) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *File) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 16:
		offset, err = x.fastReadField16(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FileInfo[number], err)
}

func (x *FileInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.TypeString, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileInfo) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Type = Type(v)
	return offset, nil
}

func (x *FileInfo) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Path, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileInfo) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileInfo) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.SpaceSize, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *FileInfo) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Md5, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileInfo) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.IsDel, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *FileInfo) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.Zone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileInfo) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.SubZone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileInfo) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileInfo) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileInfo) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	x.CreateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *FileInfo) fastReadField16(buf []byte, _type int8) (offset int, err error) {
	x.UpdateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Zone) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Zone[number], err)
}

func (x *Zone) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Zone) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Zone) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Value, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ShareFile) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ShareFile[number], err)
}

func (x *ShareFile) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ShareFile) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ShareFile) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ShareFile) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ShareFile) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.EffectiveTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ShareFile) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.BrowseNumber, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ShareFile) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.CreateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ShareFile) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.FileList = append(x.FileList, v)
	return offset, err
}

func (x *ShareCode) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ShareCode[number], err)
}

func (x *ShareCode) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ShareCode) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ShareCode) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ShareCode) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.BrowseNumber, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ShareCode) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CreateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ShareCode) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Key, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchField) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchField[number], err)
}

func (x *SearchField) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Name = &tmp
	return offset, err
}

func (x *SearchField) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Id = &tmp
	return offset, err
}

func (x *SearchField) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Tag = &tmp
	return offset, err
}

func (x *SearchField) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Text = &tmp
	return offset, err
}

func (x *SearchField) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Title = &tmp
	return offset, err
}

func (x *SearchField) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Description = &tmp
	return offset, err
}

func (x *SearchField) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.ProductName = &tmp
	return offset, err
}

func (x *SearchOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchOptions[number], err)
}

func (x *SearchOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var ov SearchOptions_AllFieldsKey
	x.Type = &ov
	ov.AllFieldsKey, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var ov SearchOptions_MultiFieldsKey
	x.Type = &ov
	var v SearchField
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	ov.MultiFieldsKey = &v
	return offset, nil
}

func (x *FileFilterOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FileFilterOptions[number], err)
}

func (x *FileFilterOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyUserId = &tmp
	return offset, err
}

func (x *FileFilterOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyFileId = &tmp
	return offset, err
}

func (x *FileFilterOptions) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyFatherId = &tmp
	return offset, err
}

func (x *FileFilterOptions) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.OnlyFileType = &tmp
	return offset, err
}

func (x *FileFilterOptions) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyZone = &tmp
	return offset, err
}

func (x *FileFilterOptions) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlySubZone = &tmp
	return offset, err
}

func (x *FileFilterOptions) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.OnlyIsDel = &tmp
	return offset, err
}

func (x *FileFilterOptions) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.OnlyDocumentType = &tmp
	return offset, err
}

func (x *FileFilterOptions) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OnlyTypeString = append(x.OnlyTypeString, v)
	return offset, err
}

func (x *ShareFileFilterOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ShareFileFilterOptions[number], err)
}

func (x *ShareFileFilterOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyCode = &tmp
	return offset, err
}

func (x *ShareFileFilterOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyUserId = &tmp
	return offset, err
}

func (x *User) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_User[number], err)
}

func (x *User) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Sex, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *User) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.FullName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.IdCard, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *User) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *User) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Post) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Post[number], err)
}

func (x *Post) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PostId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Post) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Post) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Post) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Text, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Post) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Tags = append(x.Tags, v)
	return offset, err
}

func (x *Post) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Post) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Post) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Post) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PostFilterOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PostFilterOptions[number], err)
}

func (x *PostFilterOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyUserId = &tmp
	return offset, err
}

func (x *PostFilterOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyPostId = &tmp
	return offset, err
}

func (x *PostFilterOptions) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OnlyPostIds = append(x.OnlyPostIds, v)
	return offset, err
}

func (x *PostFilterOptions) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyTitle = &tmp
	return offset, err
}

func (x *PostFilterOptions) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyText = &tmp
	return offset, err
}

func (x *PostFilterOptions) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OnlyTags = append(x.OnlyTags, v)
	return offset, err
}

func (x *PostFilterOptions) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.OnlySetRelation = &tmp
	return offset, err
}

func (x *PostFilterOptions) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.OnlyStatus = &tmp
	return offset, err
}

func (x *Product) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Product[number], err)
}

func (x *Product) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProductId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Product) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Product) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Product) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Product) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Product) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Urls = append(x.Urls, v)
	return offset, err
}

func (x *Product) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Tags = append(x.Tags, v)
	return offset, err
}

func (x *Product) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Product) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Product) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.ProductSize, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Product) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Product) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ProductFilterOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProductFilterOptions[number], err)
}

func (x *ProductFilterOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyUserId = &tmp
	return offset, err
}

func (x *ProductFilterOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyProductId = &tmp
	return offset, err
}

func (x *ProductFilterOptions) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OnlyProductIds = append(x.OnlyProductIds, v)
	return offset, err
}

func (x *ProductFilterOptions) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OnlyTags = append(x.OnlyTags, v)
	return offset, err
}

func (x *ProductFilterOptions) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.OnlySetRelation = &tmp
	return offset, err
}

func (x *ProductFilterOptions) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.OnlyStatus = &tmp
	return offset, err
}

func (x *ProductFilterOptions) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.OnlyType = &tmp
	return offset, err
}

func (x *Order) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Order[number], err)
}

func (x *Order) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Order) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Order) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ProductId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Order) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Order) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.SumPrice, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Order) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.ProductName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Order) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Order) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *OrderFilterOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_OrderFilterOptions[number], err)
}

func (x *OrderFilterOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyUserId = &tmp
	return offset, err
}

func (x *OrderFilterOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyOrderId = &tmp
	return offset, err
}

func (x *OrderFilterOptions) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OnlyOrderIds = append(x.OnlyOrderIds, v)
	return offset, err
}

func (x *OrderFilterOptions) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyProductId = &tmp
	return offset, err
}

func (x *OrderFilterOptions) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.OnlyStatus = &tmp
	return offset, err
}

func (x *Coupon) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Coupon[number], err)
}

func (x *Coupon) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CouponId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Coupon) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Coupon) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Coupon) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Coupon) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.ExpireTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Coupon) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Coupon) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Desciption, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Coupon) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.LowSumPrice = &tmp
	return offset, err
}

func (x *Coupon) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.ProductType = &tmp
	return offset, err
}

func (x *Coupon) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Discount = &tmp
	return offset, err
}

func (x *Coupon) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.DiscountPrice = &tmp
	return offset, err
}

func (x *CouponFilterOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CouponFilterOptions[number], err)
}

func (x *CouponFilterOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyUserId = &tmp
	return offset, err
}

func (x *CouponFilterOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyCouponId = &tmp
	return offset, err
}

func (x *CouponFilterOptions) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OnlyCouponIds = append(x.OnlyCouponIds, v)
	return offset, err
}

func (x *CouponFilterOptions) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.OnlyProductType = &tmp
	return offset, err
}

func (x *CouponFilterOptions) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.OnlyStatus = &tmp
	return offset, err
}

func (x *LabelFilterOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *File) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	return offset
}

func (x *File) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *File) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *File) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *File) fastWriteField4(buf []byte) (offset int) {
	if x.TypeString == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetTypeString())
	return offset
}

func (x *File) fastWriteField5(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetType()))
	return offset
}

func (x *File) fastWriteField6(buf []byte) (offset int) {
	if x.Path == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetPath())
	return offset
}

func (x *File) fastWriteField7(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetFatherId())
	return offset
}

func (x *File) fastWriteField8(buf []byte) (offset int) {
	if x.SpaceSize == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetSpaceSize())
	return offset
}

func (x *File) fastWriteField9(buf []byte) (offset int) {
	if x.Md5 == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetMd5())
	return offset
}

func (x *File) fastWriteField10(buf []byte) (offset int) {
	if x.IsDel == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetIsDel())
	return offset
}

func (x *File) fastWriteField11(buf []byte) (offset int) {
	if x.Zone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetZone())
	return offset
}

func (x *File) fastWriteField12(buf []byte) (offset int) {
	if x.SubZone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 12, x.GetSubZone())
	return offset
}

func (x *File) fastWriteField13(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 13, x.GetDescription())
	return offset
}

func (x *File) fastWriteField14(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 14, x.GetUrl())
	return offset
}

func (x *FileInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	offset += x.fastWriteField16(buf[offset:])
	return offset
}

func (x *FileInfo) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *FileInfo) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *FileInfo) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *FileInfo) fastWriteField4(buf []byte) (offset int) {
	if x.TypeString == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetTypeString())
	return offset
}

func (x *FileInfo) fastWriteField5(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetType()))
	return offset
}

func (x *FileInfo) fastWriteField6(buf []byte) (offset int) {
	if x.Path == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetPath())
	return offset
}

func (x *FileInfo) fastWriteField7(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetFatherId())
	return offset
}

func (x *FileInfo) fastWriteField8(buf []byte) (offset int) {
	if x.SpaceSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetSpaceSize())
	return offset
}

func (x *FileInfo) fastWriteField9(buf []byte) (offset int) {
	if x.Md5 == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetMd5())
	return offset
}

func (x *FileInfo) fastWriteField10(buf []byte) (offset int) {
	if x.IsDel == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetIsDel())
	return offset
}

func (x *FileInfo) fastWriteField11(buf []byte) (offset int) {
	if x.Zone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetZone())
	return offset
}

func (x *FileInfo) fastWriteField12(buf []byte) (offset int) {
	if x.SubZone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 12, x.GetSubZone())
	return offset
}

func (x *FileInfo) fastWriteField13(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 13, x.GetDescription())
	return offset
}

func (x *FileInfo) fastWriteField14(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 14, x.GetUrl())
	return offset
}

func (x *FileInfo) fastWriteField15(buf []byte) (offset int) {
	if x.CreateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 15, x.GetCreateAt())
	return offset
}

func (x *FileInfo) fastWriteField16(buf []byte) (offset int) {
	if x.UpdateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 16, x.GetUpdateAt())
	return offset
}

func (x *Zone) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Zone) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Zone) fastWriteField2(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFatherId())
	return offset
}

func (x *Zone) fastWriteField3(buf []byte) (offset int) {
	if x.Value == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetValue())
	return offset
}

func (x *ShareFile) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *ShareFile) fastWriteField1(buf []byte) (offset int) {
	if x.Code == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *ShareFile) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *ShareFile) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *ShareFile) fastWriteField4(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetStatus())
	return offset
}

func (x *ShareFile) fastWriteField5(buf []byte) (offset int) {
	if x.EffectiveTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetEffectiveTime())
	return offset
}

func (x *ShareFile) fastWriteField6(buf []byte) (offset int) {
	if x.BrowseNumber == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetBrowseNumber())
	return offset
}

func (x *ShareFile) fastWriteField7(buf []byte) (offset int) {
	if x.CreateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetCreateAt())
	return offset
}

func (x *ShareFile) fastWriteField8(buf []byte) (offset int) {
	if len(x.FileList) == 0 {
		return offset
	}
	for i := range x.GetFileList() {
		offset += fastpb.WriteString(buf[offset:], 8, x.GetFileList()[i])
	}
	return offset
}

func (x *ShareCode) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *ShareCode) fastWriteField1(buf []byte) (offset int) {
	if x.Code == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *ShareCode) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *ShareCode) fastWriteField3(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetStatus())
	return offset
}

func (x *ShareCode) fastWriteField4(buf []byte) (offset int) {
	if x.BrowseNumber == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetBrowseNumber())
	return offset
}

func (x *ShareCode) fastWriteField5(buf []byte) (offset int) {
	if x.CreateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetCreateAt())
	return offset
}

func (x *ShareCode) fastWriteField6(buf []byte) (offset int) {
	if x.Key == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetKey())
	return offset
}

func (x *SearchField) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *SearchField) fastWriteField1(buf []byte) (offset int) {
	if x.Name == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *SearchField) fastWriteField2(buf []byte) (offset int) {
	if x.Id == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetId())
	return offset
}

func (x *SearchField) fastWriteField3(buf []byte) (offset int) {
	if x.Tag == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetTag())
	return offset
}

func (x *SearchField) fastWriteField4(buf []byte) (offset int) {
	if x.Text == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetText())
	return offset
}

func (x *SearchField) fastWriteField5(buf []byte) (offset int) {
	if x.Title == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetTitle())
	return offset
}

func (x *SearchField) fastWriteField6(buf []byte) (offset int) {
	if x.Description == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetDescription())
	return offset
}

func (x *SearchField) fastWriteField7(buf []byte) (offset int) {
	if x.ProductName == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetProductName())
	return offset
}

func (x *SearchOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SearchOptions) fastWriteField1(buf []byte) (offset int) {
	if x.GetAllFieldsKey() == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAllFieldsKey())
	return offset
}

func (x *SearchOptions) fastWriteField2(buf []byte) (offset int) {
	if x.GetMultiFieldsKey() == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetMultiFieldsKey())
	return offset
}

func (x *FileFilterOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *FileFilterOptions) fastWriteField1(buf []byte) (offset int) {
	if x.OnlyUserId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOnlyUserId())
	return offset
}

func (x *FileFilterOptions) fastWriteField2(buf []byte) (offset int) {
	if x.OnlyFileId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOnlyFileId())
	return offset
}

func (x *FileFilterOptions) fastWriteField3(buf []byte) (offset int) {
	if x.OnlyFatherId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetOnlyFatherId())
	return offset
}

func (x *FileFilterOptions) fastWriteField4(buf []byte) (offset int) {
	if x.OnlyFileType == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetOnlyFileType())
	return offset
}

func (x *FileFilterOptions) fastWriteField5(buf []byte) (offset int) {
	if x.OnlyZone == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetOnlyZone())
	return offset
}

func (x *FileFilterOptions) fastWriteField6(buf []byte) (offset int) {
	if x.OnlySubZone == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetOnlySubZone())
	return offset
}

func (x *FileFilterOptions) fastWriteField7(buf []byte) (offset int) {
	if x.OnlyIsDel == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetOnlyIsDel())
	return offset
}

func (x *FileFilterOptions) fastWriteField8(buf []byte) (offset int) {
	if x.OnlyDocumentType == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetOnlyDocumentType())
	return offset
}

func (x *FileFilterOptions) fastWriteField9(buf []byte) (offset int) {
	if len(x.OnlyTypeString) == 0 {
		return offset
	}
	for i := range x.GetOnlyTypeString() {
		offset += fastpb.WriteString(buf[offset:], 9, x.GetOnlyTypeString()[i])
	}
	return offset
}

func (x *ShareFileFilterOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ShareFileFilterOptions) fastWriteField1(buf []byte) (offset int) {
	if x.OnlyCode == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOnlyCode())
	return offset
}

func (x *ShareFileFilterOptions) fastWriteField2(buf []byte) (offset int) {
	if x.OnlyUserId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOnlyUserId())
	return offset
}

func (x *User) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *User) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *User) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *User) fastWriteField3(buf []byte) (offset int) {
	if x.Sex == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetSex())
	return offset
}

func (x *User) fastWriteField4(buf []byte) (offset int) {
	if x.FullName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetFullName())
	return offset
}

func (x *User) fastWriteField5(buf []byte) (offset int) {
	if x.IdCard == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetIdCard())
	return offset
}

func (x *User) fastWriteField6(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetCreateTime())
	return offset
}

func (x *User) fastWriteField7(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetUpdateTime())
	return offset
}

func (x *User) fastWriteField8(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetDescription())
	return offset
}

func (x *User) fastWriteField9(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetUrl())
	return offset
}

func (x *Post) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *Post) fastWriteField1(buf []byte) (offset int) {
	if x.PostId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPostId())
	return offset
}

func (x *Post) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *Post) fastWriteField3(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetTitle())
	return offset
}

func (x *Post) fastWriteField4(buf []byte) (offset int) {
	if x.Text == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetText())
	return offset
}

func (x *Post) fastWriteField5(buf []byte) (offset int) {
	if len(x.Tags) == 0 {
		return offset
	}
	for i := range x.GetTags() {
		offset += fastpb.WriteString(buf[offset:], 5, x.GetTags()[i])
	}
	return offset
}

func (x *Post) fastWriteField6(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetStatus())
	return offset
}

func (x *Post) fastWriteField7(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetUrl())
	return offset
}

func (x *Post) fastWriteField8(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetCreateTime())
	return offset
}

func (x *Post) fastWriteField9(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetUpdateTime())
	return offset
}

func (x *PostFilterOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *PostFilterOptions) fastWriteField1(buf []byte) (offset int) {
	if x.OnlyUserId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOnlyUserId())
	return offset
}

func (x *PostFilterOptions) fastWriteField2(buf []byte) (offset int) {
	if x.OnlyPostId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOnlyPostId())
	return offset
}

func (x *PostFilterOptions) fastWriteField3(buf []byte) (offset int) {
	if len(x.OnlyPostIds) == 0 {
		return offset
	}
	for i := range x.GetOnlyPostIds() {
		offset += fastpb.WriteString(buf[offset:], 3, x.GetOnlyPostIds()[i])
	}
	return offset
}

func (x *PostFilterOptions) fastWriteField4(buf []byte) (offset int) {
	if x.OnlyTitle == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetOnlyTitle())
	return offset
}

func (x *PostFilterOptions) fastWriteField5(buf []byte) (offset int) {
	if x.OnlyText == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetOnlyText())
	return offset
}

func (x *PostFilterOptions) fastWriteField6(buf []byte) (offset int) {
	if len(x.OnlyTags) == 0 {
		return offset
	}
	for i := range x.GetOnlyTags() {
		offset += fastpb.WriteString(buf[offset:], 6, x.GetOnlyTags()[i])
	}
	return offset
}

func (x *PostFilterOptions) fastWriteField7(buf []byte) (offset int) {
	if x.OnlySetRelation == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetOnlySetRelation())
	return offset
}

func (x *PostFilterOptions) fastWriteField8(buf []byte) (offset int) {
	if x.OnlyStatus == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetOnlyStatus())
	return offset
}

func (x *Product) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	return offset
}

func (x *Product) fastWriteField1(buf []byte) (offset int) {
	if x.ProductId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetProductId())
	return offset
}

func (x *Product) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *Product) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *Product) fastWriteField4(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetDescription())
	return offset
}

func (x *Product) fastWriteField5(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetStatus())
	return offset
}

func (x *Product) fastWriteField6(buf []byte) (offset int) {
	if len(x.Urls) == 0 {
		return offset
	}
	for i := range x.GetUrls() {
		offset += fastpb.WriteString(buf[offset:], 6, x.GetUrls()[i])
	}
	return offset
}

func (x *Product) fastWriteField7(buf []byte) (offset int) {
	if len(x.Tags) == 0 {
		return offset
	}
	for i := range x.GetTags() {
		offset += fastpb.WriteString(buf[offset:], 7, x.GetTags()[i])
	}
	return offset
}

func (x *Product) fastWriteField8(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetType())
	return offset
}

func (x *Product) fastWriteField9(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetPrice())
	return offset
}

func (x *Product) fastWriteField10(buf []byte) (offset int) {
	if x.ProductSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetProductSize())
	return offset
}

func (x *Product) fastWriteField11(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetCreateTime())
	return offset
}

func (x *Product) fastWriteField12(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 12, x.GetUpdateTime())
	return offset
}

func (x *ProductFilterOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *ProductFilterOptions) fastWriteField1(buf []byte) (offset int) {
	if x.OnlyUserId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOnlyUserId())
	return offset
}

func (x *ProductFilterOptions) fastWriteField2(buf []byte) (offset int) {
	if x.OnlyProductId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOnlyProductId())
	return offset
}

func (x *ProductFilterOptions) fastWriteField3(buf []byte) (offset int) {
	if len(x.OnlyProductIds) == 0 {
		return offset
	}
	for i := range x.GetOnlyProductIds() {
		offset += fastpb.WriteString(buf[offset:], 3, x.GetOnlyProductIds()[i])
	}
	return offset
}

func (x *ProductFilterOptions) fastWriteField6(buf []byte) (offset int) {
	if len(x.OnlyTags) == 0 {
		return offset
	}
	for i := range x.GetOnlyTags() {
		offset += fastpb.WriteString(buf[offset:], 6, x.GetOnlyTags()[i])
	}
	return offset
}

func (x *ProductFilterOptions) fastWriteField7(buf []byte) (offset int) {
	if x.OnlySetRelation == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetOnlySetRelation())
	return offset
}

func (x *ProductFilterOptions) fastWriteField8(buf []byte) (offset int) {
	if x.OnlyStatus == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetOnlyStatus())
	return offset
}

func (x *ProductFilterOptions) fastWriteField9(buf []byte) (offset int) {
	if x.OnlyType == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetOnlyType())
	return offset
}

func (x *Order) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *Order) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *Order) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *Order) fastWriteField3(buf []byte) (offset int) {
	if x.ProductId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetProductId())
	return offset
}

func (x *Order) fastWriteField4(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetStatus())
	return offset
}

func (x *Order) fastWriteField5(buf []byte) (offset int) {
	if x.SumPrice == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetSumPrice())
	return offset
}

func (x *Order) fastWriteField6(buf []byte) (offset int) {
	if x.ProductName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetProductName())
	return offset
}

func (x *Order) fastWriteField7(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetCreateTime())
	return offset
}

func (x *Order) fastWriteField8(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetUpdateTime())
	return offset
}

func (x *OrderFilterOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *OrderFilterOptions) fastWriteField1(buf []byte) (offset int) {
	if x.OnlyUserId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOnlyUserId())
	return offset
}

func (x *OrderFilterOptions) fastWriteField2(buf []byte) (offset int) {
	if x.OnlyOrderId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOnlyOrderId())
	return offset
}

func (x *OrderFilterOptions) fastWriteField3(buf []byte) (offset int) {
	if len(x.OnlyOrderIds) == 0 {
		return offset
	}
	for i := range x.GetOnlyOrderIds() {
		offset += fastpb.WriteString(buf[offset:], 3, x.GetOnlyOrderIds()[i])
	}
	return offset
}

func (x *OrderFilterOptions) fastWriteField4(buf []byte) (offset int) {
	if x.OnlyProductId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetOnlyProductId())
	return offset
}

func (x *OrderFilterOptions) fastWriteField5(buf []byte) (offset int) {
	if x.OnlyStatus == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetOnlyStatus())
	return offset
}

func (x *Coupon) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	return offset
}

func (x *Coupon) fastWriteField1(buf []byte) (offset int) {
	if x.CouponId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCouponId())
	return offset
}

func (x *Coupon) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *Coupon) fastWriteField4(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetStatus())
	return offset
}

func (x *Coupon) fastWriteField5(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetCreateTime())
	return offset
}

func (x *Coupon) fastWriteField6(buf []byte) (offset int) {
	if x.ExpireTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetExpireTime())
	return offset
}

func (x *Coupon) fastWriteField7(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetName())
	return offset
}

func (x *Coupon) fastWriteField8(buf []byte) (offset int) {
	if x.Desciption == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetDesciption())
	return offset
}

func (x *Coupon) fastWriteField9(buf []byte) (offset int) {
	if x.LowSumPrice == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetLowSumPrice())
	return offset
}

func (x *Coupon) fastWriteField10(buf []byte) (offset int) {
	if x.ProductType == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetProductType())
	return offset
}

func (x *Coupon) fastWriteField11(buf []byte) (offset int) {
	if x.Discount == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetDiscount())
	return offset
}

func (x *Coupon) fastWriteField12(buf []byte) (offset int) {
	if x.DiscountPrice == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 12, x.GetDiscountPrice())
	return offset
}

func (x *CouponFilterOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *CouponFilterOptions) fastWriteField1(buf []byte) (offset int) {
	if x.OnlyUserId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOnlyUserId())
	return offset
}

func (x *CouponFilterOptions) fastWriteField2(buf []byte) (offset int) {
	if x.OnlyCouponId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOnlyCouponId())
	return offset
}

func (x *CouponFilterOptions) fastWriteField3(buf []byte) (offset int) {
	if len(x.OnlyCouponIds) == 0 {
		return offset
	}
	for i := range x.GetOnlyCouponIds() {
		offset += fastpb.WriteString(buf[offset:], 3, x.GetOnlyCouponIds()[i])
	}
	return offset
}

func (x *CouponFilterOptions) fastWriteField4(buf []byte) (offset int) {
	if x.OnlyProductType == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetOnlyProductType())
	return offset
}

func (x *CouponFilterOptions) fastWriteField5(buf []byte) (offset int) {
	if x.OnlyStatus == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetOnlyStatus())
	return offset
}

func (x *LabelFilterOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *File) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	return n
}

func (x *File) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *File) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *File) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *File) sizeField4() (n int) {
	if x.TypeString == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetTypeString())
	return n
}

func (x *File) sizeField5() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetType()))
	return n
}

func (x *File) sizeField6() (n int) {
	if x.Path == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetPath())
	return n
}

func (x *File) sizeField7() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetFatherId())
	return n
}

func (x *File) sizeField8() (n int) {
	if x.SpaceSize == nil {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetSpaceSize())
	return n
}

func (x *File) sizeField9() (n int) {
	if x.Md5 == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetMd5())
	return n
}

func (x *File) sizeField10() (n int) {
	if x.IsDel == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetIsDel())
	return n
}

func (x *File) sizeField11() (n int) {
	if x.Zone == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetZone())
	return n
}

func (x *File) sizeField12() (n int) {
	if x.SubZone == "" {
		return n
	}
	n += fastpb.SizeString(12, x.GetSubZone())
	return n
}

func (x *File) sizeField13() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(13, x.GetDescription())
	return n
}

func (x *File) sizeField14() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(14, x.GetUrl())
	return n
}

func (x *FileInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	n += x.sizeField16()
	return n
}

func (x *FileInfo) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *FileInfo) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *FileInfo) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *FileInfo) sizeField4() (n int) {
	if x.TypeString == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetTypeString())
	return n
}

func (x *FileInfo) sizeField5() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetType()))
	return n
}

func (x *FileInfo) sizeField6() (n int) {
	if x.Path == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetPath())
	return n
}

func (x *FileInfo) sizeField7() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetFatherId())
	return n
}

func (x *FileInfo) sizeField8() (n int) {
	if x.SpaceSize == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetSpaceSize())
	return n
}

func (x *FileInfo) sizeField9() (n int) {
	if x.Md5 == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetMd5())
	return n
}

func (x *FileInfo) sizeField10() (n int) {
	if x.IsDel == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetIsDel())
	return n
}

func (x *FileInfo) sizeField11() (n int) {
	if x.Zone == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetZone())
	return n
}

func (x *FileInfo) sizeField12() (n int) {
	if x.SubZone == "" {
		return n
	}
	n += fastpb.SizeString(12, x.GetSubZone())
	return n
}

func (x *FileInfo) sizeField13() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(13, x.GetDescription())
	return n
}

func (x *FileInfo) sizeField14() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(14, x.GetUrl())
	return n
}

func (x *FileInfo) sizeField15() (n int) {
	if x.CreateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(15, x.GetCreateAt())
	return n
}

func (x *FileInfo) sizeField16() (n int) {
	if x.UpdateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(16, x.GetUpdateAt())
	return n
}

func (x *Zone) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Zone) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Zone) sizeField2() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetFatherId())
	return n
}

func (x *Zone) sizeField3() (n int) {
	if x.Value == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetValue())
	return n
}

func (x *ShareFile) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *ShareFile) sizeField1() (n int) {
	if x.Code == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCode())
	return n
}

func (x *ShareFile) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *ShareFile) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *ShareFile) sizeField4() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetStatus())
	return n
}

func (x *ShareFile) sizeField5() (n int) {
	if x.EffectiveTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetEffectiveTime())
	return n
}

func (x *ShareFile) sizeField6() (n int) {
	if x.BrowseNumber == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetBrowseNumber())
	return n
}

func (x *ShareFile) sizeField7() (n int) {
	if x.CreateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetCreateAt())
	return n
}

func (x *ShareFile) sizeField8() (n int) {
	if len(x.FileList) == 0 {
		return n
	}
	for i := range x.GetFileList() {
		n += fastpb.SizeString(8, x.GetFileList()[i])
	}
	return n
}

func (x *ShareCode) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *ShareCode) sizeField1() (n int) {
	if x.Code == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCode())
	return n
}

func (x *ShareCode) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *ShareCode) sizeField3() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetStatus())
	return n
}

func (x *ShareCode) sizeField4() (n int) {
	if x.BrowseNumber == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetBrowseNumber())
	return n
}

func (x *ShareCode) sizeField5() (n int) {
	if x.CreateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetCreateAt())
	return n
}

func (x *ShareCode) sizeField6() (n int) {
	if x.Key == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetKey())
	return n
}

func (x *SearchField) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *SearchField) sizeField1() (n int) {
	if x.Name == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *SearchField) sizeField2() (n int) {
	if x.Id == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetId())
	return n
}

func (x *SearchField) sizeField3() (n int) {
	if x.Tag == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetTag())
	return n
}

func (x *SearchField) sizeField4() (n int) {
	if x.Text == nil {
		return n
	}
	n += fastpb.SizeString(4, x.GetText())
	return n
}

func (x *SearchField) sizeField5() (n int) {
	if x.Title == nil {
		return n
	}
	n += fastpb.SizeString(5, x.GetTitle())
	return n
}

func (x *SearchField) sizeField6() (n int) {
	if x.Description == nil {
		return n
	}
	n += fastpb.SizeString(6, x.GetDescription())
	return n
}

func (x *SearchField) sizeField7() (n int) {
	if x.ProductName == nil {
		return n
	}
	n += fastpb.SizeString(7, x.GetProductName())
	return n
}

func (x *SearchOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SearchOptions) sizeField1() (n int) {
	if x.GetAllFieldsKey() == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAllFieldsKey())
	return n
}

func (x *SearchOptions) sizeField2() (n int) {
	if x.GetMultiFieldsKey() == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetMultiFieldsKey())
	return n
}

func (x *FileFilterOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *FileFilterOptions) sizeField1() (n int) {
	if x.OnlyUserId == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetOnlyUserId())
	return n
}

func (x *FileFilterOptions) sizeField2() (n int) {
	if x.OnlyFileId == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetOnlyFileId())
	return n
}

func (x *FileFilterOptions) sizeField3() (n int) {
	if x.OnlyFatherId == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetOnlyFatherId())
	return n
}

func (x *FileFilterOptions) sizeField4() (n int) {
	if x.OnlyFileType == nil {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetOnlyFileType())
	return n
}

func (x *FileFilterOptions) sizeField5() (n int) {
	if x.OnlyZone == nil {
		return n
	}
	n += fastpb.SizeString(5, x.GetOnlyZone())
	return n
}

func (x *FileFilterOptions) sizeField6() (n int) {
	if x.OnlySubZone == nil {
		return n
	}
	n += fastpb.SizeString(6, x.GetOnlySubZone())
	return n
}

func (x *FileFilterOptions) sizeField7() (n int) {
	if x.OnlyIsDel == nil {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetOnlyIsDel())
	return n
}

func (x *FileFilterOptions) sizeField8() (n int) {
	if x.OnlyDocumentType == nil {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetOnlyDocumentType())
	return n
}

func (x *FileFilterOptions) sizeField9() (n int) {
	if len(x.OnlyTypeString) == 0 {
		return n
	}
	for i := range x.GetOnlyTypeString() {
		n += fastpb.SizeString(9, x.GetOnlyTypeString()[i])
	}
	return n
}

func (x *ShareFileFilterOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ShareFileFilterOptions) sizeField1() (n int) {
	if x.OnlyCode == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetOnlyCode())
	return n
}

func (x *ShareFileFilterOptions) sizeField2() (n int) {
	if x.OnlyUserId == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetOnlyUserId())
	return n
}

func (x *User) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *User) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *User) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *User) sizeField3() (n int) {
	if x.Sex == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetSex())
	return n
}

func (x *User) sizeField4() (n int) {
	if x.FullName == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetFullName())
	return n
}

func (x *User) sizeField5() (n int) {
	if x.IdCard == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetIdCard())
	return n
}

func (x *User) sizeField6() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetCreateTime())
	return n
}

func (x *User) sizeField7() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetUpdateTime())
	return n
}

func (x *User) sizeField8() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetDescription())
	return n
}

func (x *User) sizeField9() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetUrl())
	return n
}

func (x *Post) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *Post) sizeField1() (n int) {
	if x.PostId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPostId())
	return n
}

func (x *Post) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *Post) sizeField3() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetTitle())
	return n
}

func (x *Post) sizeField4() (n int) {
	if x.Text == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetText())
	return n
}

func (x *Post) sizeField5() (n int) {
	if len(x.Tags) == 0 {
		return n
	}
	for i := range x.GetTags() {
		n += fastpb.SizeString(5, x.GetTags()[i])
	}
	return n
}

func (x *Post) sizeField6() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetStatus())
	return n
}

func (x *Post) sizeField7() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetUrl())
	return n
}

func (x *Post) sizeField8() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetCreateTime())
	return n
}

func (x *Post) sizeField9() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetUpdateTime())
	return n
}

func (x *PostFilterOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *PostFilterOptions) sizeField1() (n int) {
	if x.OnlyUserId == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetOnlyUserId())
	return n
}

func (x *PostFilterOptions) sizeField2() (n int) {
	if x.OnlyPostId == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetOnlyPostId())
	return n
}

func (x *PostFilterOptions) sizeField3() (n int) {
	if len(x.OnlyPostIds) == 0 {
		return n
	}
	for i := range x.GetOnlyPostIds() {
		n += fastpb.SizeString(3, x.GetOnlyPostIds()[i])
	}
	return n
}

func (x *PostFilterOptions) sizeField4() (n int) {
	if x.OnlyTitle == nil {
		return n
	}
	n += fastpb.SizeString(4, x.GetOnlyTitle())
	return n
}

func (x *PostFilterOptions) sizeField5() (n int) {
	if x.OnlyText == nil {
		return n
	}
	n += fastpb.SizeString(5, x.GetOnlyText())
	return n
}

func (x *PostFilterOptions) sizeField6() (n int) {
	if len(x.OnlyTags) == 0 {
		return n
	}
	for i := range x.GetOnlyTags() {
		n += fastpb.SizeString(6, x.GetOnlyTags()[i])
	}
	return n
}

func (x *PostFilterOptions) sizeField7() (n int) {
	if x.OnlySetRelation == nil {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetOnlySetRelation())
	return n
}

func (x *PostFilterOptions) sizeField8() (n int) {
	if x.OnlyStatus == nil {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetOnlyStatus())
	return n
}

func (x *Product) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	return n
}

func (x *Product) sizeField1() (n int) {
	if x.ProductId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetProductId())
	return n
}

func (x *Product) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *Product) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *Product) sizeField4() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetDescription())
	return n
}

func (x *Product) sizeField5() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetStatus())
	return n
}

func (x *Product) sizeField6() (n int) {
	if len(x.Urls) == 0 {
		return n
	}
	for i := range x.GetUrls() {
		n += fastpb.SizeString(6, x.GetUrls()[i])
	}
	return n
}

func (x *Product) sizeField7() (n int) {
	if len(x.Tags) == 0 {
		return n
	}
	for i := range x.GetTags() {
		n += fastpb.SizeString(7, x.GetTags()[i])
	}
	return n
}

func (x *Product) sizeField8() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetType())
	return n
}

func (x *Product) sizeField9() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetPrice())
	return n
}

func (x *Product) sizeField10() (n int) {
	if x.ProductSize == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetProductSize())
	return n
}

func (x *Product) sizeField11() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetCreateTime())
	return n
}

func (x *Product) sizeField12() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(12, x.GetUpdateTime())
	return n
}

func (x *ProductFilterOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *ProductFilterOptions) sizeField1() (n int) {
	if x.OnlyUserId == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetOnlyUserId())
	return n
}

func (x *ProductFilterOptions) sizeField2() (n int) {
	if x.OnlyProductId == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetOnlyProductId())
	return n
}

func (x *ProductFilterOptions) sizeField3() (n int) {
	if len(x.OnlyProductIds) == 0 {
		return n
	}
	for i := range x.GetOnlyProductIds() {
		n += fastpb.SizeString(3, x.GetOnlyProductIds()[i])
	}
	return n
}

func (x *ProductFilterOptions) sizeField6() (n int) {
	if len(x.OnlyTags) == 0 {
		return n
	}
	for i := range x.GetOnlyTags() {
		n += fastpb.SizeString(6, x.GetOnlyTags()[i])
	}
	return n
}

func (x *ProductFilterOptions) sizeField7() (n int) {
	if x.OnlySetRelation == nil {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetOnlySetRelation())
	return n
}

func (x *ProductFilterOptions) sizeField8() (n int) {
	if x.OnlyStatus == nil {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetOnlyStatus())
	return n
}

func (x *ProductFilterOptions) sizeField9() (n int) {
	if x.OnlyType == nil {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetOnlyType())
	return n
}

func (x *Order) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *Order) sizeField1() (n int) {
	if x.OrderId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetOrderId())
	return n
}

func (x *Order) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *Order) sizeField3() (n int) {
	if x.ProductId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetProductId())
	return n
}

func (x *Order) sizeField4() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetStatus())
	return n
}

func (x *Order) sizeField5() (n int) {
	if x.SumPrice == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetSumPrice())
	return n
}

func (x *Order) sizeField6() (n int) {
	if x.ProductName == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetProductName())
	return n
}

func (x *Order) sizeField7() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetCreateTime())
	return n
}

func (x *Order) sizeField8() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetUpdateTime())
	return n
}

func (x *OrderFilterOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *OrderFilterOptions) sizeField1() (n int) {
	if x.OnlyUserId == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetOnlyUserId())
	return n
}

func (x *OrderFilterOptions) sizeField2() (n int) {
	if x.OnlyOrderId == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetOnlyOrderId())
	return n
}

func (x *OrderFilterOptions) sizeField3() (n int) {
	if len(x.OnlyOrderIds) == 0 {
		return n
	}
	for i := range x.GetOnlyOrderIds() {
		n += fastpb.SizeString(3, x.GetOnlyOrderIds()[i])
	}
	return n
}

func (x *OrderFilterOptions) sizeField4() (n int) {
	if x.OnlyProductId == nil {
		return n
	}
	n += fastpb.SizeString(4, x.GetOnlyProductId())
	return n
}

func (x *OrderFilterOptions) sizeField5() (n int) {
	if x.OnlyStatus == nil {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetOnlyStatus())
	return n
}

func (x *Coupon) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	return n
}

func (x *Coupon) sizeField1() (n int) {
	if x.CouponId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCouponId())
	return n
}

func (x *Coupon) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *Coupon) sizeField4() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetStatus())
	return n
}

func (x *Coupon) sizeField5() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetCreateTime())
	return n
}

func (x *Coupon) sizeField6() (n int) {
	if x.ExpireTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetExpireTime())
	return n
}

func (x *Coupon) sizeField7() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetName())
	return n
}

func (x *Coupon) sizeField8() (n int) {
	if x.Desciption == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetDesciption())
	return n
}

func (x *Coupon) sizeField9() (n int) {
	if x.LowSumPrice == nil {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetLowSumPrice())
	return n
}

func (x *Coupon) sizeField10() (n int) {
	if x.ProductType == nil {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetProductType())
	return n
}

func (x *Coupon) sizeField11() (n int) {
	if x.Discount == nil {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetDiscount())
	return n
}

func (x *Coupon) sizeField12() (n int) {
	if x.DiscountPrice == nil {
		return n
	}
	n += fastpb.SizeInt64(12, x.GetDiscountPrice())
	return n
}

func (x *CouponFilterOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *CouponFilterOptions) sizeField1() (n int) {
	if x.OnlyUserId == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetOnlyUserId())
	return n
}

func (x *CouponFilterOptions) sizeField2() (n int) {
	if x.OnlyCouponId == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetOnlyCouponId())
	return n
}

func (x *CouponFilterOptions) sizeField3() (n int) {
	if len(x.OnlyCouponIds) == 0 {
		return n
	}
	for i := range x.GetOnlyCouponIds() {
		n += fastpb.SizeString(3, x.GetOnlyCouponIds()[i])
	}
	return n
}

func (x *CouponFilterOptions) sizeField4() (n int) {
	if x.OnlyProductType == nil {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetOnlyProductType())
	return n
}

func (x *CouponFilterOptions) sizeField5() (n int) {
	if x.OnlyStatus == nil {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetOnlyStatus())
	return n
}

func (x *LabelFilterOptions) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

var fieldIDToName_File = map[int32]string{
	1:  "FileId",
	2:  "UserId",
	3:  "Name",
	4:  "TypeString",
	5:  "Type",
	6:  "Path",
	7:  "FatherId",
	8:  "SpaceSize",
	9:  "Md5",
	10: "IsDel",
	11: "Zone",
	12: "SubZone",
	13: "Description",
	14: "Url",
}

var fieldIDToName_FileInfo = map[int32]string{
	1:  "FileId",
	2:  "UserId",
	3:  "Name",
	4:  "TypeString",
	5:  "Type",
	6:  "Path",
	7:  "FatherId",
	8:  "SpaceSize",
	9:  "Md5",
	10: "IsDel",
	11: "Zone",
	12: "SubZone",
	13: "Description",
	14: "Url",
	15: "CreateAt",
	16: "UpdateAt",
}

var fieldIDToName_Zone = map[int32]string{
	1: "Id",
	2: "FatherId",
	3: "Value",
}

var fieldIDToName_ShareFile = map[int32]string{
	1: "Code",
	2: "UserId",
	3: "Name",
	4: "Status",
	5: "EffectiveTime",
	6: "BrowseNumber",
	7: "CreateAt",
	8: "FileList",
}

var fieldIDToName_ShareCode = map[int32]string{
	1: "Code",
	2: "Name",
	3: "Status",
	4: "BrowseNumber",
	5: "CreateAt",
	6: "Key",
}

var fieldIDToName_SearchField = map[int32]string{
	1: "Name",
	2: "Id",
	3: "Tag",
	4: "Text",
	5: "Title",
	6: "Description",
	7: "ProductName",
}

var fieldIDToName_SearchOptions = map[int32]string{
	1: "AllFieldsKey",
	2: "MultiFieldsKey",
}

var fieldIDToName_FileFilterOptions = map[int32]string{
	1: "OnlyUserId",
	2: "OnlyFileId",
	3: "OnlyFatherId",
	4: "OnlyFileType",
	5: "OnlyZone",
	6: "OnlySubZone",
	7: "OnlyIsDel",
	8: "OnlyDocumentType",
	9: "OnlyTypeString",
}

var fieldIDToName_ShareFileFilterOptions = map[int32]string{
	1: "OnlyCode",
	2: "OnlyUserId",
}

var fieldIDToName_User = map[int32]string{
	1: "UserId",
	2: "Name",
	3: "Sex",
	4: "FullName",
	5: "IdCard",
	6: "CreateTime",
	7: "UpdateTime",
	8: "Description",
	9: "Url",
}

var fieldIDToName_Post = map[int32]string{
	1: "PostId",
	2: "UserId",
	3: "Title",
	4: "Text",
	5: "Tags",
	6: "Status",
	7: "Url",
	8: "CreateTime",
	9: "UpdateTime",
}

var fieldIDToName_PostFilterOptions = map[int32]string{
	1: "OnlyUserId",
	2: "OnlyPostId",
	3: "OnlyPostIds",
	4: "OnlyTitle",
	5: "OnlyText",
	6: "OnlyTags",
	7: "OnlySetRelation",
	8: "OnlyStatus",
}

var fieldIDToName_Product = map[int32]string{
	1:  "ProductId",
	2:  "UserId",
	3:  "Name",
	4:  "Description",
	5:  "Status",
	6:  "Urls",
	7:  "Tags",
	8:  "Type",
	9:  "Price",
	10: "ProductSize",
	11: "CreateTime",
	12: "UpdateTime",
}

var fieldIDToName_ProductFilterOptions = map[int32]string{
	1: "OnlyUserId",
	2: "OnlyProductId",
	3: "OnlyProductIds",
	6: "OnlyTags",
	7: "OnlySetRelation",
	8: "OnlyStatus",
	9: "OnlyType",
}

var fieldIDToName_Order = map[int32]string{
	1: "OrderId",
	2: "UserId",
	3: "ProductId",
	4: "Status",
	5: "SumPrice",
	6: "ProductName",
	7: "CreateTime",
	8: "UpdateTime",
}

var fieldIDToName_OrderFilterOptions = map[int32]string{
	1: "OnlyUserId",
	2: "OnlyOrderId",
	3: "OnlyOrderIds",
	4: "OnlyProductId",
	5: "OnlyStatus",
}

var fieldIDToName_Coupon = map[int32]string{
	1:  "CouponId",
	2:  "UserId",
	4:  "Status",
	5:  "CreateTime",
	6:  "ExpireTime",
	7:  "Name",
	8:  "Desciption",
	9:  "LowSumPrice",
	10: "ProductType",
	11: "Discount",
	12: "DiscountPrice",
}

var fieldIDToName_CouponFilterOptions = map[int32]string{
	1: "OnlyUserId",
	2: "OnlyCouponId",
	3: "OnlyCouponIds",
	4: "OnlyProductType",
	5: "OnlyStatus",
}

var fieldIDToName_LabelFilterOptions = map[int32]string{}
