// Code generated by Kitex v0.8.0. DO NOT EDIT.

package contentservice

import (
	"context"
	content "github.com/CloudStriver/service-idl-gen-go/kitex_gen/cloudmind/content"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return contentServiceServiceInfo
}

var contentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ContentService"
	handlerType := (*content.ContentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetFileIsExist":         kitex.NewMethodInfo(getFileIsExistHandler, newGetFileIsExistArgs, newGetFileIsExistResult, false),
		"GetFile":                kitex.NewMethodInfo(getFileHandler, newGetFileArgs, newGetFileResult, false),
		"GetFileList":            kitex.NewMethodInfo(getFileListHandler, newGetFileListArgs, newGetFileListResult, false),
		"GetFileCount":           kitex.NewMethodInfo(getFileCountHandler, newGetFileCountArgs, newGetFileCountResult, false),
		"GetFileBySharingCode":   kitex.NewMethodInfo(getFileBySharingCodeHandler, newGetFileBySharingCodeArgs, newGetFileBySharingCodeResult, false),
		"GetFolderSize":          kitex.NewMethodInfo(getFolderSizeHandler, newGetFolderSizeArgs, newGetFolderSizeResult, false),
		"UpdateFile":             kitex.NewMethodInfo(updateFileHandler, newUpdateFileArgs, newUpdateFileResult, false),
		"CreateFile":             kitex.NewMethodInfo(createFileHandler, newCreateFileArgs, newCreateFileResult, false),
		"MoveFile":               kitex.NewMethodInfo(moveFileHandler, newMoveFileArgs, newMoveFileResult, false),
		"SaveFileToPrivateSpace": kitex.NewMethodInfo(saveFileToPrivateSpaceHandler, newSaveFileToPrivateSpaceArgs, newSaveFileToPrivateSpaceResult, false),
		"AddFileToPublicSpace":   kitex.NewMethodInfo(addFileToPublicSpaceHandler, newAddFileToPublicSpaceArgs, newAddFileToPublicSpaceResult, false),
		"DeleteFile":             kitex.NewMethodInfo(deleteFileHandler, newDeleteFileArgs, newDeleteFileResult, false),
		"RecoverRecycleBinFile":  kitex.NewMethodInfo(recoverRecycleBinFileHandler, newRecoverRecycleBinFileArgs, newRecoverRecycleBinFileResult, false),
		"GetZone":                kitex.NewMethodInfo(getZoneHandler, newGetZoneArgs, newGetZoneResult, false),
		"GetZones":               kitex.NewMethodInfo(getZonesHandler, newGetZonesArgs, newGetZonesResult, false),
		"CreateZone":             kitex.NewMethodInfo(createZoneHandler, newCreateZoneArgs, newCreateZoneResult, false),
		"UpdateZone":             kitex.NewMethodInfo(updateZoneHandler, newUpdateZoneArgs, newUpdateZoneResult, false),
		"DeleteZone":             kitex.NewMethodInfo(deleteZoneHandler, newDeleteZoneArgs, newDeleteZoneResult, false),
		"GetShareList":           kitex.NewMethodInfo(getShareListHandler, newGetShareListArgs, newGetShareListResult, false),
		"CreateShareCode":        kitex.NewMethodInfo(createShareCodeHandler, newCreateShareCodeArgs, newCreateShareCodeResult, false),
		"UpdateShareCode":        kitex.NewMethodInfo(updateShareCodeHandler, newUpdateShareCodeArgs, newUpdateShareCodeResult, false),
		"DeleteShareCode":        kitex.NewMethodInfo(deleteShareCodeHandler, newDeleteShareCodeArgs, newDeleteShareCodeResult, false),
		"ParsingShareCode":       kitex.NewMethodInfo(parsingShareCodeHandler, newParsingShareCodeArgs, newParsingShareCodeResult, false),
		"UpdateUser":             kitex.NewMethodInfo(updateUserHandler, newUpdateUserArgs, newUpdateUserResult, false),
		"GetUser":                kitex.NewMethodInfo(getUserHandler, newGetUserArgs, newGetUserResult, false),
		"SearchUser":             kitex.NewMethodInfo(searchUserHandler, newSearchUserArgs, newSearchUserResult, false),
		"CreateUser":             kitex.NewMethodInfo(createUserHandler, newCreateUserArgs, newCreateUserResult, false),
		"DeleteUser":             kitex.NewMethodInfo(deleteUserHandler, newDeleteUserArgs, newDeleteUserResult, false),
		"CreatePost":             kitex.NewMethodInfo(createPostHandler, newCreatePostArgs, newCreatePostResult, false),
		"DeletePost":             kitex.NewMethodInfo(deletePostHandler, newDeletePostArgs, newDeletePostResult, false),
		"UpdatePost":             kitex.NewMethodInfo(updatePostHandler, newUpdatePostArgs, newUpdatePostResult, false),
		"GetPost":                kitex.NewMethodInfo(getPostHandler, newGetPostArgs, newGetPostResult, false),
		"GetPosts":               kitex.NewMethodInfo(getPostsHandler, newGetPostsArgs, newGetPostsResult, false),
		"CreateProduct":          kitex.NewMethodInfo(createProductHandler, newCreateProductArgs, newCreateProductResult, false),
		"DeleteProduct":          kitex.NewMethodInfo(deleteProductHandler, newDeleteProductArgs, newDeleteProductResult, false),
		"UpdateProduct":          kitex.NewMethodInfo(updateProductHandler, newUpdateProductArgs, newUpdateProductResult, false),
		"GetProduct":             kitex.NewMethodInfo(getProductHandler, newGetProductArgs, newGetProductResult, false),
		"GetProducts":            kitex.NewMethodInfo(getProductsHandler, newGetProductsArgs, newGetProductsResult, false),
		"CreateCoupon":           kitex.NewMethodInfo(createCouponHandler, newCreateCouponArgs, newCreateCouponResult, false),
		"DeleteCoupon":           kitex.NewMethodInfo(deleteCouponHandler, newDeleteCouponArgs, newDeleteCouponResult, false),
		"UpdateCoupon":           kitex.NewMethodInfo(updateCouponHandler, newUpdateCouponArgs, newUpdateCouponResult, false),
		"GetCoupon":              kitex.NewMethodInfo(getCouponHandler, newGetCouponArgs, newGetCouponResult, false),
		"GetCoupons":             kitex.NewMethodInfo(getCouponsHandler, newGetCouponsArgs, newGetCouponsResult, false),
		"CreateOrder":            kitex.NewMethodInfo(createOrderHandler, newCreateOrderArgs, newCreateOrderResult, false),
		"DeleteOrder":            kitex.NewMethodInfo(deleteOrderHandler, newDeleteOrderArgs, newDeleteOrderResult, false),
		"UpdateOrder":            kitex.NewMethodInfo(updateOrderHandler, newUpdateOrderArgs, newUpdateOrderResult, false),
		"GetOrder":               kitex.NewMethodInfo(getOrderHandler, newGetOrderArgs, newGetOrderResult, false),
		"GetOrders":              kitex.NewMethodInfo(getOrdersHandler, newGetOrdersArgs, newGetOrdersResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "cloudmind.content",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func getFileIsExistHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetFileIsExistReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).GetFileIsExist(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFileIsExistArgs:
		success, err := handler.(content.ContentService).GetFileIsExist(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFileIsExistResult)
		realResult.Success = success
	}
	return nil
}
func newGetFileIsExistArgs() interface{} {
	return &GetFileIsExistArgs{}
}

func newGetFileIsExistResult() interface{} {
	return &GetFileIsExistResult{}
}

type GetFileIsExistArgs struct {
	Req *content.GetFileIsExistReq
}

func (p *GetFileIsExistArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetFileIsExistReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFileIsExistArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFileIsExistArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFileIsExistArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFileIsExistArgs) Unmarshal(in []byte) error {
	msg := new(content.GetFileIsExistReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFileIsExistArgs_Req_DEFAULT *content.GetFileIsExistReq

func (p *GetFileIsExistArgs) GetReq() *content.GetFileIsExistReq {
	if !p.IsSetReq() {
		return GetFileIsExistArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFileIsExistArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFileIsExistArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFileIsExistResult struct {
	Success *content.GetFileIsExistResp
}

var GetFileIsExistResult_Success_DEFAULT *content.GetFileIsExistResp

func (p *GetFileIsExistResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetFileIsExistResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFileIsExistResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFileIsExistResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFileIsExistResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFileIsExistResult) Unmarshal(in []byte) error {
	msg := new(content.GetFileIsExistResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFileIsExistResult) GetSuccess() *content.GetFileIsExistResp {
	if !p.IsSetSuccess() {
		return GetFileIsExistResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFileIsExistResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetFileIsExistResp)
}

func (p *GetFileIsExistResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFileIsExistResult) GetResult() interface{} {
	return p.Success
}

func getFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetFileReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).GetFile(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFileArgs:
		success, err := handler.(content.ContentService).GetFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFileResult)
		realResult.Success = success
	}
	return nil
}
func newGetFileArgs() interface{} {
	return &GetFileArgs{}
}

func newGetFileResult() interface{} {
	return &GetFileResult{}
}

type GetFileArgs struct {
	Req *content.GetFileReq
}

func (p *GetFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetFileReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFileArgs) Unmarshal(in []byte) error {
	msg := new(content.GetFileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFileArgs_Req_DEFAULT *content.GetFileReq

func (p *GetFileArgs) GetReq() *content.GetFileReq {
	if !p.IsSetReq() {
		return GetFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFileResult struct {
	Success *content.GetFileResp
}

var GetFileResult_Success_DEFAULT *content.GetFileResp

func (p *GetFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetFileResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFileResult) Unmarshal(in []byte) error {
	msg := new(content.GetFileResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFileResult) GetSuccess() *content.GetFileResp {
	if !p.IsSetSuccess() {
		return GetFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetFileResp)
}

func (p *GetFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFileResult) GetResult() interface{} {
	return p.Success
}

func getFileListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetFileListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).GetFileList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFileListArgs:
		success, err := handler.(content.ContentService).GetFileList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFileListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFileListArgs() interface{} {
	return &GetFileListArgs{}
}

func newGetFileListResult() interface{} {
	return &GetFileListResult{}
}

type GetFileListArgs struct {
	Req *content.GetFileListReq
}

func (p *GetFileListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetFileListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFileListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFileListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFileListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFileListArgs) Unmarshal(in []byte) error {
	msg := new(content.GetFileListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFileListArgs_Req_DEFAULT *content.GetFileListReq

func (p *GetFileListArgs) GetReq() *content.GetFileListReq {
	if !p.IsSetReq() {
		return GetFileListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFileListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFileListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFileListResult struct {
	Success *content.GetFileListResp
}

var GetFileListResult_Success_DEFAULT *content.GetFileListResp

func (p *GetFileListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetFileListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFileListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFileListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFileListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFileListResult) Unmarshal(in []byte) error {
	msg := new(content.GetFileListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFileListResult) GetSuccess() *content.GetFileListResp {
	if !p.IsSetSuccess() {
		return GetFileListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFileListResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetFileListResp)
}

func (p *GetFileListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFileListResult) GetResult() interface{} {
	return p.Success
}

func getFileCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetFileCountReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).GetFileCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFileCountArgs:
		success, err := handler.(content.ContentService).GetFileCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFileCountResult)
		realResult.Success = success
	}
	return nil
}
func newGetFileCountArgs() interface{} {
	return &GetFileCountArgs{}
}

func newGetFileCountResult() interface{} {
	return &GetFileCountResult{}
}

type GetFileCountArgs struct {
	Req *content.GetFileCountReq
}

func (p *GetFileCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetFileCountReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFileCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFileCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFileCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFileCountArgs) Unmarshal(in []byte) error {
	msg := new(content.GetFileCountReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFileCountArgs_Req_DEFAULT *content.GetFileCountReq

func (p *GetFileCountArgs) GetReq() *content.GetFileCountReq {
	if !p.IsSetReq() {
		return GetFileCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFileCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFileCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFileCountResult struct {
	Success *content.GetFileCountResp
}

var GetFileCountResult_Success_DEFAULT *content.GetFileCountResp

func (p *GetFileCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetFileCountResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFileCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFileCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFileCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFileCountResult) Unmarshal(in []byte) error {
	msg := new(content.GetFileCountResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFileCountResult) GetSuccess() *content.GetFileCountResp {
	if !p.IsSetSuccess() {
		return GetFileCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFileCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetFileCountResp)
}

func (p *GetFileCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFileCountResult) GetResult() interface{} {
	return p.Success
}

func getFileBySharingCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetFileBySharingCodeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).GetFileBySharingCode(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFileBySharingCodeArgs:
		success, err := handler.(content.ContentService).GetFileBySharingCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFileBySharingCodeResult)
		realResult.Success = success
	}
	return nil
}
func newGetFileBySharingCodeArgs() interface{} {
	return &GetFileBySharingCodeArgs{}
}

func newGetFileBySharingCodeResult() interface{} {
	return &GetFileBySharingCodeResult{}
}

type GetFileBySharingCodeArgs struct {
	Req *content.GetFileBySharingCodeReq
}

func (p *GetFileBySharingCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetFileBySharingCodeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFileBySharingCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFileBySharingCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFileBySharingCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFileBySharingCodeArgs) Unmarshal(in []byte) error {
	msg := new(content.GetFileBySharingCodeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFileBySharingCodeArgs_Req_DEFAULT *content.GetFileBySharingCodeReq

func (p *GetFileBySharingCodeArgs) GetReq() *content.GetFileBySharingCodeReq {
	if !p.IsSetReq() {
		return GetFileBySharingCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFileBySharingCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFileBySharingCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFileBySharingCodeResult struct {
	Success *content.GetFileBySharingCodeResp
}

var GetFileBySharingCodeResult_Success_DEFAULT *content.GetFileBySharingCodeResp

func (p *GetFileBySharingCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetFileBySharingCodeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFileBySharingCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFileBySharingCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFileBySharingCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFileBySharingCodeResult) Unmarshal(in []byte) error {
	msg := new(content.GetFileBySharingCodeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFileBySharingCodeResult) GetSuccess() *content.GetFileBySharingCodeResp {
	if !p.IsSetSuccess() {
		return GetFileBySharingCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFileBySharingCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetFileBySharingCodeResp)
}

func (p *GetFileBySharingCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFileBySharingCodeResult) GetResult() interface{} {
	return p.Success
}

func getFolderSizeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetFolderSizeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).GetFolderSize(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFolderSizeArgs:
		success, err := handler.(content.ContentService).GetFolderSize(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFolderSizeResult)
		realResult.Success = success
	}
	return nil
}
func newGetFolderSizeArgs() interface{} {
	return &GetFolderSizeArgs{}
}

func newGetFolderSizeResult() interface{} {
	return &GetFolderSizeResult{}
}

type GetFolderSizeArgs struct {
	Req *content.GetFolderSizeReq
}

func (p *GetFolderSizeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetFolderSizeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFolderSizeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFolderSizeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFolderSizeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFolderSizeArgs) Unmarshal(in []byte) error {
	msg := new(content.GetFolderSizeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFolderSizeArgs_Req_DEFAULT *content.GetFolderSizeReq

func (p *GetFolderSizeArgs) GetReq() *content.GetFolderSizeReq {
	if !p.IsSetReq() {
		return GetFolderSizeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFolderSizeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFolderSizeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFolderSizeResult struct {
	Success *content.GetFolderSizeResp
}

var GetFolderSizeResult_Success_DEFAULT *content.GetFolderSizeResp

func (p *GetFolderSizeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetFolderSizeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFolderSizeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFolderSizeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFolderSizeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFolderSizeResult) Unmarshal(in []byte) error {
	msg := new(content.GetFolderSizeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFolderSizeResult) GetSuccess() *content.GetFolderSizeResp {
	if !p.IsSetSuccess() {
		return GetFolderSizeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFolderSizeResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetFolderSizeResp)
}

func (p *GetFolderSizeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFolderSizeResult) GetResult() interface{} {
	return p.Success
}

func updateFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.UpdateFileReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).UpdateFile(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateFileArgs:
		success, err := handler.(content.ContentService).UpdateFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateFileResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateFileArgs() interface{} {
	return &UpdateFileArgs{}
}

func newUpdateFileResult() interface{} {
	return &UpdateFileResult{}
}

type UpdateFileArgs struct {
	Req *content.UpdateFileReq
}

func (p *UpdateFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.UpdateFileReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateFileArgs) Unmarshal(in []byte) error {
	msg := new(content.UpdateFileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateFileArgs_Req_DEFAULT *content.UpdateFileReq

func (p *UpdateFileArgs) GetReq() *content.UpdateFileReq {
	if !p.IsSetReq() {
		return UpdateFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateFileResult struct {
	Success *content.UpdateFileResp
}

var UpdateFileResult_Success_DEFAULT *content.UpdateFileResp

func (p *UpdateFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.UpdateFileResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateFileResult) Unmarshal(in []byte) error {
	msg := new(content.UpdateFileResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateFileResult) GetSuccess() *content.UpdateFileResp {
	if !p.IsSetSuccess() {
		return UpdateFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.UpdateFileResp)
}

func (p *UpdateFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateFileResult) GetResult() interface{} {
	return p.Success
}

func createFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.CreateFileReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).CreateFile(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateFileArgs:
		success, err := handler.(content.ContentService).CreateFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateFileResult)
		realResult.Success = success
	}
	return nil
}
func newCreateFileArgs() interface{} {
	return &CreateFileArgs{}
}

func newCreateFileResult() interface{} {
	return &CreateFileResult{}
}

type CreateFileArgs struct {
	Req *content.CreateFileReq
}

func (p *CreateFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.CreateFileReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateFileArgs) Unmarshal(in []byte) error {
	msg := new(content.CreateFileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateFileArgs_Req_DEFAULT *content.CreateFileReq

func (p *CreateFileArgs) GetReq() *content.CreateFileReq {
	if !p.IsSetReq() {
		return CreateFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateFileResult struct {
	Success *content.CreateFileResp
}

var CreateFileResult_Success_DEFAULT *content.CreateFileResp

func (p *CreateFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.CreateFileResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateFileResult) Unmarshal(in []byte) error {
	msg := new(content.CreateFileResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateFileResult) GetSuccess() *content.CreateFileResp {
	if !p.IsSetSuccess() {
		return CreateFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.CreateFileResp)
}

func (p *CreateFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateFileResult) GetResult() interface{} {
	return p.Success
}

func moveFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.MoveFileReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).MoveFile(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *MoveFileArgs:
		success, err := handler.(content.ContentService).MoveFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MoveFileResult)
		realResult.Success = success
	}
	return nil
}
func newMoveFileArgs() interface{} {
	return &MoveFileArgs{}
}

func newMoveFileResult() interface{} {
	return &MoveFileResult{}
}

type MoveFileArgs struct {
	Req *content.MoveFileReq
}

func (p *MoveFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.MoveFileReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MoveFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MoveFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MoveFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MoveFileArgs) Unmarshal(in []byte) error {
	msg := new(content.MoveFileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MoveFileArgs_Req_DEFAULT *content.MoveFileReq

func (p *MoveFileArgs) GetReq() *content.MoveFileReq {
	if !p.IsSetReq() {
		return MoveFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MoveFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MoveFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MoveFileResult struct {
	Success *content.MoveFileResp
}

var MoveFileResult_Success_DEFAULT *content.MoveFileResp

func (p *MoveFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.MoveFileResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MoveFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MoveFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MoveFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MoveFileResult) Unmarshal(in []byte) error {
	msg := new(content.MoveFileResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MoveFileResult) GetSuccess() *content.MoveFileResp {
	if !p.IsSetSuccess() {
		return MoveFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MoveFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.MoveFileResp)
}

func (p *MoveFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MoveFileResult) GetResult() interface{} {
	return p.Success
}

func saveFileToPrivateSpaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.SaveFileToPrivateSpaceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).SaveFileToPrivateSpace(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SaveFileToPrivateSpaceArgs:
		success, err := handler.(content.ContentService).SaveFileToPrivateSpace(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SaveFileToPrivateSpaceResult)
		realResult.Success = success
	}
	return nil
}
func newSaveFileToPrivateSpaceArgs() interface{} {
	return &SaveFileToPrivateSpaceArgs{}
}

func newSaveFileToPrivateSpaceResult() interface{} {
	return &SaveFileToPrivateSpaceResult{}
}

type SaveFileToPrivateSpaceArgs struct {
	Req *content.SaveFileToPrivateSpaceReq
}

func (p *SaveFileToPrivateSpaceArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.SaveFileToPrivateSpaceReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SaveFileToPrivateSpaceArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SaveFileToPrivateSpaceArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SaveFileToPrivateSpaceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SaveFileToPrivateSpaceArgs) Unmarshal(in []byte) error {
	msg := new(content.SaveFileToPrivateSpaceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SaveFileToPrivateSpaceArgs_Req_DEFAULT *content.SaveFileToPrivateSpaceReq

func (p *SaveFileToPrivateSpaceArgs) GetReq() *content.SaveFileToPrivateSpaceReq {
	if !p.IsSetReq() {
		return SaveFileToPrivateSpaceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SaveFileToPrivateSpaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SaveFileToPrivateSpaceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SaveFileToPrivateSpaceResult struct {
	Success *content.SaveFileToPrivateSpaceResp
}

var SaveFileToPrivateSpaceResult_Success_DEFAULT *content.SaveFileToPrivateSpaceResp

func (p *SaveFileToPrivateSpaceResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.SaveFileToPrivateSpaceResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SaveFileToPrivateSpaceResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SaveFileToPrivateSpaceResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SaveFileToPrivateSpaceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SaveFileToPrivateSpaceResult) Unmarshal(in []byte) error {
	msg := new(content.SaveFileToPrivateSpaceResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SaveFileToPrivateSpaceResult) GetSuccess() *content.SaveFileToPrivateSpaceResp {
	if !p.IsSetSuccess() {
		return SaveFileToPrivateSpaceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SaveFileToPrivateSpaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.SaveFileToPrivateSpaceResp)
}

func (p *SaveFileToPrivateSpaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaveFileToPrivateSpaceResult) GetResult() interface{} {
	return p.Success
}

func addFileToPublicSpaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.AddFileToPublicSpaceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).AddFileToPublicSpace(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddFileToPublicSpaceArgs:
		success, err := handler.(content.ContentService).AddFileToPublicSpace(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddFileToPublicSpaceResult)
		realResult.Success = success
	}
	return nil
}
func newAddFileToPublicSpaceArgs() interface{} {
	return &AddFileToPublicSpaceArgs{}
}

func newAddFileToPublicSpaceResult() interface{} {
	return &AddFileToPublicSpaceResult{}
}

type AddFileToPublicSpaceArgs struct {
	Req *content.AddFileToPublicSpaceReq
}

func (p *AddFileToPublicSpaceArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.AddFileToPublicSpaceReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddFileToPublicSpaceArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddFileToPublicSpaceArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddFileToPublicSpaceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AddFileToPublicSpaceArgs) Unmarshal(in []byte) error {
	msg := new(content.AddFileToPublicSpaceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddFileToPublicSpaceArgs_Req_DEFAULT *content.AddFileToPublicSpaceReq

func (p *AddFileToPublicSpaceArgs) GetReq() *content.AddFileToPublicSpaceReq {
	if !p.IsSetReq() {
		return AddFileToPublicSpaceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddFileToPublicSpaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddFileToPublicSpaceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddFileToPublicSpaceResult struct {
	Success *content.AddFileToPublicSpaceResp
}

var AddFileToPublicSpaceResult_Success_DEFAULT *content.AddFileToPublicSpaceResp

func (p *AddFileToPublicSpaceResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.AddFileToPublicSpaceResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddFileToPublicSpaceResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddFileToPublicSpaceResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddFileToPublicSpaceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AddFileToPublicSpaceResult) Unmarshal(in []byte) error {
	msg := new(content.AddFileToPublicSpaceResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddFileToPublicSpaceResult) GetSuccess() *content.AddFileToPublicSpaceResp {
	if !p.IsSetSuccess() {
		return AddFileToPublicSpaceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddFileToPublicSpaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.AddFileToPublicSpaceResp)
}

func (p *AddFileToPublicSpaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddFileToPublicSpaceResult) GetResult() interface{} {
	return p.Success
}

func deleteFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.DeleteFileReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).DeleteFile(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteFileArgs:
		success, err := handler.(content.ContentService).DeleteFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteFileResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteFileArgs() interface{} {
	return &DeleteFileArgs{}
}

func newDeleteFileResult() interface{} {
	return &DeleteFileResult{}
}

type DeleteFileArgs struct {
	Req *content.DeleteFileReq
}

func (p *DeleteFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.DeleteFileReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteFileArgs) Unmarshal(in []byte) error {
	msg := new(content.DeleteFileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteFileArgs_Req_DEFAULT *content.DeleteFileReq

func (p *DeleteFileArgs) GetReq() *content.DeleteFileReq {
	if !p.IsSetReq() {
		return DeleteFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteFileResult struct {
	Success *content.DeleteFileResp
}

var DeleteFileResult_Success_DEFAULT *content.DeleteFileResp

func (p *DeleteFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.DeleteFileResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteFileResult) Unmarshal(in []byte) error {
	msg := new(content.DeleteFileResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteFileResult) GetSuccess() *content.DeleteFileResp {
	if !p.IsSetSuccess() {
		return DeleteFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.DeleteFileResp)
}

func (p *DeleteFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteFileResult) GetResult() interface{} {
	return p.Success
}

func recoverRecycleBinFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.RecoverRecycleBinFileReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).RecoverRecycleBinFile(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RecoverRecycleBinFileArgs:
		success, err := handler.(content.ContentService).RecoverRecycleBinFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RecoverRecycleBinFileResult)
		realResult.Success = success
	}
	return nil
}
func newRecoverRecycleBinFileArgs() interface{} {
	return &RecoverRecycleBinFileArgs{}
}

func newRecoverRecycleBinFileResult() interface{} {
	return &RecoverRecycleBinFileResult{}
}

type RecoverRecycleBinFileArgs struct {
	Req *content.RecoverRecycleBinFileReq
}

func (p *RecoverRecycleBinFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.RecoverRecycleBinFileReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RecoverRecycleBinFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RecoverRecycleBinFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RecoverRecycleBinFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RecoverRecycleBinFileArgs) Unmarshal(in []byte) error {
	msg := new(content.RecoverRecycleBinFileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RecoverRecycleBinFileArgs_Req_DEFAULT *content.RecoverRecycleBinFileReq

func (p *RecoverRecycleBinFileArgs) GetReq() *content.RecoverRecycleBinFileReq {
	if !p.IsSetReq() {
		return RecoverRecycleBinFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RecoverRecycleBinFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RecoverRecycleBinFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RecoverRecycleBinFileResult struct {
	Success *content.RecoverRecycleBinFileResp
}

var RecoverRecycleBinFileResult_Success_DEFAULT *content.RecoverRecycleBinFileResp

func (p *RecoverRecycleBinFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.RecoverRecycleBinFileResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RecoverRecycleBinFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RecoverRecycleBinFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RecoverRecycleBinFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RecoverRecycleBinFileResult) Unmarshal(in []byte) error {
	msg := new(content.RecoverRecycleBinFileResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RecoverRecycleBinFileResult) GetSuccess() *content.RecoverRecycleBinFileResp {
	if !p.IsSetSuccess() {
		return RecoverRecycleBinFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RecoverRecycleBinFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.RecoverRecycleBinFileResp)
}

func (p *RecoverRecycleBinFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RecoverRecycleBinFileResult) GetResult() interface{} {
	return p.Success
}

func getZoneHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetZoneReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).GetZone(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetZoneArgs:
		success, err := handler.(content.ContentService).GetZone(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetZoneResult)
		realResult.Success = success
	}
	return nil
}
func newGetZoneArgs() interface{} {
	return &GetZoneArgs{}
}

func newGetZoneResult() interface{} {
	return &GetZoneResult{}
}

type GetZoneArgs struct {
	Req *content.GetZoneReq
}

func (p *GetZoneArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetZoneReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetZoneArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetZoneArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetZoneArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetZoneArgs) Unmarshal(in []byte) error {
	msg := new(content.GetZoneReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetZoneArgs_Req_DEFAULT *content.GetZoneReq

func (p *GetZoneArgs) GetReq() *content.GetZoneReq {
	if !p.IsSetReq() {
		return GetZoneArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetZoneArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetZoneArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetZoneResult struct {
	Success *content.GetZoneResp
}

var GetZoneResult_Success_DEFAULT *content.GetZoneResp

func (p *GetZoneResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetZoneResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetZoneResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetZoneResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetZoneResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetZoneResult) Unmarshal(in []byte) error {
	msg := new(content.GetZoneResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetZoneResult) GetSuccess() *content.GetZoneResp {
	if !p.IsSetSuccess() {
		return GetZoneResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetZoneResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetZoneResp)
}

func (p *GetZoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetZoneResult) GetResult() interface{} {
	return p.Success
}

func getZonesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetZonesReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).GetZones(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetZonesArgs:
		success, err := handler.(content.ContentService).GetZones(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetZonesResult)
		realResult.Success = success
	}
	return nil
}
func newGetZonesArgs() interface{} {
	return &GetZonesArgs{}
}

func newGetZonesResult() interface{} {
	return &GetZonesResult{}
}

type GetZonesArgs struct {
	Req *content.GetZonesReq
}

func (p *GetZonesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetZonesReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetZonesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetZonesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetZonesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetZonesArgs) Unmarshal(in []byte) error {
	msg := new(content.GetZonesReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetZonesArgs_Req_DEFAULT *content.GetZonesReq

func (p *GetZonesArgs) GetReq() *content.GetZonesReq {
	if !p.IsSetReq() {
		return GetZonesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetZonesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetZonesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetZonesResult struct {
	Success *content.GetZonesResp
}

var GetZonesResult_Success_DEFAULT *content.GetZonesResp

func (p *GetZonesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetZonesResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetZonesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetZonesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetZonesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetZonesResult) Unmarshal(in []byte) error {
	msg := new(content.GetZonesResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetZonesResult) GetSuccess() *content.GetZonesResp {
	if !p.IsSetSuccess() {
		return GetZonesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetZonesResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetZonesResp)
}

func (p *GetZonesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetZonesResult) GetResult() interface{} {
	return p.Success
}

func createZoneHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.CreateZoneReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).CreateZone(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateZoneArgs:
		success, err := handler.(content.ContentService).CreateZone(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateZoneResult)
		realResult.Success = success
	}
	return nil
}
func newCreateZoneArgs() interface{} {
	return &CreateZoneArgs{}
}

func newCreateZoneResult() interface{} {
	return &CreateZoneResult{}
}

type CreateZoneArgs struct {
	Req *content.CreateZoneReq
}

func (p *CreateZoneArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.CreateZoneReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateZoneArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateZoneArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateZoneArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateZoneArgs) Unmarshal(in []byte) error {
	msg := new(content.CreateZoneReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateZoneArgs_Req_DEFAULT *content.CreateZoneReq

func (p *CreateZoneArgs) GetReq() *content.CreateZoneReq {
	if !p.IsSetReq() {
		return CreateZoneArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateZoneArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateZoneArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateZoneResult struct {
	Success *content.CreateZoneResp
}

var CreateZoneResult_Success_DEFAULT *content.CreateZoneResp

func (p *CreateZoneResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.CreateZoneResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateZoneResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateZoneResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateZoneResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateZoneResult) Unmarshal(in []byte) error {
	msg := new(content.CreateZoneResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateZoneResult) GetSuccess() *content.CreateZoneResp {
	if !p.IsSetSuccess() {
		return CreateZoneResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateZoneResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.CreateZoneResp)
}

func (p *CreateZoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateZoneResult) GetResult() interface{} {
	return p.Success
}

func updateZoneHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.UpdateZoneReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).UpdateZone(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateZoneArgs:
		success, err := handler.(content.ContentService).UpdateZone(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateZoneResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateZoneArgs() interface{} {
	return &UpdateZoneArgs{}
}

func newUpdateZoneResult() interface{} {
	return &UpdateZoneResult{}
}

type UpdateZoneArgs struct {
	Req *content.UpdateZoneReq
}

func (p *UpdateZoneArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.UpdateZoneReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateZoneArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateZoneArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateZoneArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateZoneArgs) Unmarshal(in []byte) error {
	msg := new(content.UpdateZoneReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateZoneArgs_Req_DEFAULT *content.UpdateZoneReq

func (p *UpdateZoneArgs) GetReq() *content.UpdateZoneReq {
	if !p.IsSetReq() {
		return UpdateZoneArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateZoneArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateZoneArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateZoneResult struct {
	Success *content.UpdateZoneResp
}

var UpdateZoneResult_Success_DEFAULT *content.UpdateZoneResp

func (p *UpdateZoneResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.UpdateZoneResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateZoneResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateZoneResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateZoneResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateZoneResult) Unmarshal(in []byte) error {
	msg := new(content.UpdateZoneResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateZoneResult) GetSuccess() *content.UpdateZoneResp {
	if !p.IsSetSuccess() {
		return UpdateZoneResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateZoneResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.UpdateZoneResp)
}

func (p *UpdateZoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateZoneResult) GetResult() interface{} {
	return p.Success
}

func deleteZoneHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.DeleteZoneReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).DeleteZone(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteZoneArgs:
		success, err := handler.(content.ContentService).DeleteZone(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteZoneResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteZoneArgs() interface{} {
	return &DeleteZoneArgs{}
}

func newDeleteZoneResult() interface{} {
	return &DeleteZoneResult{}
}

type DeleteZoneArgs struct {
	Req *content.DeleteZoneReq
}

func (p *DeleteZoneArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.DeleteZoneReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteZoneArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteZoneArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteZoneArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteZoneArgs) Unmarshal(in []byte) error {
	msg := new(content.DeleteZoneReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteZoneArgs_Req_DEFAULT *content.DeleteZoneReq

func (p *DeleteZoneArgs) GetReq() *content.DeleteZoneReq {
	if !p.IsSetReq() {
		return DeleteZoneArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteZoneArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteZoneArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteZoneResult struct {
	Success *content.DeleteZoneResp
}

var DeleteZoneResult_Success_DEFAULT *content.DeleteZoneResp

func (p *DeleteZoneResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.DeleteZoneResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteZoneResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteZoneResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteZoneResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteZoneResult) Unmarshal(in []byte) error {
	msg := new(content.DeleteZoneResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteZoneResult) GetSuccess() *content.DeleteZoneResp {
	if !p.IsSetSuccess() {
		return DeleteZoneResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteZoneResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.DeleteZoneResp)
}

func (p *DeleteZoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteZoneResult) GetResult() interface{} {
	return p.Success
}

func getShareListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetShareListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).GetShareList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetShareListArgs:
		success, err := handler.(content.ContentService).GetShareList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetShareListResult)
		realResult.Success = success
	}
	return nil
}
func newGetShareListArgs() interface{} {
	return &GetShareListArgs{}
}

func newGetShareListResult() interface{} {
	return &GetShareListResult{}
}

type GetShareListArgs struct {
	Req *content.GetShareListReq
}

func (p *GetShareListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetShareListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetShareListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetShareListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetShareListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetShareListArgs) Unmarshal(in []byte) error {
	msg := new(content.GetShareListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetShareListArgs_Req_DEFAULT *content.GetShareListReq

func (p *GetShareListArgs) GetReq() *content.GetShareListReq {
	if !p.IsSetReq() {
		return GetShareListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetShareListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetShareListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetShareListResult struct {
	Success *content.GetShareListResp
}

var GetShareListResult_Success_DEFAULT *content.GetShareListResp

func (p *GetShareListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetShareListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetShareListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetShareListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetShareListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetShareListResult) Unmarshal(in []byte) error {
	msg := new(content.GetShareListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetShareListResult) GetSuccess() *content.GetShareListResp {
	if !p.IsSetSuccess() {
		return GetShareListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetShareListResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetShareListResp)
}

func (p *GetShareListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetShareListResult) GetResult() interface{} {
	return p.Success
}

func createShareCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.CreateShareCodeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).CreateShareCode(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateShareCodeArgs:
		success, err := handler.(content.ContentService).CreateShareCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateShareCodeResult)
		realResult.Success = success
	}
	return nil
}
func newCreateShareCodeArgs() interface{} {
	return &CreateShareCodeArgs{}
}

func newCreateShareCodeResult() interface{} {
	return &CreateShareCodeResult{}
}

type CreateShareCodeArgs struct {
	Req *content.CreateShareCodeReq
}

func (p *CreateShareCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.CreateShareCodeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateShareCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateShareCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateShareCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateShareCodeArgs) Unmarshal(in []byte) error {
	msg := new(content.CreateShareCodeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateShareCodeArgs_Req_DEFAULT *content.CreateShareCodeReq

func (p *CreateShareCodeArgs) GetReq() *content.CreateShareCodeReq {
	if !p.IsSetReq() {
		return CreateShareCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateShareCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateShareCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateShareCodeResult struct {
	Success *content.CreateShareCodeResp
}

var CreateShareCodeResult_Success_DEFAULT *content.CreateShareCodeResp

func (p *CreateShareCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.CreateShareCodeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateShareCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateShareCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateShareCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateShareCodeResult) Unmarshal(in []byte) error {
	msg := new(content.CreateShareCodeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateShareCodeResult) GetSuccess() *content.CreateShareCodeResp {
	if !p.IsSetSuccess() {
		return CreateShareCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateShareCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.CreateShareCodeResp)
}

func (p *CreateShareCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateShareCodeResult) GetResult() interface{} {
	return p.Success
}

func updateShareCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.UpdateShareCodeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).UpdateShareCode(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateShareCodeArgs:
		success, err := handler.(content.ContentService).UpdateShareCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateShareCodeResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateShareCodeArgs() interface{} {
	return &UpdateShareCodeArgs{}
}

func newUpdateShareCodeResult() interface{} {
	return &UpdateShareCodeResult{}
}

type UpdateShareCodeArgs struct {
	Req *content.UpdateShareCodeReq
}

func (p *UpdateShareCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.UpdateShareCodeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateShareCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateShareCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateShareCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateShareCodeArgs) Unmarshal(in []byte) error {
	msg := new(content.UpdateShareCodeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateShareCodeArgs_Req_DEFAULT *content.UpdateShareCodeReq

func (p *UpdateShareCodeArgs) GetReq() *content.UpdateShareCodeReq {
	if !p.IsSetReq() {
		return UpdateShareCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateShareCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateShareCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateShareCodeResult struct {
	Success *content.UpdateShareCodeResp
}

var UpdateShareCodeResult_Success_DEFAULT *content.UpdateShareCodeResp

func (p *UpdateShareCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.UpdateShareCodeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateShareCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateShareCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateShareCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateShareCodeResult) Unmarshal(in []byte) error {
	msg := new(content.UpdateShareCodeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateShareCodeResult) GetSuccess() *content.UpdateShareCodeResp {
	if !p.IsSetSuccess() {
		return UpdateShareCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateShareCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.UpdateShareCodeResp)
}

func (p *UpdateShareCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateShareCodeResult) GetResult() interface{} {
	return p.Success
}

func deleteShareCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.DeleteShareCodeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).DeleteShareCode(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteShareCodeArgs:
		success, err := handler.(content.ContentService).DeleteShareCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteShareCodeResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteShareCodeArgs() interface{} {
	return &DeleteShareCodeArgs{}
}

func newDeleteShareCodeResult() interface{} {
	return &DeleteShareCodeResult{}
}

type DeleteShareCodeArgs struct {
	Req *content.DeleteShareCodeReq
}

func (p *DeleteShareCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.DeleteShareCodeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteShareCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteShareCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteShareCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteShareCodeArgs) Unmarshal(in []byte) error {
	msg := new(content.DeleteShareCodeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteShareCodeArgs_Req_DEFAULT *content.DeleteShareCodeReq

func (p *DeleteShareCodeArgs) GetReq() *content.DeleteShareCodeReq {
	if !p.IsSetReq() {
		return DeleteShareCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteShareCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteShareCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteShareCodeResult struct {
	Success *content.DeleteShareCodeResp
}

var DeleteShareCodeResult_Success_DEFAULT *content.DeleteShareCodeResp

func (p *DeleteShareCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.DeleteShareCodeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteShareCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteShareCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteShareCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteShareCodeResult) Unmarshal(in []byte) error {
	msg := new(content.DeleteShareCodeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteShareCodeResult) GetSuccess() *content.DeleteShareCodeResp {
	if !p.IsSetSuccess() {
		return DeleteShareCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteShareCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.DeleteShareCodeResp)
}

func (p *DeleteShareCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteShareCodeResult) GetResult() interface{} {
	return p.Success
}

func parsingShareCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.ParsingShareCodeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).ParsingShareCode(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ParsingShareCodeArgs:
		success, err := handler.(content.ContentService).ParsingShareCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ParsingShareCodeResult)
		realResult.Success = success
	}
	return nil
}
func newParsingShareCodeArgs() interface{} {
	return &ParsingShareCodeArgs{}
}

func newParsingShareCodeResult() interface{} {
	return &ParsingShareCodeResult{}
}

type ParsingShareCodeArgs struct {
	Req *content.ParsingShareCodeReq
}

func (p *ParsingShareCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.ParsingShareCodeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ParsingShareCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ParsingShareCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ParsingShareCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ParsingShareCodeArgs) Unmarshal(in []byte) error {
	msg := new(content.ParsingShareCodeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ParsingShareCodeArgs_Req_DEFAULT *content.ParsingShareCodeReq

func (p *ParsingShareCodeArgs) GetReq() *content.ParsingShareCodeReq {
	if !p.IsSetReq() {
		return ParsingShareCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ParsingShareCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ParsingShareCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ParsingShareCodeResult struct {
	Success *content.ParsingShareCodeResp
}

var ParsingShareCodeResult_Success_DEFAULT *content.ParsingShareCodeResp

func (p *ParsingShareCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.ParsingShareCodeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ParsingShareCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ParsingShareCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ParsingShareCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ParsingShareCodeResult) Unmarshal(in []byte) error {
	msg := new(content.ParsingShareCodeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ParsingShareCodeResult) GetSuccess() *content.ParsingShareCodeResp {
	if !p.IsSetSuccess() {
		return ParsingShareCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ParsingShareCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.ParsingShareCodeResp)
}

func (p *ParsingShareCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ParsingShareCodeResult) GetResult() interface{} {
	return p.Success
}

func updateUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.UpdateUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).UpdateUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateUserArgs:
		success, err := handler.(content.ContentService).UpdateUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateUserResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateUserArgs() interface{} {
	return &UpdateUserArgs{}
}

func newUpdateUserResult() interface{} {
	return &UpdateUserResult{}
}

type UpdateUserArgs struct {
	Req *content.UpdateUserReq
}

func (p *UpdateUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.UpdateUserReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateUserArgs) Unmarshal(in []byte) error {
	msg := new(content.UpdateUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateUserArgs_Req_DEFAULT *content.UpdateUserReq

func (p *UpdateUserArgs) GetReq() *content.UpdateUserReq {
	if !p.IsSetReq() {
		return UpdateUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateUserResult struct {
	Success *content.UpdateUserResp
}

var UpdateUserResult_Success_DEFAULT *content.UpdateUserResp

func (p *UpdateUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.UpdateUserResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateUserResult) Unmarshal(in []byte) error {
	msg := new(content.UpdateUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateUserResult) GetSuccess() *content.UpdateUserResp {
	if !p.IsSetSuccess() {
		return UpdateUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.UpdateUserResp)
}

func (p *UpdateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateUserResult) GetResult() interface{} {
	return p.Success
}

func getUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).GetUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserArgs:
		success, err := handler.(content.ContentService).GetUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserArgs() interface{} {
	return &GetUserArgs{}
}

func newGetUserResult() interface{} {
	return &GetUserResult{}
}

type GetUserArgs struct {
	Req *content.GetUserReq
}

func (p *GetUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetUserReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserArgs) Unmarshal(in []byte) error {
	msg := new(content.GetUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserArgs_Req_DEFAULT *content.GetUserReq

func (p *GetUserArgs) GetReq() *content.GetUserReq {
	if !p.IsSetReq() {
		return GetUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserResult struct {
	Success *content.GetUserResp
}

var GetUserResult_Success_DEFAULT *content.GetUserResp

func (p *GetUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetUserResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserResult) Unmarshal(in []byte) error {
	msg := new(content.GetUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserResult) GetSuccess() *content.GetUserResp {
	if !p.IsSetSuccess() {
		return GetUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetUserResp)
}

func (p *GetUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserResult) GetResult() interface{} {
	return p.Success
}

func searchUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.SearchUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).SearchUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SearchUserArgs:
		success, err := handler.(content.ContentService).SearchUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SearchUserResult)
		realResult.Success = success
	}
	return nil
}
func newSearchUserArgs() interface{} {
	return &SearchUserArgs{}
}

func newSearchUserResult() interface{} {
	return &SearchUserResult{}
}

type SearchUserArgs struct {
	Req *content.SearchUserReq
}

func (p *SearchUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.SearchUserReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SearchUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SearchUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SearchUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SearchUserArgs) Unmarshal(in []byte) error {
	msg := new(content.SearchUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SearchUserArgs_Req_DEFAULT *content.SearchUserReq

func (p *SearchUserArgs) GetReq() *content.SearchUserReq {
	if !p.IsSetReq() {
		return SearchUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SearchUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SearchUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SearchUserResult struct {
	Success *content.SearchUserResp
}

var SearchUserResult_Success_DEFAULT *content.SearchUserResp

func (p *SearchUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.SearchUserResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SearchUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SearchUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SearchUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SearchUserResult) Unmarshal(in []byte) error {
	msg := new(content.SearchUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SearchUserResult) GetSuccess() *content.SearchUserResp {
	if !p.IsSetSuccess() {
		return SearchUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SearchUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.SearchUserResp)
}

func (p *SearchUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SearchUserResult) GetResult() interface{} {
	return p.Success
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.CreateUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).CreateUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateUserArgs:
		success, err := handler.(content.ContentService).CreateUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateUserResult)
		realResult.Success = success
	}
	return nil
}
func newCreateUserArgs() interface{} {
	return &CreateUserArgs{}
}

func newCreateUserResult() interface{} {
	return &CreateUserResult{}
}

type CreateUserArgs struct {
	Req *content.CreateUserReq
}

func (p *CreateUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.CreateUserReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateUserArgs) Unmarshal(in []byte) error {
	msg := new(content.CreateUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateUserArgs_Req_DEFAULT *content.CreateUserReq

func (p *CreateUserArgs) GetReq() *content.CreateUserReq {
	if !p.IsSetReq() {
		return CreateUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateUserResult struct {
	Success *content.CreateUserResp
}

var CreateUserResult_Success_DEFAULT *content.CreateUserResp

func (p *CreateUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.CreateUserResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateUserResult) Unmarshal(in []byte) error {
	msg := new(content.CreateUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateUserResult) GetSuccess() *content.CreateUserResp {
	if !p.IsSetSuccess() {
		return CreateUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.CreateUserResp)
}

func (p *CreateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateUserResult) GetResult() interface{} {
	return p.Success
}

func deleteUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.DeleteUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).DeleteUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteUserArgs:
		success, err := handler.(content.ContentService).DeleteUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteUserResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteUserArgs() interface{} {
	return &DeleteUserArgs{}
}

func newDeleteUserResult() interface{} {
	return &DeleteUserResult{}
}

type DeleteUserArgs struct {
	Req *content.DeleteUserReq
}

func (p *DeleteUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.DeleteUserReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteUserArgs) Unmarshal(in []byte) error {
	msg := new(content.DeleteUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteUserArgs_Req_DEFAULT *content.DeleteUserReq

func (p *DeleteUserArgs) GetReq() *content.DeleteUserReq {
	if !p.IsSetReq() {
		return DeleteUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteUserResult struct {
	Success *content.DeleteUserResp
}

var DeleteUserResult_Success_DEFAULT *content.DeleteUserResp

func (p *DeleteUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.DeleteUserResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteUserResult) Unmarshal(in []byte) error {
	msg := new(content.DeleteUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteUserResult) GetSuccess() *content.DeleteUserResp {
	if !p.IsSetSuccess() {
		return DeleteUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.DeleteUserResp)
}

func (p *DeleteUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteUserResult) GetResult() interface{} {
	return p.Success
}

func createPostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.CreatePostReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).CreatePost(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreatePostArgs:
		success, err := handler.(content.ContentService).CreatePost(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreatePostResult)
		realResult.Success = success
	}
	return nil
}
func newCreatePostArgs() interface{} {
	return &CreatePostArgs{}
}

func newCreatePostResult() interface{} {
	return &CreatePostResult{}
}

type CreatePostArgs struct {
	Req *content.CreatePostReq
}

func (p *CreatePostArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.CreatePostReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreatePostArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreatePostArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreatePostArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreatePostArgs) Unmarshal(in []byte) error {
	msg := new(content.CreatePostReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreatePostArgs_Req_DEFAULT *content.CreatePostReq

func (p *CreatePostArgs) GetReq() *content.CreatePostReq {
	if !p.IsSetReq() {
		return CreatePostArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreatePostArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreatePostArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreatePostResult struct {
	Success *content.CreatePostResp
}

var CreatePostResult_Success_DEFAULT *content.CreatePostResp

func (p *CreatePostResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.CreatePostResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreatePostResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreatePostResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreatePostResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreatePostResult) Unmarshal(in []byte) error {
	msg := new(content.CreatePostResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreatePostResult) GetSuccess() *content.CreatePostResp {
	if !p.IsSetSuccess() {
		return CreatePostResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreatePostResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.CreatePostResp)
}

func (p *CreatePostResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreatePostResult) GetResult() interface{} {
	return p.Success
}

func deletePostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.DeletePostReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).DeletePost(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeletePostArgs:
		success, err := handler.(content.ContentService).DeletePost(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeletePostResult)
		realResult.Success = success
	}
	return nil
}
func newDeletePostArgs() interface{} {
	return &DeletePostArgs{}
}

func newDeletePostResult() interface{} {
	return &DeletePostResult{}
}

type DeletePostArgs struct {
	Req *content.DeletePostReq
}

func (p *DeletePostArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.DeletePostReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeletePostArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeletePostArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeletePostArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeletePostArgs) Unmarshal(in []byte) error {
	msg := new(content.DeletePostReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeletePostArgs_Req_DEFAULT *content.DeletePostReq

func (p *DeletePostArgs) GetReq() *content.DeletePostReq {
	if !p.IsSetReq() {
		return DeletePostArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeletePostArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeletePostArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeletePostResult struct {
	Success *content.DeletePostResp
}

var DeletePostResult_Success_DEFAULT *content.DeletePostResp

func (p *DeletePostResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.DeletePostResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeletePostResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeletePostResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeletePostResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeletePostResult) Unmarshal(in []byte) error {
	msg := new(content.DeletePostResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeletePostResult) GetSuccess() *content.DeletePostResp {
	if !p.IsSetSuccess() {
		return DeletePostResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeletePostResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.DeletePostResp)
}

func (p *DeletePostResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeletePostResult) GetResult() interface{} {
	return p.Success
}

func updatePostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.UpdatePostReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).UpdatePost(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdatePostArgs:
		success, err := handler.(content.ContentService).UpdatePost(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdatePostResult)
		realResult.Success = success
	}
	return nil
}
func newUpdatePostArgs() interface{} {
	return &UpdatePostArgs{}
}

func newUpdatePostResult() interface{} {
	return &UpdatePostResult{}
}

type UpdatePostArgs struct {
	Req *content.UpdatePostReq
}

func (p *UpdatePostArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.UpdatePostReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdatePostArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdatePostArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdatePostArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdatePostArgs) Unmarshal(in []byte) error {
	msg := new(content.UpdatePostReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdatePostArgs_Req_DEFAULT *content.UpdatePostReq

func (p *UpdatePostArgs) GetReq() *content.UpdatePostReq {
	if !p.IsSetReq() {
		return UpdatePostArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdatePostArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdatePostArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdatePostResult struct {
	Success *content.UpdatePostResp
}

var UpdatePostResult_Success_DEFAULT *content.UpdatePostResp

func (p *UpdatePostResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.UpdatePostResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdatePostResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdatePostResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdatePostResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdatePostResult) Unmarshal(in []byte) error {
	msg := new(content.UpdatePostResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdatePostResult) GetSuccess() *content.UpdatePostResp {
	if !p.IsSetSuccess() {
		return UpdatePostResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdatePostResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.UpdatePostResp)
}

func (p *UpdatePostResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdatePostResult) GetResult() interface{} {
	return p.Success
}

func getPostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetPostReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).GetPost(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetPostArgs:
		success, err := handler.(content.ContentService).GetPost(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetPostResult)
		realResult.Success = success
	}
	return nil
}
func newGetPostArgs() interface{} {
	return &GetPostArgs{}
}

func newGetPostResult() interface{} {
	return &GetPostResult{}
}

type GetPostArgs struct {
	Req *content.GetPostReq
}

func (p *GetPostArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetPostReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetPostArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetPostArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetPostArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetPostArgs) Unmarshal(in []byte) error {
	msg := new(content.GetPostReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetPostArgs_Req_DEFAULT *content.GetPostReq

func (p *GetPostArgs) GetReq() *content.GetPostReq {
	if !p.IsSetReq() {
		return GetPostArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetPostArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetPostArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetPostResult struct {
	Success *content.GetPostResp
}

var GetPostResult_Success_DEFAULT *content.GetPostResp

func (p *GetPostResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetPostResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetPostResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetPostResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetPostResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetPostResult) Unmarshal(in []byte) error {
	msg := new(content.GetPostResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetPostResult) GetSuccess() *content.GetPostResp {
	if !p.IsSetSuccess() {
		return GetPostResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetPostResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetPostResp)
}

func (p *GetPostResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPostResult) GetResult() interface{} {
	return p.Success
}

func getPostsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetPostsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).GetPosts(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetPostsArgs:
		success, err := handler.(content.ContentService).GetPosts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetPostsResult)
		realResult.Success = success
	}
	return nil
}
func newGetPostsArgs() interface{} {
	return &GetPostsArgs{}
}

func newGetPostsResult() interface{} {
	return &GetPostsResult{}
}

type GetPostsArgs struct {
	Req *content.GetPostsReq
}

func (p *GetPostsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetPostsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetPostsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetPostsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetPostsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetPostsArgs) Unmarshal(in []byte) error {
	msg := new(content.GetPostsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetPostsArgs_Req_DEFAULT *content.GetPostsReq

func (p *GetPostsArgs) GetReq() *content.GetPostsReq {
	if !p.IsSetReq() {
		return GetPostsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetPostsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetPostsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetPostsResult struct {
	Success *content.GetPostsResp
}

var GetPostsResult_Success_DEFAULT *content.GetPostsResp

func (p *GetPostsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetPostsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetPostsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetPostsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetPostsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetPostsResult) Unmarshal(in []byte) error {
	msg := new(content.GetPostsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetPostsResult) GetSuccess() *content.GetPostsResp {
	if !p.IsSetSuccess() {
		return GetPostsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetPostsResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetPostsResp)
}

func (p *GetPostsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPostsResult) GetResult() interface{} {
	return p.Success
}

func createProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.CreateProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).CreateProduct(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateProductArgs:
		success, err := handler.(content.ContentService).CreateProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateProductResult)
		realResult.Success = success
	}
	return nil
}
func newCreateProductArgs() interface{} {
	return &CreateProductArgs{}
}

func newCreateProductResult() interface{} {
	return &CreateProductResult{}
}

type CreateProductArgs struct {
	Req *content.CreateProductReq
}

func (p *CreateProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.CreateProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateProductArgs) Unmarshal(in []byte) error {
	msg := new(content.CreateProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateProductArgs_Req_DEFAULT *content.CreateProductReq

func (p *CreateProductArgs) GetReq() *content.CreateProductReq {
	if !p.IsSetReq() {
		return CreateProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateProductResult struct {
	Success *content.CreateProductResp
}

var CreateProductResult_Success_DEFAULT *content.CreateProductResp

func (p *CreateProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.CreateProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateProductResult) Unmarshal(in []byte) error {
	msg := new(content.CreateProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateProductResult) GetSuccess() *content.CreateProductResp {
	if !p.IsSetSuccess() {
		return CreateProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.CreateProductResp)
}

func (p *CreateProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateProductResult) GetResult() interface{} {
	return p.Success
}

func deleteProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.DeleteProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).DeleteProduct(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteProductArgs:
		success, err := handler.(content.ContentService).DeleteProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteProductResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteProductArgs() interface{} {
	return &DeleteProductArgs{}
}

func newDeleteProductResult() interface{} {
	return &DeleteProductResult{}
}

type DeleteProductArgs struct {
	Req *content.DeleteProductReq
}

func (p *DeleteProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.DeleteProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteProductArgs) Unmarshal(in []byte) error {
	msg := new(content.DeleteProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteProductArgs_Req_DEFAULT *content.DeleteProductReq

func (p *DeleteProductArgs) GetReq() *content.DeleteProductReq {
	if !p.IsSetReq() {
		return DeleteProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteProductResult struct {
	Success *content.DeleteProductResp
}

var DeleteProductResult_Success_DEFAULT *content.DeleteProductResp

func (p *DeleteProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.DeleteProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteProductResult) Unmarshal(in []byte) error {
	msg := new(content.DeleteProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteProductResult) GetSuccess() *content.DeleteProductResp {
	if !p.IsSetSuccess() {
		return DeleteProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.DeleteProductResp)
}

func (p *DeleteProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteProductResult) GetResult() interface{} {
	return p.Success
}

func updateProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.UpdateProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).UpdateProduct(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateProductArgs:
		success, err := handler.(content.ContentService).UpdateProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateProductResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateProductArgs() interface{} {
	return &UpdateProductArgs{}
}

func newUpdateProductResult() interface{} {
	return &UpdateProductResult{}
}

type UpdateProductArgs struct {
	Req *content.UpdateProductReq
}

func (p *UpdateProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.UpdateProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateProductArgs) Unmarshal(in []byte) error {
	msg := new(content.UpdateProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateProductArgs_Req_DEFAULT *content.UpdateProductReq

func (p *UpdateProductArgs) GetReq() *content.UpdateProductReq {
	if !p.IsSetReq() {
		return UpdateProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateProductResult struct {
	Success *content.UpdateProductResp
}

var UpdateProductResult_Success_DEFAULT *content.UpdateProductResp

func (p *UpdateProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.UpdateProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateProductResult) Unmarshal(in []byte) error {
	msg := new(content.UpdateProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateProductResult) GetSuccess() *content.UpdateProductResp {
	if !p.IsSetSuccess() {
		return UpdateProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.UpdateProductResp)
}

func (p *UpdateProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateProductResult) GetResult() interface{} {
	return p.Success
}

func getProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).GetProduct(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetProductArgs:
		success, err := handler.(content.ContentService).GetProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetProductResult)
		realResult.Success = success
	}
	return nil
}
func newGetProductArgs() interface{} {
	return &GetProductArgs{}
}

func newGetProductResult() interface{} {
	return &GetProductResult{}
}

type GetProductArgs struct {
	Req *content.GetProductReq
}

func (p *GetProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetProductArgs) Unmarshal(in []byte) error {
	msg := new(content.GetProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetProductArgs_Req_DEFAULT *content.GetProductReq

func (p *GetProductArgs) GetReq() *content.GetProductReq {
	if !p.IsSetReq() {
		return GetProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetProductResult struct {
	Success *content.GetProductResp
}

var GetProductResult_Success_DEFAULT *content.GetProductResp

func (p *GetProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetProductResult) Unmarshal(in []byte) error {
	msg := new(content.GetProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetProductResult) GetSuccess() *content.GetProductResp {
	if !p.IsSetSuccess() {
		return GetProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetProductResp)
}

func (p *GetProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetProductResult) GetResult() interface{} {
	return p.Success
}

func getProductsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetProductsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).GetProducts(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetProductsArgs:
		success, err := handler.(content.ContentService).GetProducts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetProductsResult)
		realResult.Success = success
	}
	return nil
}
func newGetProductsArgs() interface{} {
	return &GetProductsArgs{}
}

func newGetProductsResult() interface{} {
	return &GetProductsResult{}
}

type GetProductsArgs struct {
	Req *content.GetProductsReq
}

func (p *GetProductsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetProductsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetProductsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetProductsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetProductsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetProductsArgs) Unmarshal(in []byte) error {
	msg := new(content.GetProductsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetProductsArgs_Req_DEFAULT *content.GetProductsReq

func (p *GetProductsArgs) GetReq() *content.GetProductsReq {
	if !p.IsSetReq() {
		return GetProductsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetProductsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetProductsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetProductsResult struct {
	Success *content.GetProductsResp
}

var GetProductsResult_Success_DEFAULT *content.GetProductsResp

func (p *GetProductsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetProductsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetProductsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetProductsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetProductsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetProductsResult) Unmarshal(in []byte) error {
	msg := new(content.GetProductsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetProductsResult) GetSuccess() *content.GetProductsResp {
	if !p.IsSetSuccess() {
		return GetProductsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetProductsResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetProductsResp)
}

func (p *GetProductsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetProductsResult) GetResult() interface{} {
	return p.Success
}

func createCouponHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.CreateCouponReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).CreateCoupon(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateCouponArgs:
		success, err := handler.(content.ContentService).CreateCoupon(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateCouponResult)
		realResult.Success = success
	}
	return nil
}
func newCreateCouponArgs() interface{} {
	return &CreateCouponArgs{}
}

func newCreateCouponResult() interface{} {
	return &CreateCouponResult{}
}

type CreateCouponArgs struct {
	Req *content.CreateCouponReq
}

func (p *CreateCouponArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.CreateCouponReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateCouponArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateCouponArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateCouponArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateCouponArgs) Unmarshal(in []byte) error {
	msg := new(content.CreateCouponReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateCouponArgs_Req_DEFAULT *content.CreateCouponReq

func (p *CreateCouponArgs) GetReq() *content.CreateCouponReq {
	if !p.IsSetReq() {
		return CreateCouponArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateCouponArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateCouponArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateCouponResult struct {
	Success *content.CreateCouponResp
}

var CreateCouponResult_Success_DEFAULT *content.CreateCouponResp

func (p *CreateCouponResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.CreateCouponResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateCouponResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateCouponResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateCouponResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateCouponResult) Unmarshal(in []byte) error {
	msg := new(content.CreateCouponResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateCouponResult) GetSuccess() *content.CreateCouponResp {
	if !p.IsSetSuccess() {
		return CreateCouponResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateCouponResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.CreateCouponResp)
}

func (p *CreateCouponResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateCouponResult) GetResult() interface{} {
	return p.Success
}

func deleteCouponHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.DeleteCouponReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).DeleteCoupon(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteCouponArgs:
		success, err := handler.(content.ContentService).DeleteCoupon(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteCouponResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteCouponArgs() interface{} {
	return &DeleteCouponArgs{}
}

func newDeleteCouponResult() interface{} {
	return &DeleteCouponResult{}
}

type DeleteCouponArgs struct {
	Req *content.DeleteCouponReq
}

func (p *DeleteCouponArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.DeleteCouponReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteCouponArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteCouponArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteCouponArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteCouponArgs) Unmarshal(in []byte) error {
	msg := new(content.DeleteCouponReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteCouponArgs_Req_DEFAULT *content.DeleteCouponReq

func (p *DeleteCouponArgs) GetReq() *content.DeleteCouponReq {
	if !p.IsSetReq() {
		return DeleteCouponArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteCouponArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteCouponArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteCouponResult struct {
	Success *content.DeleteCouponResp
}

var DeleteCouponResult_Success_DEFAULT *content.DeleteCouponResp

func (p *DeleteCouponResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.DeleteCouponResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteCouponResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteCouponResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteCouponResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteCouponResult) Unmarshal(in []byte) error {
	msg := new(content.DeleteCouponResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteCouponResult) GetSuccess() *content.DeleteCouponResp {
	if !p.IsSetSuccess() {
		return DeleteCouponResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteCouponResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.DeleteCouponResp)
}

func (p *DeleteCouponResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteCouponResult) GetResult() interface{} {
	return p.Success
}

func updateCouponHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.UpdateCouponReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).UpdateCoupon(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateCouponArgs:
		success, err := handler.(content.ContentService).UpdateCoupon(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateCouponResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateCouponArgs() interface{} {
	return &UpdateCouponArgs{}
}

func newUpdateCouponResult() interface{} {
	return &UpdateCouponResult{}
}

type UpdateCouponArgs struct {
	Req *content.UpdateCouponReq
}

func (p *UpdateCouponArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.UpdateCouponReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateCouponArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateCouponArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateCouponArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateCouponArgs) Unmarshal(in []byte) error {
	msg := new(content.UpdateCouponReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateCouponArgs_Req_DEFAULT *content.UpdateCouponReq

func (p *UpdateCouponArgs) GetReq() *content.UpdateCouponReq {
	if !p.IsSetReq() {
		return UpdateCouponArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateCouponArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateCouponArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateCouponResult struct {
	Success *content.UpdateCouponResp
}

var UpdateCouponResult_Success_DEFAULT *content.UpdateCouponResp

func (p *UpdateCouponResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.UpdateCouponResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateCouponResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateCouponResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateCouponResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateCouponResult) Unmarshal(in []byte) error {
	msg := new(content.UpdateCouponResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateCouponResult) GetSuccess() *content.UpdateCouponResp {
	if !p.IsSetSuccess() {
		return UpdateCouponResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateCouponResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.UpdateCouponResp)
}

func (p *UpdateCouponResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateCouponResult) GetResult() interface{} {
	return p.Success
}

func getCouponHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetCouponReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).GetCoupon(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetCouponArgs:
		success, err := handler.(content.ContentService).GetCoupon(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCouponResult)
		realResult.Success = success
	}
	return nil
}
func newGetCouponArgs() interface{} {
	return &GetCouponArgs{}
}

func newGetCouponResult() interface{} {
	return &GetCouponResult{}
}

type GetCouponArgs struct {
	Req *content.GetCouponReq
}

func (p *GetCouponArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetCouponReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetCouponArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetCouponArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetCouponArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetCouponArgs) Unmarshal(in []byte) error {
	msg := new(content.GetCouponReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCouponArgs_Req_DEFAULT *content.GetCouponReq

func (p *GetCouponArgs) GetReq() *content.GetCouponReq {
	if !p.IsSetReq() {
		return GetCouponArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCouponArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetCouponArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetCouponResult struct {
	Success *content.GetCouponResp
}

var GetCouponResult_Success_DEFAULT *content.GetCouponResp

func (p *GetCouponResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetCouponResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetCouponResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetCouponResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetCouponResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetCouponResult) Unmarshal(in []byte) error {
	msg := new(content.GetCouponResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCouponResult) GetSuccess() *content.GetCouponResp {
	if !p.IsSetSuccess() {
		return GetCouponResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCouponResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetCouponResp)
}

func (p *GetCouponResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCouponResult) GetResult() interface{} {
	return p.Success
}

func getCouponsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetCouponsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).GetCoupons(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetCouponsArgs:
		success, err := handler.(content.ContentService).GetCoupons(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCouponsResult)
		realResult.Success = success
	}
	return nil
}
func newGetCouponsArgs() interface{} {
	return &GetCouponsArgs{}
}

func newGetCouponsResult() interface{} {
	return &GetCouponsResult{}
}

type GetCouponsArgs struct {
	Req *content.GetCouponsReq
}

func (p *GetCouponsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetCouponsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetCouponsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetCouponsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetCouponsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetCouponsArgs) Unmarshal(in []byte) error {
	msg := new(content.GetCouponsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCouponsArgs_Req_DEFAULT *content.GetCouponsReq

func (p *GetCouponsArgs) GetReq() *content.GetCouponsReq {
	if !p.IsSetReq() {
		return GetCouponsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCouponsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetCouponsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetCouponsResult struct {
	Success *content.GetCouponsResp
}

var GetCouponsResult_Success_DEFAULT *content.GetCouponsResp

func (p *GetCouponsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetCouponsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetCouponsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetCouponsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetCouponsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetCouponsResult) Unmarshal(in []byte) error {
	msg := new(content.GetCouponsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCouponsResult) GetSuccess() *content.GetCouponsResp {
	if !p.IsSetSuccess() {
		return GetCouponsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCouponsResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetCouponsResp)
}

func (p *GetCouponsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCouponsResult) GetResult() interface{} {
	return p.Success
}

func createOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.CreateOrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).CreateOrder(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateOrderArgs:
		success, err := handler.(content.ContentService).CreateOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateOrderResult)
		realResult.Success = success
	}
	return nil
}
func newCreateOrderArgs() interface{} {
	return &CreateOrderArgs{}
}

func newCreateOrderResult() interface{} {
	return &CreateOrderResult{}
}

type CreateOrderArgs struct {
	Req *content.CreateOrderReq
}

func (p *CreateOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.CreateOrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateOrderArgs) Unmarshal(in []byte) error {
	msg := new(content.CreateOrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateOrderArgs_Req_DEFAULT *content.CreateOrderReq

func (p *CreateOrderArgs) GetReq() *content.CreateOrderReq {
	if !p.IsSetReq() {
		return CreateOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateOrderResult struct {
	Success *content.CreateOrderResp
}

var CreateOrderResult_Success_DEFAULT *content.CreateOrderResp

func (p *CreateOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.CreateOrderResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateOrderResult) Unmarshal(in []byte) error {
	msg := new(content.CreateOrderResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateOrderResult) GetSuccess() *content.CreateOrderResp {
	if !p.IsSetSuccess() {
		return CreateOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.CreateOrderResp)
}

func (p *CreateOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateOrderResult) GetResult() interface{} {
	return p.Success
}

func deleteOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.DeleteOrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).DeleteOrder(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteOrderArgs:
		success, err := handler.(content.ContentService).DeleteOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteOrderResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteOrderArgs() interface{} {
	return &DeleteOrderArgs{}
}

func newDeleteOrderResult() interface{} {
	return &DeleteOrderResult{}
}

type DeleteOrderArgs struct {
	Req *content.DeleteOrderReq
}

func (p *DeleteOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.DeleteOrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteOrderArgs) Unmarshal(in []byte) error {
	msg := new(content.DeleteOrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteOrderArgs_Req_DEFAULT *content.DeleteOrderReq

func (p *DeleteOrderArgs) GetReq() *content.DeleteOrderReq {
	if !p.IsSetReq() {
		return DeleteOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteOrderResult struct {
	Success *content.DeleteOrderResp
}

var DeleteOrderResult_Success_DEFAULT *content.DeleteOrderResp

func (p *DeleteOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.DeleteOrderResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteOrderResult) Unmarshal(in []byte) error {
	msg := new(content.DeleteOrderResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteOrderResult) GetSuccess() *content.DeleteOrderResp {
	if !p.IsSetSuccess() {
		return DeleteOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.DeleteOrderResp)
}

func (p *DeleteOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteOrderResult) GetResult() interface{} {
	return p.Success
}

func updateOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.UpdateOrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).UpdateOrder(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateOrderArgs:
		success, err := handler.(content.ContentService).UpdateOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateOrderResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateOrderArgs() interface{} {
	return &UpdateOrderArgs{}
}

func newUpdateOrderResult() interface{} {
	return &UpdateOrderResult{}
}

type UpdateOrderArgs struct {
	Req *content.UpdateOrderReq
}

func (p *UpdateOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.UpdateOrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateOrderArgs) Unmarshal(in []byte) error {
	msg := new(content.UpdateOrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateOrderArgs_Req_DEFAULT *content.UpdateOrderReq

func (p *UpdateOrderArgs) GetReq() *content.UpdateOrderReq {
	if !p.IsSetReq() {
		return UpdateOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateOrderResult struct {
	Success *content.UpdateOrderResp
}

var UpdateOrderResult_Success_DEFAULT *content.UpdateOrderResp

func (p *UpdateOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.UpdateOrderResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateOrderResult) Unmarshal(in []byte) error {
	msg := new(content.UpdateOrderResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateOrderResult) GetSuccess() *content.UpdateOrderResp {
	if !p.IsSetSuccess() {
		return UpdateOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.UpdateOrderResp)
}

func (p *UpdateOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateOrderResult) GetResult() interface{} {
	return p.Success
}

func getOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetOrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).GetOrder(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetOrderArgs:
		success, err := handler.(content.ContentService).GetOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetOrderResult)
		realResult.Success = success
	}
	return nil
}
func newGetOrderArgs() interface{} {
	return &GetOrderArgs{}
}

func newGetOrderResult() interface{} {
	return &GetOrderResult{}
}

type GetOrderArgs struct {
	Req *content.GetOrderReq
}

func (p *GetOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetOrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetOrderArgs) Unmarshal(in []byte) error {
	msg := new(content.GetOrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetOrderArgs_Req_DEFAULT *content.GetOrderReq

func (p *GetOrderArgs) GetReq() *content.GetOrderReq {
	if !p.IsSetReq() {
		return GetOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetOrderResult struct {
	Success *content.GetOrderResp
}

var GetOrderResult_Success_DEFAULT *content.GetOrderResp

func (p *GetOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetOrderResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetOrderResult) Unmarshal(in []byte) error {
	msg := new(content.GetOrderResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetOrderResult) GetSuccess() *content.GetOrderResp {
	if !p.IsSetSuccess() {
		return GetOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetOrderResp)
}

func (p *GetOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetOrderResult) GetResult() interface{} {
	return p.Success
}

func getOrdersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetOrdersReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).GetOrders(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetOrdersArgs:
		success, err := handler.(content.ContentService).GetOrders(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetOrdersResult)
		realResult.Success = success
	}
	return nil
}
func newGetOrdersArgs() interface{} {
	return &GetOrdersArgs{}
}

func newGetOrdersResult() interface{} {
	return &GetOrdersResult{}
}

type GetOrdersArgs struct {
	Req *content.GetOrdersReq
}

func (p *GetOrdersArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetOrdersReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetOrdersArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetOrdersArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetOrdersArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetOrdersArgs) Unmarshal(in []byte) error {
	msg := new(content.GetOrdersReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetOrdersArgs_Req_DEFAULT *content.GetOrdersReq

func (p *GetOrdersArgs) GetReq() *content.GetOrdersReq {
	if !p.IsSetReq() {
		return GetOrdersArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetOrdersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetOrdersArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetOrdersResult struct {
	Success *content.GetOrdersResp
}

var GetOrdersResult_Success_DEFAULT *content.GetOrdersResp

func (p *GetOrdersResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetOrdersResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetOrdersResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetOrdersResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetOrdersResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetOrdersResult) Unmarshal(in []byte) error {
	msg := new(content.GetOrdersResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetOrdersResult) GetSuccess() *content.GetOrdersResp {
	if !p.IsSetSuccess() {
		return GetOrdersResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetOrdersResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetOrdersResp)
}

func (p *GetOrdersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetOrdersResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetFileIsExist(ctx context.Context, Req *content.GetFileIsExistReq) (r *content.GetFileIsExistResp, err error) {
	var _args GetFileIsExistArgs
	_args.Req = Req
	var _result GetFileIsExistResult
	if err = p.c.Call(ctx, "GetFileIsExist", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFile(ctx context.Context, Req *content.GetFileReq) (r *content.GetFileResp, err error) {
	var _args GetFileArgs
	_args.Req = Req
	var _result GetFileResult
	if err = p.c.Call(ctx, "GetFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFileList(ctx context.Context, Req *content.GetFileListReq) (r *content.GetFileListResp, err error) {
	var _args GetFileListArgs
	_args.Req = Req
	var _result GetFileListResult
	if err = p.c.Call(ctx, "GetFileList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFileCount(ctx context.Context, Req *content.GetFileCountReq) (r *content.GetFileCountResp, err error) {
	var _args GetFileCountArgs
	_args.Req = Req
	var _result GetFileCountResult
	if err = p.c.Call(ctx, "GetFileCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFileBySharingCode(ctx context.Context, Req *content.GetFileBySharingCodeReq) (r *content.GetFileBySharingCodeResp, err error) {
	var _args GetFileBySharingCodeArgs
	_args.Req = Req
	var _result GetFileBySharingCodeResult
	if err = p.c.Call(ctx, "GetFileBySharingCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFolderSize(ctx context.Context, Req *content.GetFolderSizeReq) (r *content.GetFolderSizeResp, err error) {
	var _args GetFolderSizeArgs
	_args.Req = Req
	var _result GetFolderSizeResult
	if err = p.c.Call(ctx, "GetFolderSize", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateFile(ctx context.Context, Req *content.UpdateFileReq) (r *content.UpdateFileResp, err error) {
	var _args UpdateFileArgs
	_args.Req = Req
	var _result UpdateFileResult
	if err = p.c.Call(ctx, "UpdateFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateFile(ctx context.Context, Req *content.CreateFileReq) (r *content.CreateFileResp, err error) {
	var _args CreateFileArgs
	_args.Req = Req
	var _result CreateFileResult
	if err = p.c.Call(ctx, "CreateFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MoveFile(ctx context.Context, Req *content.MoveFileReq) (r *content.MoveFileResp, err error) {
	var _args MoveFileArgs
	_args.Req = Req
	var _result MoveFileResult
	if err = p.c.Call(ctx, "MoveFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SaveFileToPrivateSpace(ctx context.Context, Req *content.SaveFileToPrivateSpaceReq) (r *content.SaveFileToPrivateSpaceResp, err error) {
	var _args SaveFileToPrivateSpaceArgs
	_args.Req = Req
	var _result SaveFileToPrivateSpaceResult
	if err = p.c.Call(ctx, "SaveFileToPrivateSpace", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddFileToPublicSpace(ctx context.Context, Req *content.AddFileToPublicSpaceReq) (r *content.AddFileToPublicSpaceResp, err error) {
	var _args AddFileToPublicSpaceArgs
	_args.Req = Req
	var _result AddFileToPublicSpaceResult
	if err = p.c.Call(ctx, "AddFileToPublicSpace", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteFile(ctx context.Context, Req *content.DeleteFileReq) (r *content.DeleteFileResp, err error) {
	var _args DeleteFileArgs
	_args.Req = Req
	var _result DeleteFileResult
	if err = p.c.Call(ctx, "DeleteFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RecoverRecycleBinFile(ctx context.Context, Req *content.RecoverRecycleBinFileReq) (r *content.RecoverRecycleBinFileResp, err error) {
	var _args RecoverRecycleBinFileArgs
	_args.Req = Req
	var _result RecoverRecycleBinFileResult
	if err = p.c.Call(ctx, "RecoverRecycleBinFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetZone(ctx context.Context, Req *content.GetZoneReq) (r *content.GetZoneResp, err error) {
	var _args GetZoneArgs
	_args.Req = Req
	var _result GetZoneResult
	if err = p.c.Call(ctx, "GetZone", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetZones(ctx context.Context, Req *content.GetZonesReq) (r *content.GetZonesResp, err error) {
	var _args GetZonesArgs
	_args.Req = Req
	var _result GetZonesResult
	if err = p.c.Call(ctx, "GetZones", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateZone(ctx context.Context, Req *content.CreateZoneReq) (r *content.CreateZoneResp, err error) {
	var _args CreateZoneArgs
	_args.Req = Req
	var _result CreateZoneResult
	if err = p.c.Call(ctx, "CreateZone", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateZone(ctx context.Context, Req *content.UpdateZoneReq) (r *content.UpdateZoneResp, err error) {
	var _args UpdateZoneArgs
	_args.Req = Req
	var _result UpdateZoneResult
	if err = p.c.Call(ctx, "UpdateZone", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteZone(ctx context.Context, Req *content.DeleteZoneReq) (r *content.DeleteZoneResp, err error) {
	var _args DeleteZoneArgs
	_args.Req = Req
	var _result DeleteZoneResult
	if err = p.c.Call(ctx, "DeleteZone", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetShareList(ctx context.Context, Req *content.GetShareListReq) (r *content.GetShareListResp, err error) {
	var _args GetShareListArgs
	_args.Req = Req
	var _result GetShareListResult
	if err = p.c.Call(ctx, "GetShareList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateShareCode(ctx context.Context, Req *content.CreateShareCodeReq) (r *content.CreateShareCodeResp, err error) {
	var _args CreateShareCodeArgs
	_args.Req = Req
	var _result CreateShareCodeResult
	if err = p.c.Call(ctx, "CreateShareCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateShareCode(ctx context.Context, Req *content.UpdateShareCodeReq) (r *content.UpdateShareCodeResp, err error) {
	var _args UpdateShareCodeArgs
	_args.Req = Req
	var _result UpdateShareCodeResult
	if err = p.c.Call(ctx, "UpdateShareCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteShareCode(ctx context.Context, Req *content.DeleteShareCodeReq) (r *content.DeleteShareCodeResp, err error) {
	var _args DeleteShareCodeArgs
	_args.Req = Req
	var _result DeleteShareCodeResult
	if err = p.c.Call(ctx, "DeleteShareCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ParsingShareCode(ctx context.Context, Req *content.ParsingShareCodeReq) (r *content.ParsingShareCodeResp, err error) {
	var _args ParsingShareCodeArgs
	_args.Req = Req
	var _result ParsingShareCodeResult
	if err = p.c.Call(ctx, "ParsingShareCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUser(ctx context.Context, Req *content.UpdateUserReq) (r *content.UpdateUserResp, err error) {
	var _args UpdateUserArgs
	_args.Req = Req
	var _result UpdateUserResult
	if err = p.c.Call(ctx, "UpdateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUser(ctx context.Context, Req *content.GetUserReq) (r *content.GetUserResp, err error) {
	var _args GetUserArgs
	_args.Req = Req
	var _result GetUserResult
	if err = p.c.Call(ctx, "GetUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchUser(ctx context.Context, Req *content.SearchUserReq) (r *content.SearchUserResp, err error) {
	var _args SearchUserArgs
	_args.Req = Req
	var _result SearchUserResult
	if err = p.c.Call(ctx, "SearchUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateUser(ctx context.Context, Req *content.CreateUserReq) (r *content.CreateUserResp, err error) {
	var _args CreateUserArgs
	_args.Req = Req
	var _result CreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteUser(ctx context.Context, Req *content.DeleteUserReq) (r *content.DeleteUserResp, err error) {
	var _args DeleteUserArgs
	_args.Req = Req
	var _result DeleteUserResult
	if err = p.c.Call(ctx, "DeleteUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreatePost(ctx context.Context, Req *content.CreatePostReq) (r *content.CreatePostResp, err error) {
	var _args CreatePostArgs
	_args.Req = Req
	var _result CreatePostResult
	if err = p.c.Call(ctx, "CreatePost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeletePost(ctx context.Context, Req *content.DeletePostReq) (r *content.DeletePostResp, err error) {
	var _args DeletePostArgs
	_args.Req = Req
	var _result DeletePostResult
	if err = p.c.Call(ctx, "DeletePost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdatePost(ctx context.Context, Req *content.UpdatePostReq) (r *content.UpdatePostResp, err error) {
	var _args UpdatePostArgs
	_args.Req = Req
	var _result UpdatePostResult
	if err = p.c.Call(ctx, "UpdatePost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPost(ctx context.Context, Req *content.GetPostReq) (r *content.GetPostResp, err error) {
	var _args GetPostArgs
	_args.Req = Req
	var _result GetPostResult
	if err = p.c.Call(ctx, "GetPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPosts(ctx context.Context, Req *content.GetPostsReq) (r *content.GetPostsResp, err error) {
	var _args GetPostsArgs
	_args.Req = Req
	var _result GetPostsResult
	if err = p.c.Call(ctx, "GetPosts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateProduct(ctx context.Context, Req *content.CreateProductReq) (r *content.CreateProductResp, err error) {
	var _args CreateProductArgs
	_args.Req = Req
	var _result CreateProductResult
	if err = p.c.Call(ctx, "CreateProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteProduct(ctx context.Context, Req *content.DeleteProductReq) (r *content.DeleteProductResp, err error) {
	var _args DeleteProductArgs
	_args.Req = Req
	var _result DeleteProductResult
	if err = p.c.Call(ctx, "DeleteProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateProduct(ctx context.Context, Req *content.UpdateProductReq) (r *content.UpdateProductResp, err error) {
	var _args UpdateProductArgs
	_args.Req = Req
	var _result UpdateProductResult
	if err = p.c.Call(ctx, "UpdateProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProduct(ctx context.Context, Req *content.GetProductReq) (r *content.GetProductResp, err error) {
	var _args GetProductArgs
	_args.Req = Req
	var _result GetProductResult
	if err = p.c.Call(ctx, "GetProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProducts(ctx context.Context, Req *content.GetProductsReq) (r *content.GetProductsResp, err error) {
	var _args GetProductsArgs
	_args.Req = Req
	var _result GetProductsResult
	if err = p.c.Call(ctx, "GetProducts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateCoupon(ctx context.Context, Req *content.CreateCouponReq) (r *content.CreateCouponResp, err error) {
	var _args CreateCouponArgs
	_args.Req = Req
	var _result CreateCouponResult
	if err = p.c.Call(ctx, "CreateCoupon", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCoupon(ctx context.Context, Req *content.DeleteCouponReq) (r *content.DeleteCouponResp, err error) {
	var _args DeleteCouponArgs
	_args.Req = Req
	var _result DeleteCouponResult
	if err = p.c.Call(ctx, "DeleteCoupon", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCoupon(ctx context.Context, Req *content.UpdateCouponReq) (r *content.UpdateCouponResp, err error) {
	var _args UpdateCouponArgs
	_args.Req = Req
	var _result UpdateCouponResult
	if err = p.c.Call(ctx, "UpdateCoupon", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCoupon(ctx context.Context, Req *content.GetCouponReq) (r *content.GetCouponResp, err error) {
	var _args GetCouponArgs
	_args.Req = Req
	var _result GetCouponResult
	if err = p.c.Call(ctx, "GetCoupon", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCoupons(ctx context.Context, Req *content.GetCouponsReq) (r *content.GetCouponsResp, err error) {
	var _args GetCouponsArgs
	_args.Req = Req
	var _result GetCouponsResult
	if err = p.c.Call(ctx, "GetCoupons", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateOrder(ctx context.Context, Req *content.CreateOrderReq) (r *content.CreateOrderResp, err error) {
	var _args CreateOrderArgs
	_args.Req = Req
	var _result CreateOrderResult
	if err = p.c.Call(ctx, "CreateOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteOrder(ctx context.Context, Req *content.DeleteOrderReq) (r *content.DeleteOrderResp, err error) {
	var _args DeleteOrderArgs
	_args.Req = Req
	var _result DeleteOrderResult
	if err = p.c.Call(ctx, "DeleteOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateOrder(ctx context.Context, Req *content.UpdateOrderReq) (r *content.UpdateOrderResp, err error) {
	var _args UpdateOrderArgs
	_args.Req = Req
	var _result UpdateOrderResult
	if err = p.c.Call(ctx, "UpdateOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOrder(ctx context.Context, Req *content.GetOrderReq) (r *content.GetOrderResp, err error) {
	var _args GetOrderArgs
	_args.Req = Req
	var _result GetOrderResult
	if err = p.c.Call(ctx, "GetOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOrders(ctx context.Context, Req *content.GetOrdersReq) (r *content.GetOrdersResp, err error) {
	var _args GetOrdersArgs
	_args.Req = Req
	var _result GetOrdersResult
	if err = p.c.Call(ctx, "GetOrders", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
