// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.4
// source: cloudmind/content/common.proto

package content

import (
	context "context"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SortOptions int32

const (
	SortOptions_SortOptions_null         SortOptions = 0
	SortOptions_SortOptions_createAtDesc SortOptions = 1 // 创建时间排序
	SortOptions_SortOptions_createAtAsc  SortOptions = 2 // 创建时间排序
	SortOptions_SortOptions_updateAtDesc SortOptions = 3 // 修改时间排序
	SortOptions_SortOptions_updateAtAsc  SortOptions = 4 // 修改时间排序
)

// Enum value maps for SortOptions.
var (
	SortOptions_name = map[int32]string{
		0: "SortOptions_null",
		1: "SortOptions_createAtDesc",
		2: "SortOptions_createAtAsc",
		3: "SortOptions_updateAtDesc",
		4: "SortOptions_updateAtAsc",
	}
	SortOptions_value = map[string]int32{
		"SortOptions_null":         0,
		"SortOptions_createAtDesc": 1,
		"SortOptions_createAtAsc":  2,
		"SortOptions_updateAtDesc": 3,
		"SortOptions_updateAtAsc":  4,
	}
)

func (x SortOptions) Enum() *SortOptions {
	p := new(SortOptions)
	*p = x
	return p
}

func (x SortOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudmind_content_common_proto_enumTypes[0].Descriptor()
}

func (SortOptions) Type() protoreflect.EnumType {
	return &file_cloudmind_content_common_proto_enumTypes[0]
}

func (x SortOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOptions.Descriptor instead.
func (SortOptions) EnumDescriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{0}
}

type Deletion int32

const (
	Deletion_Deletion_null    Deletion = 0
	Deletion_Deletion_notDel  Deletion = 1 // 未删除
	Deletion_Deletion_softDel Deletion = 2 // 软删除
	Deletion_Deletion_hardDel Deletion = 3 // 彻底删除
)

// Enum value maps for Deletion.
var (
	Deletion_name = map[int32]string{
		0: "Deletion_null",
		1: "Deletion_notDel",
		2: "Deletion_softDel",
		3: "Deletion_hardDel",
	}
	Deletion_value = map[string]int32{
		"Deletion_null":    0,
		"Deletion_notDel":  1,
		"Deletion_softDel": 2,
		"Deletion_hardDel": 3,
	}
)

func (x Deletion) Enum() *Deletion {
	p := new(Deletion)
	*p = x
	return p
}

func (x Deletion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Deletion) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudmind_content_common_proto_enumTypes[1].Descriptor()
}

func (Deletion) Type() protoreflect.EnumType {
	return &file_cloudmind_content_common_proto_enumTypes[1]
}

func (x Deletion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Deletion.Descriptor instead.
func (Deletion) EnumDescriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{1}
}

type Space int32

const (
	Space_Space_null    Space = 0
	Space_Space_private Space = 1 // 个人空间
	Space_Space_public  Space = 2 // 社区空间
)

// Enum value maps for Space.
var (
	Space_name = map[int32]string{
		0: "Space_null",
		1: "Space_private",
		2: "Space_public",
	}
	Space_value = map[string]int32{
		"Space_null":    0,
		"Space_private": 1,
		"Space_public":  2,
	}
)

func (x Space) Enum() *Space {
	p := new(Space)
	*p = x
	return p
}

func (x Space) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Space) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudmind_content_common_proto_enumTypes[2].Descriptor()
}

func (Space) Type() protoreflect.EnumType {
	return &file_cloudmind_content_common_proto_enumTypes[2]
}

func (x Space) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Space.Descriptor instead.
func (Space) EnumDescriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{2}
}

type SetRelation int32

const (
	SetRelation_Set_null         SetRelation = 0
	SetRelation_Set_intersection SetRelation = 1 // 交集
	SetRelation_Set_unionSet     SetRelation = 2 // 并集
)

// Enum value maps for SetRelation.
var (
	SetRelation_name = map[int32]string{
		0: "Set_null",
		1: "Set_intersection",
		2: "Set_unionSet",
	}
	SetRelation_value = map[string]int32{
		"Set_null":         0,
		"Set_intersection": 1,
		"Set_unionSet":     2,
	}
)

func (x SetRelation) Enum() *SetRelation {
	p := new(SetRelation)
	*p = x
	return p
}

func (x SetRelation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetRelation) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudmind_content_common_proto_enumTypes[3].Descriptor()
}

func (SetRelation) Type() protoreflect.EnumType {
	return &file_cloudmind_content_common_proto_enumTypes[3]
}

func (x SetRelation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetRelation.Descriptor instead.
func (SetRelation) EnumDescriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{3}
}

type Validity int32

const (
	Validity_Validity_null       Validity = 0
	Validity_Validity_perpetuity Validity = 1
	Validity_Validity_temporary  Validity = 2
	Validity_Validity_expired    Validity = 3
)

// Enum value maps for Validity.
var (
	Validity_name = map[int32]string{
		0: "Validity_null",
		1: "Validity_perpetuity",
		2: "Validity_temporary",
		3: "Validity_expired",
	}
	Validity_value = map[string]int32{
		"Validity_null":       0,
		"Validity_perpetuity": 1,
		"Validity_temporary":  2,
		"Validity_expired":    3,
	}
)

func (x Validity) Enum() *Validity {
	p := new(Validity)
	*p = x
	return p
}

func (x Validity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Validity) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudmind_content_common_proto_enumTypes[4].Descriptor()
}

func (Validity) Type() protoreflect.EnumType {
	return &file_cloudmind_content_common_proto_enumTypes[4]
}

func (x Validity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Validity.Descriptor instead.
func (Validity) EnumDescriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{4}
}

type Folder int32

const (
	Folder_Folder_null Folder = 0
	Folder_Folder_Size Folder = -1
)

// Enum value maps for Folder.
var (
	Folder_name = map[int32]string{
		0:  "Folder_null",
		-1: "Folder_Size",
	}
	Folder_value = map[string]int32{
		"Folder_null": 0,
		"Folder_Size": -1,
	}
)

func (x Folder) Enum() *Folder {
	p := new(Folder)
	*p = x
	return p
}

func (x Folder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Folder) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudmind_content_common_proto_enumTypes[5].Descriptor()
}

func (Folder) Type() protoreflect.EnumType {
	return &file_cloudmind_content_common_proto_enumTypes[5]
}

func (x Folder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Folder.Descriptor instead.
func (Folder) EnumDescriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{5}
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId      string   `protobuf:"bytes,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
	UserId      string   `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type        string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Path        string   `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	FatherId    string   `protobuf:"bytes,6,opt,name=fatherId,proto3" json:"fatherId,omitempty"`
	SpaceSize   int64    `protobuf:"varint,7,opt,name=spaceSize,proto3" json:"spaceSize,omitempty"`
	Md5         string   `protobuf:"bytes,8,opt,name=md5,proto3" json:"md5,omitempty"`
	IsDel       int64    `protobuf:"varint,9,opt,name=isDel,proto3" json:"isDel,omitempty"`
	Zone        string   `protobuf:"bytes,10,opt,name=zone,proto3" json:"zone,omitempty"`
	SubZone     string   `protobuf:"bytes,11,opt,name=subZone,proto3" json:"subZone,omitempty"`
	Description string   `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	Labels      []string `protobuf:"bytes,13,rep,name=labels,proto3" json:"labels,omitempty"`
	CreateAt    int64    `protobuf:"varint,14,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpdateAt    int64    `protobuf:"varint,15,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
	DeleteAt    int64    `protobuf:"varint,16,opt,name=deleteAt,proto3" json:"deleteAt,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{0}
}

func (x *FileInfo) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *FileInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FileInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileInfo) GetFatherId() string {
	if x != nil {
		return x.FatherId
	}
	return ""
}

func (x *FileInfo) GetSpaceSize() int64 {
	if x != nil {
		return x.SpaceSize
	}
	return 0
}

func (x *FileInfo) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *FileInfo) GetIsDel() int64 {
	if x != nil {
		return x.IsDel
	}
	return 0
}

func (x *FileInfo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *FileInfo) GetSubZone() string {
	if x != nil {
		return x.SubZone
	}
	return ""
}

func (x *FileInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FileInfo) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FileInfo) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *FileInfo) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *FileInfo) GetDeleteAt() int64 {
	if x != nil {
		return x.DeleteAt
	}
	return 0
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId      string   `protobuf:"bytes,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
	UserId      string   `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type        string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Path        string   `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	FatherId    string   `protobuf:"bytes,6,opt,name=fatherId,proto3" json:"fatherId,omitempty"`
	SpaceSize   *int64   `protobuf:"varint,7,opt,name=spaceSize,proto3,oneof" json:"spaceSize,omitempty"`
	Md5         string   `protobuf:"bytes,8,opt,name=md5,proto3" json:"md5,omitempty"`
	IsDel       int64    `protobuf:"varint,9,opt,name=isDel,proto3" json:"isDel,omitempty"`
	Zone        string   `protobuf:"bytes,10,opt,name=zone,proto3" json:"zone,omitempty"`
	SubZone     string   `protobuf:"bytes,11,opt,name=subZone,proto3" json:"subZone,omitempty"`
	Description string   `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	Labels      []string `protobuf:"bytes,13,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{1}
}

func (x *File) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *File) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *File) GetFatherId() string {
	if x != nil {
		return x.FatherId
	}
	return ""
}

func (x *File) GetSpaceSize() int64 {
	if x != nil && x.SpaceSize != nil {
		return *x.SpaceSize
	}
	return 0
}

func (x *File) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *File) GetIsDel() int64 {
	if x != nil {
		return x.IsDel
	}
	return 0
}

func (x *File) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *File) GetSubZone() string {
	if x != nil {
		return x.SubZone
	}
	return ""
}

func (x *File) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *File) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type FileParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId    string `protobuf:"bytes,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
	Path      string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	SpaceSize int64  `protobuf:"varint,3,opt,name=spaceSize,proto3" json:"spaceSize,omitempty"`
}

func (x *FileParameter) Reset() {
	*x = FileParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileParameter) ProtoMessage() {}

func (x *FileParameter) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileParameter.ProtoReflect.Descriptor instead.
func (*FileParameter) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{2}
}

func (x *FileParameter) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *FileParameter) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileParameter) GetSpaceSize() int64 {
	if x != nil {
		return x.SpaceSize
	}
	return 0
}

type Zone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FatherId string `protobuf:"bytes,2,opt,name=fatherId,proto3" json:"fatherId,omitempty"`
	Value    string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Zone) Reset() {
	*x = Zone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Zone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Zone) ProtoMessage() {}

func (x *Zone) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Zone.ProtoReflect.Descriptor instead.
func (*Zone) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{3}
}

func (x *Zone) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Zone) GetFatherId() string {
	if x != nil {
		return x.FatherId
	}
	return ""
}

func (x *Zone) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ShareFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	UserId        string   `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Name          string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status        int64    `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	EffectiveTime int64    `protobuf:"varint,5,opt,name=effectiveTime,proto3" json:"effectiveTime,omitempty"`
	BrowseNumber  int64    `protobuf:"varint,6,opt,name=browseNumber,proto3" json:"browseNumber,omitempty"`
	CreateAt      int64    `protobuf:"varint,7,opt,name=createAt,proto3" json:"createAt,omitempty"`
	FileList      []string `protobuf:"bytes,8,rep,name=fileList,proto3" json:"fileList,omitempty"`
	Key           string   `protobuf:"bytes,9,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ShareFile) Reset() {
	*x = ShareFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareFile) ProtoMessage() {}

func (x *ShareFile) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareFile.ProtoReflect.Descriptor instead.
func (*ShareFile) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{4}
}

func (x *ShareFile) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ShareFile) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ShareFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShareFile) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ShareFile) GetEffectiveTime() int64 {
	if x != nil {
		return x.EffectiveTime
	}
	return 0
}

func (x *ShareFile) GetBrowseNumber() int64 {
	if x != nil {
		return x.BrowseNumber
	}
	return 0
}

func (x *ShareFile) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *ShareFile) GetFileList() []string {
	if x != nil {
		return x.FileList
	}
	return nil
}

func (x *ShareFile) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ShareCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status       int64  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	BrowseNumber int64  `protobuf:"varint,4,opt,name=browseNumber,proto3" json:"browseNumber,omitempty"`
	CreateAt     int64  `protobuf:"varint,5,opt,name=createAt,proto3" json:"createAt,omitempty"`
	Key          string `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ShareCode) Reset() {
	*x = ShareCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareCode) ProtoMessage() {}

func (x *ShareCode) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareCode.ProtoReflect.Descriptor instead.
func (*ShareCode) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{5}
}

func (x *ShareCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ShareCode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShareCode) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ShareCode) GetBrowseNumber() int64 {
	if x != nil {
		return x.BrowseNumber
	}
	return 0
}

func (x *ShareCode) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *ShareCode) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SearchField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Id          *string `protobuf:"bytes,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Tag         *string `protobuf:"bytes,3,opt,name=tag,proto3,oneof" json:"tag,omitempty"` // 仅限Post
	Text        *string `protobuf:"bytes,4,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Title       *string `protobuf:"bytes,5,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Description *string `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	ProductName *string `protobuf:"bytes,7,opt,name=productName,proto3,oneof" json:"productName,omitempty"`
}

func (x *SearchField) Reset() {
	*x = SearchField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchField) ProtoMessage() {}

func (x *SearchField) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchField.ProtoReflect.Descriptor instead.
func (*SearchField) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{6}
}

func (x *SearchField) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SearchField) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *SearchField) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *SearchField) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *SearchField) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *SearchField) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SearchField) GetProductName() string {
	if x != nil && x.ProductName != nil {
		return *x.ProductName
	}
	return ""
}

type SearchOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*SearchOptions_AllFieldsKey
	//	*SearchOptions_MultiFieldsKey
	Type isSearchOptions_Type `protobuf_oneof:"Type"`
}

func (x *SearchOptions) Reset() {
	*x = SearchOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOptions) ProtoMessage() {}

func (x *SearchOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOptions.ProtoReflect.Descriptor instead.
func (*SearchOptions) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{7}
}

func (m *SearchOptions) GetType() isSearchOptions_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SearchOptions) GetAllFieldsKey() string {
	if x, ok := x.GetType().(*SearchOptions_AllFieldsKey); ok {
		return x.AllFieldsKey
	}
	return ""
}

func (x *SearchOptions) GetMultiFieldsKey() *SearchField {
	if x, ok := x.GetType().(*SearchOptions_MultiFieldsKey); ok {
		return x.MultiFieldsKey
	}
	return nil
}

type isSearchOptions_Type interface {
	isSearchOptions_Type()
}

type SearchOptions_AllFieldsKey struct {
	AllFieldsKey string `protobuf:"bytes,1,opt,name=allFieldsKey,proto3,oneof"`
}

type SearchOptions_MultiFieldsKey struct {
	MultiFieldsKey *SearchField `protobuf:"bytes,2,opt,name=multiFieldsKey,proto3,oneof"`
}

func (*SearchOptions_AllFieldsKey) isSearchOptions_Type() {}

func (*SearchOptions_MultiFieldsKey) isSearchOptions_Type() {}

type FileFilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlyUserId       *string  `protobuf:"bytes,1,opt,name=onlyUserId,proto3,oneof" json:"onlyUserId,omitempty"`
	OnlyFileId       *string  `protobuf:"bytes,2,opt,name=onlyFileId,proto3,oneof" json:"onlyFileId,omitempty"`
	OnlyFatherId     *string  `protobuf:"bytes,3,opt,name=onlyFatherId,proto3,oneof" json:"onlyFatherId,omitempty"`
	OnlyZone         *string  `protobuf:"bytes,5,opt,name=onlyZone,proto3,oneof" json:"onlyZone,omitempty"`                  // 分区
	OnlySubZone      *string  `protobuf:"bytes,6,opt,name=onlySubZone,proto3,oneof" json:"onlySubZone,omitempty"`            // 子分区
	OnlyIsDel        *int64   `protobuf:"varint,7,opt,name=onlyIsDel,proto3,oneof" json:"onlyIsDel,omitempty"`               // 是否删除 1：未删除 2：软删除 3:彻底删除
	OnlyDocumentType *int64   `protobuf:"varint,8,opt,name=onlyDocumentType,proto3,oneof" json:"onlyDocumentType,omitempty"` // 操作类型 1：个人空间文件 2：公共空间文件
	OnlyType         []string `protobuf:"bytes,9,rep,name=onlyType,proto3" json:"onlyType,omitempty"`
	OnlyLabelId      *string  `protobuf:"bytes,10,opt,name=onlyLabelId,proto3,oneof" json:"onlyLabelId,omitempty"`
}

func (x *FileFilterOptions) Reset() {
	*x = FileFilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileFilterOptions) ProtoMessage() {}

func (x *FileFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileFilterOptions.ProtoReflect.Descriptor instead.
func (*FileFilterOptions) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{8}
}

func (x *FileFilterOptions) GetOnlyUserId() string {
	if x != nil && x.OnlyUserId != nil {
		return *x.OnlyUserId
	}
	return ""
}

func (x *FileFilterOptions) GetOnlyFileId() string {
	if x != nil && x.OnlyFileId != nil {
		return *x.OnlyFileId
	}
	return ""
}

func (x *FileFilterOptions) GetOnlyFatherId() string {
	if x != nil && x.OnlyFatherId != nil {
		return *x.OnlyFatherId
	}
	return ""
}

func (x *FileFilterOptions) GetOnlyZone() string {
	if x != nil && x.OnlyZone != nil {
		return *x.OnlyZone
	}
	return ""
}

func (x *FileFilterOptions) GetOnlySubZone() string {
	if x != nil && x.OnlySubZone != nil {
		return *x.OnlySubZone
	}
	return ""
}

func (x *FileFilterOptions) GetOnlyIsDel() int64 {
	if x != nil && x.OnlyIsDel != nil {
		return *x.OnlyIsDel
	}
	return 0
}

func (x *FileFilterOptions) GetOnlyDocumentType() int64 {
	if x != nil && x.OnlyDocumentType != nil {
		return *x.OnlyDocumentType
	}
	return 0
}

func (x *FileFilterOptions) GetOnlyType() []string {
	if x != nil {
		return x.OnlyType
	}
	return nil
}

func (x *FileFilterOptions) GetOnlyLabelId() string {
	if x != nil && x.OnlyLabelId != nil {
		return *x.OnlyLabelId
	}
	return ""
}

type ShareFileFilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlyCode   *string `protobuf:"bytes,1,opt,name=onlyCode,proto3,oneof" json:"onlyCode,omitempty"`
	OnlyUserId *string `protobuf:"bytes,2,opt,name=onlyUserId,proto3,oneof" json:"onlyUserId,omitempty"`
}

func (x *ShareFileFilterOptions) Reset() {
	*x = ShareFileFilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareFileFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareFileFilterOptions) ProtoMessage() {}

func (x *ShareFileFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareFileFilterOptions.ProtoReflect.Descriptor instead.
func (*ShareFileFilterOptions) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{9}
}

func (x *ShareFileFilterOptions) GetOnlyCode() string {
	if x != nil && x.OnlyCode != nil {
		return *x.OnlyCode
	}
	return ""
}

func (x *ShareFileFilterOptions) GetOnlyUserId() string {
	if x != nil && x.OnlyUserId != nil {
		return *x.OnlyUserId
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Sex         int64    `protobuf:"varint,3,opt,name=sex,proto3" json:"sex,omitempty"`
	FullName    string   `protobuf:"bytes,4,opt,name=fullName,proto3" json:"fullName,omitempty"`
	IdCard      string   `protobuf:"bytes,5,opt,name=idCard,proto3" json:"idCard,omitempty"`
	CreateTime  int64    `protobuf:"varint,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime  int64    `protobuf:"varint,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Description string   `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Url         string   `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	Labels      []string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{10}
}

func (x *User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetSex() int64 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *User) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *User) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *User) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *User) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *User) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *User) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *User) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Post struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostId     string   `protobuf:"bytes,1,opt,name=postId,proto3" json:"postId,omitempty"`
	UserId     string   `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Title      string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Text       string   `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Tags       []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	Status     int64    `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	Url        string   `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	CreateTime int64    `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime int64    `protobuf:"varint,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *Post) Reset() {
	*x = Post{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Post) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Post) ProtoMessage() {}

func (x *Post) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Post.ProtoReflect.Descriptor instead.
func (*Post) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{11}
}

func (x *Post) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

func (x *Post) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Post) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Post) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Post) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Post) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Post) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Post) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Post) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type PostFilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlyUserId      *string  `protobuf:"bytes,1,opt,name=onlyUserId,proto3,oneof" json:"onlyUserId,omitempty"`
	OnlyTitle       *string  `protobuf:"bytes,2,opt,name=onlyTitle,proto3,oneof" json:"onlyTitle,omitempty"`
	OnlyText        *string  `protobuf:"bytes,3,opt,name=onlyText,proto3,oneof" json:"onlyText,omitempty"`
	OnlyTags        []string `protobuf:"bytes,4,rep,name=onlyTags,proto3" json:"onlyTags,omitempty"`
	OnlySetRelation *int64   `protobuf:"varint,5,opt,name=onlySetRelation,proto3,oneof" json:"onlySetRelation,omitempty"`
	OnlyStatus      *int64   `protobuf:"varint,6,opt,name=onlyStatus,proto3,oneof" json:"onlyStatus,omitempty"`
}

func (x *PostFilterOptions) Reset() {
	*x = PostFilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostFilterOptions) ProtoMessage() {}

func (x *PostFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostFilterOptions.ProtoReflect.Descriptor instead.
func (*PostFilterOptions) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{12}
}

func (x *PostFilterOptions) GetOnlyUserId() string {
	if x != nil && x.OnlyUserId != nil {
		return *x.OnlyUserId
	}
	return ""
}

func (x *PostFilterOptions) GetOnlyTitle() string {
	if x != nil && x.OnlyTitle != nil {
		return *x.OnlyTitle
	}
	return ""
}

func (x *PostFilterOptions) GetOnlyText() string {
	if x != nil && x.OnlyText != nil {
		return *x.OnlyText
	}
	return ""
}

func (x *PostFilterOptions) GetOnlyTags() []string {
	if x != nil {
		return x.OnlyTags
	}
	return nil
}

func (x *PostFilterOptions) GetOnlySetRelation() int64 {
	if x != nil && x.OnlySetRelation != nil {
		return *x.OnlySetRelation
	}
	return 0
}

func (x *PostFilterOptions) GetOnlyStatus() int64 {
	if x != nil && x.OnlyStatus != nil {
		return *x.OnlyStatus
	}
	return 0
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId   string   `protobuf:"bytes,1,opt,name=productId,proto3" json:"productId,omitempty"`
	UserId      string   `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Status      int64    `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Urls        []string `protobuf:"bytes,6,rep,name=urls,proto3" json:"urls,omitempty"`
	Tags        []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Type        int64    `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`
	Price       int64    `protobuf:"varint,9,opt,name=price,proto3" json:"price,omitempty"`
	ProductSize int64    `protobuf:"varint,10,opt,name=productSize,proto3" json:"productSize,omitempty"`
	CreateTime  int64    `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime  int64    `protobuf:"varint,12,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{13}
}

func (x *Product) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *Product) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Product) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Product) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *Product) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Product) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Product) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Product) GetProductSize() int64 {
	if x != nil {
		return x.ProductSize
	}
	return 0
}

func (x *Product) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Product) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type ProductFilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlyUserId      *string  `protobuf:"bytes,1,opt,name=onlyUserId,proto3,oneof" json:"onlyUserId,omitempty"`
	OnlyProductId   *string  `protobuf:"bytes,2,opt,name=onlyProductId,proto3,oneof" json:"onlyProductId,omitempty"`
	OnlyProductIds  []string `protobuf:"bytes,3,rep,name=onlyProductIds,proto3" json:"onlyProductIds,omitempty"`
	OnlyTags        []string `protobuf:"bytes,6,rep,name=onlyTags,proto3" json:"onlyTags,omitempty"`
	OnlySetRelation *int64   `protobuf:"varint,7,opt,name=onlySetRelation,proto3,oneof" json:"onlySetRelation,omitempty"`
	OnlyStatus      *int64   `protobuf:"varint,8,opt,name=onlyStatus,proto3,oneof" json:"onlyStatus,omitempty"`
	OnlyType        *int64   `protobuf:"varint,9,opt,name=onlyType,proto3,oneof" json:"onlyType,omitempty"`
}

func (x *ProductFilterOptions) Reset() {
	*x = ProductFilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductFilterOptions) ProtoMessage() {}

func (x *ProductFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductFilterOptions.ProtoReflect.Descriptor instead.
func (*ProductFilterOptions) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{14}
}

func (x *ProductFilterOptions) GetOnlyUserId() string {
	if x != nil && x.OnlyUserId != nil {
		return *x.OnlyUserId
	}
	return ""
}

func (x *ProductFilterOptions) GetOnlyProductId() string {
	if x != nil && x.OnlyProductId != nil {
		return *x.OnlyProductId
	}
	return ""
}

func (x *ProductFilterOptions) GetOnlyProductIds() []string {
	if x != nil {
		return x.OnlyProductIds
	}
	return nil
}

func (x *ProductFilterOptions) GetOnlyTags() []string {
	if x != nil {
		return x.OnlyTags
	}
	return nil
}

func (x *ProductFilterOptions) GetOnlySetRelation() int64 {
	if x != nil && x.OnlySetRelation != nil {
		return *x.OnlySetRelation
	}
	return 0
}

func (x *ProductFilterOptions) GetOnlyStatus() int64 {
	if x != nil && x.OnlyStatus != nil {
		return *x.OnlyStatus
	}
	return 0
}

func (x *ProductFilterOptions) GetOnlyType() int64 {
	if x != nil && x.OnlyType != nil {
		return *x.OnlyType
	}
	return 0
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId     string `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`         // 订单ID
	UserId      string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`           // 用户ID
	ProductId   string `protobuf:"bytes,3,opt,name=productId,proto3" json:"productId,omitempty"`     // 商品ID
	Status      int64  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`          // 订单状态
	SumPrice    int64  `protobuf:"varint,5,opt,name=sumPrice,proto3" json:"sumPrice,omitempty"`      // 订单总价
	ProductName string `protobuf:"bytes,6,opt,name=productName,proto3" json:"productName,omitempty"` // 用于搜索
	CreateTime  int64  `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime,omitempty"`  // 订单创建时间
	UpdateTime  int64  `protobuf:"varint,8,opt,name=updateTime,proto3" json:"updateTime,omitempty"`  // 订单修改时间
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{15}
}

func (x *Order) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *Order) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Order) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *Order) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Order) GetSumPrice() int64 {
	if x != nil {
		return x.SumPrice
	}
	return 0
}

func (x *Order) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *Order) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Order) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type OrderFilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlyUserId    *string  `protobuf:"bytes,1,opt,name=onlyUserId,proto3,oneof" json:"onlyUserId,omitempty"`       // 用户ID
	OnlyOrderId   *string  `protobuf:"bytes,2,opt,name=onlyOrderId,proto3,oneof" json:"onlyOrderId,omitempty"`     // 订单IDs
	OnlyOrderIds  []string `protobuf:"bytes,3,rep,name=onlyOrderIds,proto3" json:"onlyOrderIds,omitempty"`         // 订单IDs
	OnlyProductId *string  `protobuf:"bytes,4,opt,name=onlyProductId,proto3,oneof" json:"onlyProductId,omitempty"` // 订单对应商品ID
	OnlyStatus    *int64   `protobuf:"varint,5,opt,name=onlyStatus,proto3,oneof" json:"onlyStatus,omitempty"`      // 订单状态
}

func (x *OrderFilterOptions) Reset() {
	*x = OrderFilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderFilterOptions) ProtoMessage() {}

func (x *OrderFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderFilterOptions.ProtoReflect.Descriptor instead.
func (*OrderFilterOptions) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{16}
}

func (x *OrderFilterOptions) GetOnlyUserId() string {
	if x != nil && x.OnlyUserId != nil {
		return *x.OnlyUserId
	}
	return ""
}

func (x *OrderFilterOptions) GetOnlyOrderId() string {
	if x != nil && x.OnlyOrderId != nil {
		return *x.OnlyOrderId
	}
	return ""
}

func (x *OrderFilterOptions) GetOnlyOrderIds() []string {
	if x != nil {
		return x.OnlyOrderIds
	}
	return nil
}

func (x *OrderFilterOptions) GetOnlyProductId() string {
	if x != nil && x.OnlyProductId != nil {
		return *x.OnlyProductId
	}
	return ""
}

func (x *OrderFilterOptions) GetOnlyStatus() int64 {
	if x != nil && x.OnlyStatus != nil {
		return *x.OnlyStatus
	}
	return 0
}

type Coupon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CouponId      string `protobuf:"bytes,1,opt,name=couponId,proto3" json:"couponId,omitempty"`
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Status        int64  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime    int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	ExpireTime    int64  `protobuf:"varint,6,opt,name=expireTime,proto3" json:"expireTime,omitempty"`
	Name          string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Description   string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	LowSumPrice   *int64 `protobuf:"varint,9,opt,name=lowSumPrice,proto3,oneof" json:"lowSumPrice,omitempty"`      // 优惠券使用的最低总价格
	ProductType   *int64 `protobuf:"varint,10,opt,name=productType,proto3,oneof" json:"productType,omitempty"`     // 优惠券使用的商品类型
	Discount      *int64 `protobuf:"varint,11,opt,name=discount,proto3,oneof" json:"discount,omitempty"`           // 优惠券折扣 打多少折
	DiscountPrice *int64 `protobuf:"varint,12,opt,name=discountPrice,proto3,oneof" json:"discountPrice,omitempty"` // 优惠券折扣价格 减多少钱
}

func (x *Coupon) Reset() {
	*x = Coupon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coupon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coupon) ProtoMessage() {}

func (x *Coupon) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coupon.ProtoReflect.Descriptor instead.
func (*Coupon) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{17}
}

func (x *Coupon) GetCouponId() string {
	if x != nil {
		return x.CouponId
	}
	return ""
}

func (x *Coupon) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Coupon) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Coupon) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Coupon) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *Coupon) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Coupon) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Coupon) GetLowSumPrice() int64 {
	if x != nil && x.LowSumPrice != nil {
		return *x.LowSumPrice
	}
	return 0
}

func (x *Coupon) GetProductType() int64 {
	if x != nil && x.ProductType != nil {
		return *x.ProductType
	}
	return 0
}

func (x *Coupon) GetDiscount() int64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *Coupon) GetDiscountPrice() int64 {
	if x != nil && x.DiscountPrice != nil {
		return *x.DiscountPrice
	}
	return 0
}

type CouponFilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlyUserId      *string  `protobuf:"bytes,1,opt,name=onlyUserId,proto3,oneof" json:"onlyUserId,omitempty"`
	OnlyCouponId    *string  `protobuf:"bytes,2,opt,name=onlyCouponId,proto3,oneof" json:"onlyCouponId,omitempty"`
	OnlyCouponIds   []string `protobuf:"bytes,3,rep,name=onlyCouponIds,proto3" json:"onlyCouponIds,omitempty"`
	OnlyProductType *int64   `protobuf:"varint,4,opt,name=onlyProductType,proto3,oneof" json:"onlyProductType,omitempty"`
	OnlyStatus      *int64   `protobuf:"varint,5,opt,name=onlyStatus,proto3,oneof" json:"onlyStatus,omitempty"`
}

func (x *CouponFilterOptions) Reset() {
	*x = CouponFilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponFilterOptions) ProtoMessage() {}

func (x *CouponFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponFilterOptions.ProtoReflect.Descriptor instead.
func (*CouponFilterOptions) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{18}
}

func (x *CouponFilterOptions) GetOnlyUserId() string {
	if x != nil && x.OnlyUserId != nil {
		return *x.OnlyUserId
	}
	return ""
}

func (x *CouponFilterOptions) GetOnlyCouponId() string {
	if x != nil && x.OnlyCouponId != nil {
		return *x.OnlyCouponId
	}
	return ""
}

func (x *CouponFilterOptions) GetOnlyCouponIds() []string {
	if x != nil {
		return x.OnlyCouponIds
	}
	return nil
}

func (x *CouponFilterOptions) GetOnlyProductType() int64 {
	if x != nil && x.OnlyProductType != nil {
		return *x.OnlyProductType
	}
	return 0
}

func (x *CouponFilterOptions) GetOnlyStatus() int64 {
	if x != nil && x.OnlyStatus != nil {
		return *x.OnlyStatus
	}
	return 0
}

type LabelFilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LabelFilterOptions) Reset() {
	*x = LabelFilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelFilterOptions) ProtoMessage() {}

func (x *LabelFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelFilterOptions.ProtoReflect.Descriptor instead.
func (*LabelFilterOptions) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{19}
}

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId   string   `protobuf:"bytes,1,opt,name=itemId,proto3" json:"itemId,omitempty"`
	IsHidden bool     `protobuf:"varint,2,opt,name=isHidden,proto3" json:"isHidden,omitempty"`
	Labels   []string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	Category string   `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	Comment  string   `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{20}
}

func (x *Item) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *Item) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

func (x *Item) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Item) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Item) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type FeedBack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedbackType string `protobuf:"bytes,1,opt,name=feedbackType,proto3" json:"feedbackType,omitempty"`
	UserId       string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	ItemId       string `protobuf:"bytes,3,opt,name=itemId,proto3" json:"itemId,omitempty"`
}

func (x *FeedBack) Reset() {
	*x = FeedBack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedBack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedBack) ProtoMessage() {}

func (x *FeedBack) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedBack.ProtoReflect.Descriptor instead.
func (*FeedBack) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{21}
}

func (x *FeedBack) GetFeedbackType() string {
	if x != nil {
		return x.FeedbackType
	}
	return ""
}

func (x *FeedBack) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FeedBack) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

type UserFilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []string `protobuf:"bytes,1,rep,name=userIds,proto3" json:"userIds,omitempty"`
}

func (x *UserFilterOptions) Reset() {
	*x = UserFilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_content_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFilterOptions) ProtoMessage() {}

func (x *UserFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_content_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFilterOptions.ProtoReflect.Descriptor instead.
func (*UserFilterOptions) Descriptor() ([]byte, []int) {
	return file_cloudmind_content_common_proto_rawDescGZIP(), []int{22}
}

func (x *UserFilterOptions) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

var File_cloudmind_content_common_proto protoreflect.FileDescriptor

var file_cloudmind_content_common_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x94, 0x03, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x44, 0x65,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x22, 0xcf, 0x02, 0x0a, 0x04, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x09, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x59, 0x0a, 0x0d,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x48, 0x0a, 0x04, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xf7, 0x01, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x9d, 0x01, 0x0a, 0x09,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x9f, 0x02, 0x0a, 0x0b,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x74, 0x61, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x87, 0x01,
	0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x24, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52,
	0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4b, 0x65, 0x79, 0x42,
	0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe4, 0x03, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a,
	0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x46,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x5a, 0x6f, 0x6e, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x75,
	0x62, 0x5a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x79,
	0x49, 0x73, 0x44, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x09, 0x6f,
	0x6e, 0x6c, 0x79, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x6f,
	0x6e, 0x6c, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x10, 0x6f, 0x6e, 0x6c, 0x79, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x6e, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x6e, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x5a, 0x6f, 0x6e, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x7a,
	0x0a, 0x16, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x6e, 0x6c, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e,
	0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x84, 0x02, 0x0a, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65,
	0x78, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x22, 0xde, 0x01, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xb9, 0x02, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x54, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2d, 0x0a,
	0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x04, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x54, 0x65, 0x78, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc1,
	0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72,
	0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xf0, 0x02, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x6f,
	0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e, 0x6f,
	0x6e, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x54, 0x61, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x2d, 0x0a, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0f, 0x6f, 0x6e, 0x6c, 0x79,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x03, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x6d, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x75, 0x6d, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x94, 0x02, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0a,
	0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x6e, 0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x0d,
	0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0a, 0x6f,
	0x6e, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa3, 0x03, 0x0a,
	0x06, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x6c, 0x6f, 0x77,
	0x53, 0x75, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x03, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x6d, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x6f, 0x6e,
	0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6e, 0x6c, 0x79,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x2d,
	0x0a, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x03, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x49, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x04,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x5e, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x42, 0x61,
	0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x2a, 0x99, 0x01, 0x0a, 0x0b, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x44, 0x65, 0x73, 0x63, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x6f, 0x72,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x41, 0x73, 0x63, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x41, 0x73, 0x63, 0x10,
	0x04, 0x2a, 0x5e, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74,
	0x44, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x10,
	0x03, 0x2a, 0x3c, 0x0a, 0x05, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x10, 0x02, 0x2a,
	0x43, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x10, 0x02, 0x2a, 0x64, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x12, 0x11, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x69, 0x74, 0x79, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x72, 0x79, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x03, 0x2a, 0x33, 0x0a, 0x06, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x0b, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x53, 0x69, 0x7a, 0x65, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x42,
	0x48, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x53, 0x74, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2d, 0x69, 0x64, 0x6c, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x6b, 0x69,
	0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e,
	0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_cloudmind_content_common_proto_rawDescOnce sync.Once
	file_cloudmind_content_common_proto_rawDescData = file_cloudmind_content_common_proto_rawDesc
)

func file_cloudmind_content_common_proto_rawDescGZIP() []byte {
	file_cloudmind_content_common_proto_rawDescOnce.Do(func() {
		file_cloudmind_content_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloudmind_content_common_proto_rawDescData)
	})
	return file_cloudmind_content_common_proto_rawDescData
}

var file_cloudmind_content_common_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_cloudmind_content_common_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_cloudmind_content_common_proto_goTypes = []interface{}{
	(SortOptions)(0),               // 0: cloudmind.content.SortOptions
	(Deletion)(0),                  // 1: cloudmind.content.Deletion
	(Space)(0),                     // 2: cloudmind.content.Space
	(SetRelation)(0),               // 3: cloudmind.content.SetRelation
	(Validity)(0),                  // 4: cloudmind.content.Validity
	(Folder)(0),                    // 5: cloudmind.content.Folder
	(*FileInfo)(nil),               // 6: cloudmind.content.FileInfo
	(*File)(nil),                   // 7: cloudmind.content.File
	(*FileParameter)(nil),          // 8: cloudmind.content.FileParameter
	(*Zone)(nil),                   // 9: cloudmind.content.Zone
	(*ShareFile)(nil),              // 10: cloudmind.content.ShareFile
	(*ShareCode)(nil),              // 11: cloudmind.content.ShareCode
	(*SearchField)(nil),            // 12: cloudmind.content.SearchField
	(*SearchOptions)(nil),          // 13: cloudmind.content.SearchOptions
	(*FileFilterOptions)(nil),      // 14: cloudmind.content.FileFilterOptions
	(*ShareFileFilterOptions)(nil), // 15: cloudmind.content.ShareFileFilterOptions
	(*User)(nil),                   // 16: cloudmind.content.User
	(*Post)(nil),                   // 17: cloudmind.content.Post
	(*PostFilterOptions)(nil),      // 18: cloudmind.content.PostFilterOptions
	(*Product)(nil),                // 19: cloudmind.content.Product
	(*ProductFilterOptions)(nil),   // 20: cloudmind.content.ProductFilterOptions
	(*Order)(nil),                  // 21: cloudmind.content.Order
	(*OrderFilterOptions)(nil),     // 22: cloudmind.content.OrderFilterOptions
	(*Coupon)(nil),                 // 23: cloudmind.content.Coupon
	(*CouponFilterOptions)(nil),    // 24: cloudmind.content.CouponFilterOptions
	(*LabelFilterOptions)(nil),     // 25: cloudmind.content.LabelFilterOptions
	(*Item)(nil),                   // 26: cloudmind.content.Item
	(*FeedBack)(nil),               // 27: cloudmind.content.FeedBack
	(*UserFilterOptions)(nil),      // 28: cloudmind.content.UserFilterOptions
}
var file_cloudmind_content_common_proto_depIdxs = []int32{
	12, // 0: cloudmind.content.SearchOptions.multiFieldsKey:type_name -> cloudmind.content.SearchField
	1,  // [1:1] is the sub-list for method output_type
	1,  // [1:1] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_cloudmind_content_common_proto_init() }
func file_cloudmind_content_common_proto_init() {
	if File_cloudmind_content_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloudmind_content_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Zone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileFilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareFileFilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Post); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostFilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductFilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderFilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coupon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponFilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelFilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedBack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_content_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cloudmind_content_common_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_cloudmind_content_common_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_cloudmind_content_common_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SearchOptions_AllFieldsKey)(nil),
		(*SearchOptions_MultiFieldsKey)(nil),
	}
	file_cloudmind_content_common_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_cloudmind_content_common_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_cloudmind_content_common_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_cloudmind_content_common_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_cloudmind_content_common_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_cloudmind_content_common_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_cloudmind_content_common_proto_msgTypes[18].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloudmind_content_common_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloudmind_content_common_proto_goTypes,
		DependencyIndexes: file_cloudmind_content_common_proto_depIdxs,
		EnumInfos:         file_cloudmind_content_common_proto_enumTypes,
		MessageInfos:      file_cloudmind_content_common_proto_msgTypes,
	}.Build()
	File_cloudmind_content_common_proto = out.File
	file_cloudmind_content_common_proto_rawDesc = nil
	file_cloudmind_content_common_proto_goTypes = nil
	file_cloudmind_content_common_proto_depIdxs = nil
}

var _ context.Context
