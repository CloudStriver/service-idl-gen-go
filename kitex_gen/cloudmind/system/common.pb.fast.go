// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package system

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Notification) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Notification[number], err)
}

func (x *Notification) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.NotificationId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Notification) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.TargetUserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Notification) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.SourceUserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Notification) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.SourceContentId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Notification) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.TargetType, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Notification) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Notification) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Text, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Notification) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Slider) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Slider[number], err)
}

func (x *Slider) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.SliderId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Slider) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ImageUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Slider) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.LinkUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Slider) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Slider) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.IsPublic, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Slider) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Slider) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *NotificationInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_NotificationInfo[number], err)
}

func (x *NotificationInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.TargetUserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *NotificationInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SourceUserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *NotificationInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.SourceContentId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *NotificationInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.TargetType, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *NotificationInfo) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *NotificationInfo) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Text, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *NotificationInfo) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.IsRead, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Notification) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *Notification) fastWriteField1(buf []byte) (offset int) {
	if x.NotificationId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetNotificationId())
	return offset
}

func (x *Notification) fastWriteField2(buf []byte) (offset int) {
	if x.TargetUserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTargetUserId())
	return offset
}

func (x *Notification) fastWriteField3(buf []byte) (offset int) {
	if x.SourceUserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetSourceUserId())
	return offset
}

func (x *Notification) fastWriteField4(buf []byte) (offset int) {
	if x.SourceContentId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetSourceContentId())
	return offset
}

func (x *Notification) fastWriteField5(buf []byte) (offset int) {
	if x.TargetType == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetTargetType())
	return offset
}

func (x *Notification) fastWriteField6(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetType())
	return offset
}

func (x *Notification) fastWriteField7(buf []byte) (offset int) {
	if x.Text == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetText())
	return offset
}

func (x *Notification) fastWriteField8(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetCreateTime())
	return offset
}

func (x *Slider) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *Slider) fastWriteField1(buf []byte) (offset int) {
	if x.SliderId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetSliderId())
	return offset
}

func (x *Slider) fastWriteField2(buf []byte) (offset int) {
	if x.ImageUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetImageUrl())
	return offset
}

func (x *Slider) fastWriteField3(buf []byte) (offset int) {
	if x.LinkUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetLinkUrl())
	return offset
}

func (x *Slider) fastWriteField4(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetType())
	return offset
}

func (x *Slider) fastWriteField5(buf []byte) (offset int) {
	if x.IsPublic == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetIsPublic())
	return offset
}

func (x *Slider) fastWriteField6(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetCreateTime())
	return offset
}

func (x *Slider) fastWriteField7(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetUpdateTime())
	return offset
}

func (x *NotificationInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *NotificationInfo) fastWriteField1(buf []byte) (offset int) {
	if x.TargetUserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetTargetUserId())
	return offset
}

func (x *NotificationInfo) fastWriteField2(buf []byte) (offset int) {
	if x.SourceUserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSourceUserId())
	return offset
}

func (x *NotificationInfo) fastWriteField3(buf []byte) (offset int) {
	if x.SourceContentId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetSourceContentId())
	return offset
}

func (x *NotificationInfo) fastWriteField4(buf []byte) (offset int) {
	if x.TargetType == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetTargetType())
	return offset
}

func (x *NotificationInfo) fastWriteField5(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetType())
	return offset
}

func (x *NotificationInfo) fastWriteField6(buf []byte) (offset int) {
	if x.Text == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetText())
	return offset
}

func (x *NotificationInfo) fastWriteField7(buf []byte) (offset int) {
	if !x.IsRead {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 7, x.GetIsRead())
	return offset
}

func (x *Notification) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *Notification) sizeField1() (n int) {
	if x.NotificationId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetNotificationId())
	return n
}

func (x *Notification) sizeField2() (n int) {
	if x.TargetUserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTargetUserId())
	return n
}

func (x *Notification) sizeField3() (n int) {
	if x.SourceUserId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetSourceUserId())
	return n
}

func (x *Notification) sizeField4() (n int) {
	if x.SourceContentId == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetSourceContentId())
	return n
}

func (x *Notification) sizeField5() (n int) {
	if x.TargetType == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetTargetType())
	return n
}

func (x *Notification) sizeField6() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetType())
	return n
}

func (x *Notification) sizeField7() (n int) {
	if x.Text == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetText())
	return n
}

func (x *Notification) sizeField8() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetCreateTime())
	return n
}

func (x *Slider) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *Slider) sizeField1() (n int) {
	if x.SliderId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetSliderId())
	return n
}

func (x *Slider) sizeField2() (n int) {
	if x.ImageUrl == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetImageUrl())
	return n
}

func (x *Slider) sizeField3() (n int) {
	if x.LinkUrl == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetLinkUrl())
	return n
}

func (x *Slider) sizeField4() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetType())
	return n
}

func (x *Slider) sizeField5() (n int) {
	if x.IsPublic == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetIsPublic())
	return n
}

func (x *Slider) sizeField6() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetCreateTime())
	return n
}

func (x *Slider) sizeField7() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetUpdateTime())
	return n
}

func (x *NotificationInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *NotificationInfo) sizeField1() (n int) {
	if x.TargetUserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetTargetUserId())
	return n
}

func (x *NotificationInfo) sizeField2() (n int) {
	if x.SourceUserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetSourceUserId())
	return n
}

func (x *NotificationInfo) sizeField3() (n int) {
	if x.SourceContentId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetSourceContentId())
	return n
}

func (x *NotificationInfo) sizeField4() (n int) {
	if x.TargetType == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetTargetType())
	return n
}

func (x *NotificationInfo) sizeField5() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetType())
	return n
}

func (x *NotificationInfo) sizeField6() (n int) {
	if x.Text == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetText())
	return n
}

func (x *NotificationInfo) sizeField7() (n int) {
	if !x.IsRead {
		return n
	}
	n += fastpb.SizeBool(7, x.GetIsRead())
	return n
}

var fieldIDToName_Notification = map[int32]string{
	1: "NotificationId",
	2: "TargetUserId",
	3: "SourceUserId",
	4: "SourceContentId",
	5: "TargetType",
	6: "Type",
	7: "Text",
	8: "CreateTime",
}

var fieldIDToName_Slider = map[int32]string{
	1: "SliderId",
	2: "ImageUrl",
	3: "LinkUrl",
	4: "Type",
	5: "IsPublic",
	6: "CreateTime",
	7: "UpdateTime",
}

var fieldIDToName_NotificationInfo = map[int32]string{
	1: "TargetUserId",
	2: "SourceUserId",
	3: "SourceContentId",
	4: "TargetType",
	5: "Type",
	6: "Text",
	7: "IsRead",
}
