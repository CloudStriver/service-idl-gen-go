// Code generated by Kitex v0.8.0. DO NOT EDIT.

package systemservice

import (
	"context"
	system "github.com/CloudStriver/service-idl-gen-go/kitex_gen/cloudmind/system"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return systemServiceServiceInfo
}

var systemServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "SystemService"
	handlerType := (*system.SystemService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetNotifications":     kitex.NewMethodInfo(getNotificationsHandler, newGetNotificationsArgs, newGetNotificationsResult, false),
		"CleanNotification":    kitex.NewMethodInfo(cleanNotificationHandler, newCleanNotificationArgs, newCleanNotificationResult, false),
		"GetNotificationCount": kitex.NewMethodInfo(getNotificationCountHandler, newGetNotificationCountArgs, newGetNotificationCountResult, false),
		"ReadNotification":     kitex.NewMethodInfo(readNotificationHandler, newReadNotificationArgs, newReadNotificationResult, false),
		"CreateNotification":   kitex.NewMethodInfo(createNotificationHandler, newCreateNotificationArgs, newCreateNotificationResult, false),
		"ReadNotifications":    kitex.NewMethodInfo(readNotificationsHandler, newReadNotificationsArgs, newReadNotificationsResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "cloudmind.system",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func getNotificationsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.GetNotificationsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).GetNotifications(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetNotificationsArgs:
		success, err := handler.(system.SystemService).GetNotifications(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetNotificationsResult)
		realResult.Success = success
	}
	return nil
}
func newGetNotificationsArgs() interface{} {
	return &GetNotificationsArgs{}
}

func newGetNotificationsResult() interface{} {
	return &GetNotificationsResult{}
}

type GetNotificationsArgs struct {
	Req *system.GetNotificationsReq
}

func (p *GetNotificationsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.GetNotificationsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetNotificationsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetNotificationsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetNotificationsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetNotificationsArgs) Unmarshal(in []byte) error {
	msg := new(system.GetNotificationsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetNotificationsArgs_Req_DEFAULT *system.GetNotificationsReq

func (p *GetNotificationsArgs) GetReq() *system.GetNotificationsReq {
	if !p.IsSetReq() {
		return GetNotificationsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetNotificationsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetNotificationsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetNotificationsResult struct {
	Success *system.GetNotificationsResp
}

var GetNotificationsResult_Success_DEFAULT *system.GetNotificationsResp

func (p *GetNotificationsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.GetNotificationsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetNotificationsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetNotificationsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetNotificationsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetNotificationsResult) Unmarshal(in []byte) error {
	msg := new(system.GetNotificationsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetNotificationsResult) GetSuccess() *system.GetNotificationsResp {
	if !p.IsSetSuccess() {
		return GetNotificationsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetNotificationsResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.GetNotificationsResp)
}

func (p *GetNotificationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetNotificationsResult) GetResult() interface{} {
	return p.Success
}

func cleanNotificationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.CleanNotificationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).CleanNotification(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CleanNotificationArgs:
		success, err := handler.(system.SystemService).CleanNotification(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CleanNotificationResult)
		realResult.Success = success
	}
	return nil
}
func newCleanNotificationArgs() interface{} {
	return &CleanNotificationArgs{}
}

func newCleanNotificationResult() interface{} {
	return &CleanNotificationResult{}
}

type CleanNotificationArgs struct {
	Req *system.CleanNotificationReq
}

func (p *CleanNotificationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.CleanNotificationReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CleanNotificationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CleanNotificationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CleanNotificationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CleanNotificationArgs) Unmarshal(in []byte) error {
	msg := new(system.CleanNotificationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CleanNotificationArgs_Req_DEFAULT *system.CleanNotificationReq

func (p *CleanNotificationArgs) GetReq() *system.CleanNotificationReq {
	if !p.IsSetReq() {
		return CleanNotificationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CleanNotificationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CleanNotificationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CleanNotificationResult struct {
	Success *system.CleanNotificationResp
}

var CleanNotificationResult_Success_DEFAULT *system.CleanNotificationResp

func (p *CleanNotificationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.CleanNotificationResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CleanNotificationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CleanNotificationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CleanNotificationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CleanNotificationResult) Unmarshal(in []byte) error {
	msg := new(system.CleanNotificationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CleanNotificationResult) GetSuccess() *system.CleanNotificationResp {
	if !p.IsSetSuccess() {
		return CleanNotificationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CleanNotificationResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.CleanNotificationResp)
}

func (p *CleanNotificationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CleanNotificationResult) GetResult() interface{} {
	return p.Success
}

func getNotificationCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.GetNotificationCountReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).GetNotificationCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetNotificationCountArgs:
		success, err := handler.(system.SystemService).GetNotificationCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetNotificationCountResult)
		realResult.Success = success
	}
	return nil
}
func newGetNotificationCountArgs() interface{} {
	return &GetNotificationCountArgs{}
}

func newGetNotificationCountResult() interface{} {
	return &GetNotificationCountResult{}
}

type GetNotificationCountArgs struct {
	Req *system.GetNotificationCountReq
}

func (p *GetNotificationCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.GetNotificationCountReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetNotificationCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetNotificationCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetNotificationCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetNotificationCountArgs) Unmarshal(in []byte) error {
	msg := new(system.GetNotificationCountReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetNotificationCountArgs_Req_DEFAULT *system.GetNotificationCountReq

func (p *GetNotificationCountArgs) GetReq() *system.GetNotificationCountReq {
	if !p.IsSetReq() {
		return GetNotificationCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetNotificationCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetNotificationCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetNotificationCountResult struct {
	Success *system.GetNotificationCountResp
}

var GetNotificationCountResult_Success_DEFAULT *system.GetNotificationCountResp

func (p *GetNotificationCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.GetNotificationCountResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetNotificationCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetNotificationCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetNotificationCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetNotificationCountResult) Unmarshal(in []byte) error {
	msg := new(system.GetNotificationCountResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetNotificationCountResult) GetSuccess() *system.GetNotificationCountResp {
	if !p.IsSetSuccess() {
		return GetNotificationCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetNotificationCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.GetNotificationCountResp)
}

func (p *GetNotificationCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetNotificationCountResult) GetResult() interface{} {
	return p.Success
}

func readNotificationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.ReadNotificationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).ReadNotification(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ReadNotificationArgs:
		success, err := handler.(system.SystemService).ReadNotification(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ReadNotificationResult)
		realResult.Success = success
	}
	return nil
}
func newReadNotificationArgs() interface{} {
	return &ReadNotificationArgs{}
}

func newReadNotificationResult() interface{} {
	return &ReadNotificationResult{}
}

type ReadNotificationArgs struct {
	Req *system.ReadNotificationReq
}

func (p *ReadNotificationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.ReadNotificationReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ReadNotificationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ReadNotificationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ReadNotificationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ReadNotificationArgs) Unmarshal(in []byte) error {
	msg := new(system.ReadNotificationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ReadNotificationArgs_Req_DEFAULT *system.ReadNotificationReq

func (p *ReadNotificationArgs) GetReq() *system.ReadNotificationReq {
	if !p.IsSetReq() {
		return ReadNotificationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ReadNotificationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ReadNotificationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ReadNotificationResult struct {
	Success *system.ReadNotificationResp
}

var ReadNotificationResult_Success_DEFAULT *system.ReadNotificationResp

func (p *ReadNotificationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.ReadNotificationResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ReadNotificationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ReadNotificationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ReadNotificationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ReadNotificationResult) Unmarshal(in []byte) error {
	msg := new(system.ReadNotificationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ReadNotificationResult) GetSuccess() *system.ReadNotificationResp {
	if !p.IsSetSuccess() {
		return ReadNotificationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ReadNotificationResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.ReadNotificationResp)
}

func (p *ReadNotificationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ReadNotificationResult) GetResult() interface{} {
	return p.Success
}

func createNotificationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.CreateNotificationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).CreateNotification(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateNotificationArgs:
		success, err := handler.(system.SystemService).CreateNotification(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateNotificationResult)
		realResult.Success = success
	}
	return nil
}
func newCreateNotificationArgs() interface{} {
	return &CreateNotificationArgs{}
}

func newCreateNotificationResult() interface{} {
	return &CreateNotificationResult{}
}

type CreateNotificationArgs struct {
	Req *system.CreateNotificationReq
}

func (p *CreateNotificationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.CreateNotificationReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateNotificationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateNotificationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateNotificationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateNotificationArgs) Unmarshal(in []byte) error {
	msg := new(system.CreateNotificationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateNotificationArgs_Req_DEFAULT *system.CreateNotificationReq

func (p *CreateNotificationArgs) GetReq() *system.CreateNotificationReq {
	if !p.IsSetReq() {
		return CreateNotificationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateNotificationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateNotificationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateNotificationResult struct {
	Success *system.CreateNotificationResp
}

var CreateNotificationResult_Success_DEFAULT *system.CreateNotificationResp

func (p *CreateNotificationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.CreateNotificationResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateNotificationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateNotificationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateNotificationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateNotificationResult) Unmarshal(in []byte) error {
	msg := new(system.CreateNotificationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateNotificationResult) GetSuccess() *system.CreateNotificationResp {
	if !p.IsSetSuccess() {
		return CreateNotificationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateNotificationResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.CreateNotificationResp)
}

func (p *CreateNotificationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateNotificationResult) GetResult() interface{} {
	return p.Success
}

func readNotificationsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.ReadNotificationsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).ReadNotifications(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ReadNotificationsArgs:
		success, err := handler.(system.SystemService).ReadNotifications(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ReadNotificationsResult)
		realResult.Success = success
	}
	return nil
}
func newReadNotificationsArgs() interface{} {
	return &ReadNotificationsArgs{}
}

func newReadNotificationsResult() interface{} {
	return &ReadNotificationsResult{}
}

type ReadNotificationsArgs struct {
	Req *system.ReadNotificationsReq
}

func (p *ReadNotificationsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.ReadNotificationsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ReadNotificationsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ReadNotificationsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ReadNotificationsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ReadNotificationsArgs) Unmarshal(in []byte) error {
	msg := new(system.ReadNotificationsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ReadNotificationsArgs_Req_DEFAULT *system.ReadNotificationsReq

func (p *ReadNotificationsArgs) GetReq() *system.ReadNotificationsReq {
	if !p.IsSetReq() {
		return ReadNotificationsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ReadNotificationsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ReadNotificationsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ReadNotificationsResult struct {
	Success *system.ReadNotificationsResp
}

var ReadNotificationsResult_Success_DEFAULT *system.ReadNotificationsResp

func (p *ReadNotificationsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.ReadNotificationsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ReadNotificationsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ReadNotificationsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ReadNotificationsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ReadNotificationsResult) Unmarshal(in []byte) error {
	msg := new(system.ReadNotificationsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ReadNotificationsResult) GetSuccess() *system.ReadNotificationsResp {
	if !p.IsSetSuccess() {
		return ReadNotificationsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ReadNotificationsResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.ReadNotificationsResp)
}

func (p *ReadNotificationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ReadNotificationsResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetNotifications(ctx context.Context, Req *system.GetNotificationsReq) (r *system.GetNotificationsResp, err error) {
	var _args GetNotificationsArgs
	_args.Req = Req
	var _result GetNotificationsResult
	if err = p.c.Call(ctx, "GetNotifications", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CleanNotification(ctx context.Context, Req *system.CleanNotificationReq) (r *system.CleanNotificationResp, err error) {
	var _args CleanNotificationArgs
	_args.Req = Req
	var _result CleanNotificationResult
	if err = p.c.Call(ctx, "CleanNotification", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetNotificationCount(ctx context.Context, Req *system.GetNotificationCountReq) (r *system.GetNotificationCountResp, err error) {
	var _args GetNotificationCountArgs
	_args.Req = Req
	var _result GetNotificationCountResult
	if err = p.c.Call(ctx, "GetNotificationCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ReadNotification(ctx context.Context, Req *system.ReadNotificationReq) (r *system.ReadNotificationResp, err error) {
	var _args ReadNotificationArgs
	_args.Req = Req
	var _result ReadNotificationResult
	if err = p.c.Call(ctx, "ReadNotification", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateNotification(ctx context.Context, Req *system.CreateNotificationReq) (r *system.CreateNotificationResp, err error) {
	var _args CreateNotificationArgs
	_args.Req = Req
	var _result CreateNotificationResult
	if err = p.c.Call(ctx, "CreateNotification", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ReadNotifications(ctx context.Context, Req *system.ReadNotificationsReq) (r *system.ReadNotificationsResp, err error) {
	var _args ReadNotificationsArgs
	_args.Req = Req
	var _result ReadNotificationsResult
	if err = p.c.Call(ctx, "ReadNotifications", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
