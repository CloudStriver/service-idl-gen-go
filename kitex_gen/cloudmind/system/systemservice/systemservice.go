// Code generated by Kitex v0.8.0. DO NOT EDIT.

package systemservice

import (
	"context"
	system "github.com/CloudStriver/service-idl-gen-go/kitex_gen/cloudmind/system"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return systemServiceServiceInfo
}

var systemServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "SystemService"
	handlerType := (*system.SystemService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetSliders":           kitex.NewMethodInfo(getSlidersHandler, newGetSlidersArgs, newGetSlidersResult, false),
		"CreateSlider":         kitex.NewMethodInfo(createSliderHandler, newCreateSliderArgs, newCreateSliderResult, false),
		"UpdateSlider":         kitex.NewMethodInfo(updateSliderHandler, newUpdateSliderArgs, newUpdateSliderResult, false),
		"DeleteSlider":         kitex.NewMethodInfo(deleteSliderHandler, newDeleteSliderArgs, newDeleteSliderResult, false),
		"GetNotifications":     kitex.NewMethodInfo(getNotificationsHandler, newGetNotificationsArgs, newGetNotificationsResult, false),
		"GetNotificationCount": kitex.NewMethodInfo(getNotificationCountHandler, newGetNotificationCountArgs, newGetNotificationCountResult, false),
		"CreateNotifications":  kitex.NewMethodInfo(createNotificationsHandler, newCreateNotificationsArgs, newCreateNotificationsResult, false),
		"UpdateNotifications":  kitex.NewMethodInfo(updateNotificationsHandler, newUpdateNotificationsArgs, newUpdateNotificationsResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "cloudmind.system",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func getSlidersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.GetSlidersReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).GetSliders(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetSlidersArgs:
		success, err := handler.(system.SystemService).GetSliders(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetSlidersResult)
		realResult.Success = success
	}
	return nil
}
func newGetSlidersArgs() interface{} {
	return &GetSlidersArgs{}
}

func newGetSlidersResult() interface{} {
	return &GetSlidersResult{}
}

type GetSlidersArgs struct {
	Req *system.GetSlidersReq
}

func (p *GetSlidersArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.GetSlidersReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetSlidersArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetSlidersArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetSlidersArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetSlidersArgs) Unmarshal(in []byte) error {
	msg := new(system.GetSlidersReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetSlidersArgs_Req_DEFAULT *system.GetSlidersReq

func (p *GetSlidersArgs) GetReq() *system.GetSlidersReq {
	if !p.IsSetReq() {
		return GetSlidersArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetSlidersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetSlidersArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetSlidersResult struct {
	Success *system.GetSlidersResp
}

var GetSlidersResult_Success_DEFAULT *system.GetSlidersResp

func (p *GetSlidersResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.GetSlidersResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetSlidersResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetSlidersResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetSlidersResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetSlidersResult) Unmarshal(in []byte) error {
	msg := new(system.GetSlidersResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetSlidersResult) GetSuccess() *system.GetSlidersResp {
	if !p.IsSetSuccess() {
		return GetSlidersResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetSlidersResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.GetSlidersResp)
}

func (p *GetSlidersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSlidersResult) GetResult() interface{} {
	return p.Success
}

func createSliderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.CreateSliderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).CreateSlider(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateSliderArgs:
		success, err := handler.(system.SystemService).CreateSlider(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateSliderResult)
		realResult.Success = success
	}
	return nil
}
func newCreateSliderArgs() interface{} {
	return &CreateSliderArgs{}
}

func newCreateSliderResult() interface{} {
	return &CreateSliderResult{}
}

type CreateSliderArgs struct {
	Req *system.CreateSliderReq
}

func (p *CreateSliderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.CreateSliderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateSliderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateSliderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateSliderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateSliderArgs) Unmarshal(in []byte) error {
	msg := new(system.CreateSliderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateSliderArgs_Req_DEFAULT *system.CreateSliderReq

func (p *CreateSliderArgs) GetReq() *system.CreateSliderReq {
	if !p.IsSetReq() {
		return CreateSliderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateSliderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateSliderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateSliderResult struct {
	Success *system.CreateSliderResp
}

var CreateSliderResult_Success_DEFAULT *system.CreateSliderResp

func (p *CreateSliderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.CreateSliderResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateSliderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateSliderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateSliderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateSliderResult) Unmarshal(in []byte) error {
	msg := new(system.CreateSliderResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateSliderResult) GetSuccess() *system.CreateSliderResp {
	if !p.IsSetSuccess() {
		return CreateSliderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateSliderResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.CreateSliderResp)
}

func (p *CreateSliderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateSliderResult) GetResult() interface{} {
	return p.Success
}

func updateSliderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.UpdateSliderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).UpdateSlider(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateSliderArgs:
		success, err := handler.(system.SystemService).UpdateSlider(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateSliderResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateSliderArgs() interface{} {
	return &UpdateSliderArgs{}
}

func newUpdateSliderResult() interface{} {
	return &UpdateSliderResult{}
}

type UpdateSliderArgs struct {
	Req *system.UpdateSliderReq
}

func (p *UpdateSliderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.UpdateSliderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateSliderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateSliderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateSliderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateSliderArgs) Unmarshal(in []byte) error {
	msg := new(system.UpdateSliderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateSliderArgs_Req_DEFAULT *system.UpdateSliderReq

func (p *UpdateSliderArgs) GetReq() *system.UpdateSliderReq {
	if !p.IsSetReq() {
		return UpdateSliderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateSliderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateSliderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateSliderResult struct {
	Success *system.UpdateSliderResp
}

var UpdateSliderResult_Success_DEFAULT *system.UpdateSliderResp

func (p *UpdateSliderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.UpdateSliderResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateSliderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateSliderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateSliderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateSliderResult) Unmarshal(in []byte) error {
	msg := new(system.UpdateSliderResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateSliderResult) GetSuccess() *system.UpdateSliderResp {
	if !p.IsSetSuccess() {
		return UpdateSliderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateSliderResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.UpdateSliderResp)
}

func (p *UpdateSliderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateSliderResult) GetResult() interface{} {
	return p.Success
}

func deleteSliderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.DeleteSliderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).DeleteSlider(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteSliderArgs:
		success, err := handler.(system.SystemService).DeleteSlider(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteSliderResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteSliderArgs() interface{} {
	return &DeleteSliderArgs{}
}

func newDeleteSliderResult() interface{} {
	return &DeleteSliderResult{}
}

type DeleteSliderArgs struct {
	Req *system.DeleteSliderReq
}

func (p *DeleteSliderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.DeleteSliderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteSliderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteSliderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteSliderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteSliderArgs) Unmarshal(in []byte) error {
	msg := new(system.DeleteSliderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteSliderArgs_Req_DEFAULT *system.DeleteSliderReq

func (p *DeleteSliderArgs) GetReq() *system.DeleteSliderReq {
	if !p.IsSetReq() {
		return DeleteSliderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteSliderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteSliderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteSliderResult struct {
	Success *system.DeleteSliderResp
}

var DeleteSliderResult_Success_DEFAULT *system.DeleteSliderResp

func (p *DeleteSliderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.DeleteSliderResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteSliderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteSliderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteSliderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteSliderResult) Unmarshal(in []byte) error {
	msg := new(system.DeleteSliderResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteSliderResult) GetSuccess() *system.DeleteSliderResp {
	if !p.IsSetSuccess() {
		return DeleteSliderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteSliderResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.DeleteSliderResp)
}

func (p *DeleteSliderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteSliderResult) GetResult() interface{} {
	return p.Success
}

func getNotificationsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.GetNotificationsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).GetNotifications(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetNotificationsArgs:
		success, err := handler.(system.SystemService).GetNotifications(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetNotificationsResult)
		realResult.Success = success
	}
	return nil
}
func newGetNotificationsArgs() interface{} {
	return &GetNotificationsArgs{}
}

func newGetNotificationsResult() interface{} {
	return &GetNotificationsResult{}
}

type GetNotificationsArgs struct {
	Req *system.GetNotificationsReq
}

func (p *GetNotificationsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.GetNotificationsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetNotificationsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetNotificationsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetNotificationsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetNotificationsArgs) Unmarshal(in []byte) error {
	msg := new(system.GetNotificationsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetNotificationsArgs_Req_DEFAULT *system.GetNotificationsReq

func (p *GetNotificationsArgs) GetReq() *system.GetNotificationsReq {
	if !p.IsSetReq() {
		return GetNotificationsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetNotificationsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetNotificationsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetNotificationsResult struct {
	Success *system.GetNotificationsResp
}

var GetNotificationsResult_Success_DEFAULT *system.GetNotificationsResp

func (p *GetNotificationsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.GetNotificationsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetNotificationsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetNotificationsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetNotificationsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetNotificationsResult) Unmarshal(in []byte) error {
	msg := new(system.GetNotificationsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetNotificationsResult) GetSuccess() *system.GetNotificationsResp {
	if !p.IsSetSuccess() {
		return GetNotificationsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetNotificationsResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.GetNotificationsResp)
}

func (p *GetNotificationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetNotificationsResult) GetResult() interface{} {
	return p.Success
}

func getNotificationCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.GetNotificationCountReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).GetNotificationCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetNotificationCountArgs:
		success, err := handler.(system.SystemService).GetNotificationCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetNotificationCountResult)
		realResult.Success = success
	}
	return nil
}
func newGetNotificationCountArgs() interface{} {
	return &GetNotificationCountArgs{}
}

func newGetNotificationCountResult() interface{} {
	return &GetNotificationCountResult{}
}

type GetNotificationCountArgs struct {
	Req *system.GetNotificationCountReq
}

func (p *GetNotificationCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.GetNotificationCountReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetNotificationCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetNotificationCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetNotificationCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetNotificationCountArgs) Unmarshal(in []byte) error {
	msg := new(system.GetNotificationCountReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetNotificationCountArgs_Req_DEFAULT *system.GetNotificationCountReq

func (p *GetNotificationCountArgs) GetReq() *system.GetNotificationCountReq {
	if !p.IsSetReq() {
		return GetNotificationCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetNotificationCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetNotificationCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetNotificationCountResult struct {
	Success *system.GetNotificationCountResp
}

var GetNotificationCountResult_Success_DEFAULT *system.GetNotificationCountResp

func (p *GetNotificationCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.GetNotificationCountResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetNotificationCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetNotificationCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetNotificationCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetNotificationCountResult) Unmarshal(in []byte) error {
	msg := new(system.GetNotificationCountResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetNotificationCountResult) GetSuccess() *system.GetNotificationCountResp {
	if !p.IsSetSuccess() {
		return GetNotificationCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetNotificationCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.GetNotificationCountResp)
}

func (p *GetNotificationCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetNotificationCountResult) GetResult() interface{} {
	return p.Success
}

func createNotificationsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.CreateNotificationsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).CreateNotifications(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateNotificationsArgs:
		success, err := handler.(system.SystemService).CreateNotifications(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateNotificationsResult)
		realResult.Success = success
	}
	return nil
}
func newCreateNotificationsArgs() interface{} {
	return &CreateNotificationsArgs{}
}

func newCreateNotificationsResult() interface{} {
	return &CreateNotificationsResult{}
}

type CreateNotificationsArgs struct {
	Req *system.CreateNotificationsReq
}

func (p *CreateNotificationsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.CreateNotificationsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateNotificationsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateNotificationsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateNotificationsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateNotificationsArgs) Unmarshal(in []byte) error {
	msg := new(system.CreateNotificationsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateNotificationsArgs_Req_DEFAULT *system.CreateNotificationsReq

func (p *CreateNotificationsArgs) GetReq() *system.CreateNotificationsReq {
	if !p.IsSetReq() {
		return CreateNotificationsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateNotificationsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateNotificationsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateNotificationsResult struct {
	Success *system.CreateNotificationsResp
}

var CreateNotificationsResult_Success_DEFAULT *system.CreateNotificationsResp

func (p *CreateNotificationsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.CreateNotificationsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateNotificationsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateNotificationsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateNotificationsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateNotificationsResult) Unmarshal(in []byte) error {
	msg := new(system.CreateNotificationsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateNotificationsResult) GetSuccess() *system.CreateNotificationsResp {
	if !p.IsSetSuccess() {
		return CreateNotificationsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateNotificationsResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.CreateNotificationsResp)
}

func (p *CreateNotificationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateNotificationsResult) GetResult() interface{} {
	return p.Success
}

func updateNotificationsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.UpdateNotificationsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).UpdateNotifications(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateNotificationsArgs:
		success, err := handler.(system.SystemService).UpdateNotifications(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateNotificationsResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateNotificationsArgs() interface{} {
	return &UpdateNotificationsArgs{}
}

func newUpdateNotificationsResult() interface{} {
	return &UpdateNotificationsResult{}
}

type UpdateNotificationsArgs struct {
	Req *system.UpdateNotificationsReq
}

func (p *UpdateNotificationsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.UpdateNotificationsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateNotificationsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateNotificationsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateNotificationsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateNotificationsArgs) Unmarshal(in []byte) error {
	msg := new(system.UpdateNotificationsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateNotificationsArgs_Req_DEFAULT *system.UpdateNotificationsReq

func (p *UpdateNotificationsArgs) GetReq() *system.UpdateNotificationsReq {
	if !p.IsSetReq() {
		return UpdateNotificationsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateNotificationsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateNotificationsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateNotificationsResult struct {
	Success *system.UpdateNotificationsResp
}

var UpdateNotificationsResult_Success_DEFAULT *system.UpdateNotificationsResp

func (p *UpdateNotificationsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.UpdateNotificationsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateNotificationsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateNotificationsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateNotificationsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateNotificationsResult) Unmarshal(in []byte) error {
	msg := new(system.UpdateNotificationsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateNotificationsResult) GetSuccess() *system.UpdateNotificationsResp {
	if !p.IsSetSuccess() {
		return UpdateNotificationsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateNotificationsResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.UpdateNotificationsResp)
}

func (p *UpdateNotificationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateNotificationsResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetSliders(ctx context.Context, Req *system.GetSlidersReq) (r *system.GetSlidersResp, err error) {
	var _args GetSlidersArgs
	_args.Req = Req
	var _result GetSlidersResult
	if err = p.c.Call(ctx, "GetSliders", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateSlider(ctx context.Context, Req *system.CreateSliderReq) (r *system.CreateSliderResp, err error) {
	var _args CreateSliderArgs
	_args.Req = Req
	var _result CreateSliderResult
	if err = p.c.Call(ctx, "CreateSlider", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateSlider(ctx context.Context, Req *system.UpdateSliderReq) (r *system.UpdateSliderResp, err error) {
	var _args UpdateSliderArgs
	_args.Req = Req
	var _result UpdateSliderResult
	if err = p.c.Call(ctx, "UpdateSlider", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteSlider(ctx context.Context, Req *system.DeleteSliderReq) (r *system.DeleteSliderResp, err error) {
	var _args DeleteSliderArgs
	_args.Req = Req
	var _result DeleteSliderResult
	if err = p.c.Call(ctx, "DeleteSlider", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetNotifications(ctx context.Context, Req *system.GetNotificationsReq) (r *system.GetNotificationsResp, err error) {
	var _args GetNotificationsArgs
	_args.Req = Req
	var _result GetNotificationsResult
	if err = p.c.Call(ctx, "GetNotifications", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetNotificationCount(ctx context.Context, Req *system.GetNotificationCountReq) (r *system.GetNotificationCountResp, err error) {
	var _args GetNotificationCountArgs
	_args.Req = Req
	var _result GetNotificationCountResult
	if err = p.c.Call(ctx, "GetNotificationCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateNotifications(ctx context.Context, Req *system.CreateNotificationsReq) (r *system.CreateNotificationsResp, err error) {
	var _args CreateNotificationsArgs
	_args.Req = Req
	var _result CreateNotificationsResult
	if err = p.c.Call(ctx, "CreateNotifications", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateNotifications(ctx context.Context, Req *system.UpdateNotificationsReq) (r *system.UpdateNotificationsResp, err error) {
	var _args UpdateNotificationsArgs
	_args.Req = Req
	var _result UpdateNotificationsResult
	if err = p.c.Call(ctx, "UpdateNotifications", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
