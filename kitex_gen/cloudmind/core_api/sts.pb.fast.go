// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package core_api

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *ApplySignedUrlReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ApplySignedUrlReq[number], err)
}

func (x *ApplySignedUrlReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Md5, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ApplySignedUrlReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Suffix, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ApplySignedUrlReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.File, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *ApplySignedUrlResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ApplySignedUrlResp[number], err)
}

func (x *ApplySignedUrlResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ApplySignedUrlResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SessionToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ApplySignedUrlReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *ApplySignedUrlReq) fastWriteField1(buf []byte) (offset int) {
	if x.Md5 == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMd5())
	return offset
}

func (x *ApplySignedUrlReq) fastWriteField2(buf []byte) (offset int) {
	if x.Suffix == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSuffix())
	return offset
}

func (x *ApplySignedUrlReq) fastWriteField3(buf []byte) (offset int) {
	if !x.File {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 3, x.GetFile())
	return offset
}

func (x *ApplySignedUrlResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ApplySignedUrlResp) fastWriteField1(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUrl())
	return offset
}

func (x *ApplySignedUrlResp) fastWriteField2(buf []byte) (offset int) {
	if x.SessionToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSessionToken())
	return offset
}

func (x *ApplySignedUrlReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *ApplySignedUrlReq) sizeField1() (n int) {
	if x.Md5 == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMd5())
	return n
}

func (x *ApplySignedUrlReq) sizeField2() (n int) {
	if x.Suffix == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetSuffix())
	return n
}

func (x *ApplySignedUrlReq) sizeField3() (n int) {
	if !x.File {
		return n
	}
	n += fastpb.SizeBool(3, x.GetFile())
	return n
}

func (x *ApplySignedUrlResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ApplySignedUrlResp) sizeField1() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUrl())
	return n
}

func (x *ApplySignedUrlResp) sizeField2() (n int) {
	if x.SessionToken == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetSessionToken())
	return n
}

var fieldIDToName_ApplySignedUrlReq = map[int32]string{
	1: "Md5",
	2: "Suffix",
	3: "File",
}

var fieldIDToName_ApplySignedUrlResp = map[int32]string{
	1: "Url",
	2: "SessionToken",
}
