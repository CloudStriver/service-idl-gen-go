// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.4
// source: cloudmind/core_api/common.proto

package core_api

import (
	context "context"
	_ "github.com/CloudStriver/service-idl-gen-go/kitex_gen/basic"
	_ "github.com/CloudStriver/service-idl-gen-go/kitex_gen/cloudmind/content"
	_ "github.com/CloudStriver/service-idl-gen-go/kitex_gen/cloudmind/sts"
	_ "github.com/CloudStriver/service-idl-gen-go/kitex_gen/http"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TargetType int32

const (
	TargetType_UnKnowTargetType TargetType = 0
	TargetType_UserType         TargetType = 1
	TargetType_FileType         TargetType = 2
	TargetType_ProductType      TargetType = 3
	TargetType_PostType         TargetType = 4
)

// Enum value maps for TargetType.
var (
	TargetType_name = map[int32]string{
		0: "UnKnowTargetType",
		1: "UserType",
		2: "FileType",
		3: "ProductType",
		4: "PostType",
	}
	TargetType_value = map[string]int32{
		"UnKnowTargetType": 0,
		"UserType":         1,
		"FileType":         2,
		"ProductType":      3,
		"PostType":         4,
	}
)

func (x TargetType) Enum() *TargetType {
	p := new(TargetType)
	*p = x
	return p
}

func (x TargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudmind_core_api_common_proto_enumTypes[0].Descriptor()
}

func (TargetType) Type() protoreflect.EnumType {
	return &file_cloudmind_core_api_common_proto_enumTypes[0]
}

func (x TargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TargetType.Descriptor instead.
func (TargetType) EnumDescriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{0}
}

type RelationType int32

const (
	RelationType_UnKnowRelationType RelationType = 0
	RelationType_LikeType           RelationType = 1
	RelationType_FollowType         RelationType = 2
	RelationType_CollectType        RelationType = 3
	RelationType_ShareType          RelationType = 4
	RelationType_CommentType        RelationType = 5
	RelationType_ViewType           RelationType = 6
)

// Enum value maps for RelationType.
var (
	RelationType_name = map[int32]string{
		0: "UnKnowRelationType",
		1: "LikeType",
		2: "FollowType",
		3: "CollectType",
		4: "ShareType",
		5: "CommentType",
		6: "ViewType",
	}
	RelationType_value = map[string]int32{
		"UnKnowRelationType": 0,
		"LikeType":           1,
		"FollowType":         2,
		"CollectType":        3,
		"ShareType":          4,
		"CommentType":        5,
		"ViewType":           6,
	}
)

func (x RelationType) Enum() *RelationType {
	p := new(RelationType)
	*p = x
	return p
}

func (x RelationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudmind_core_api_common_proto_enumTypes[1].Descriptor()
}

func (RelationType) Type() protoreflect.EnumType {
	return &file_cloudmind_core_api_common_proto_enumTypes[1]
}

func (x RelationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelationType.Descriptor instead.
func (RelationType) EnumDescriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{1}
}

type IsDel int32

const (
	IsDel_Is_null IsDel = 0
	IsDel_Is_no   IsDel = 1
	IsDel_Is_soft IsDel = 2
	IsDel_Is_hard IsDel = 3
)

// Enum value maps for IsDel.
var (
	IsDel_name = map[int32]string{
		0: "Is_null",
		1: "Is_no",
		2: "Is_soft",
		3: "Is_hard",
	}
	IsDel_value = map[string]int32{
		"Is_null": 0,
		"Is_no":   1,
		"Is_soft": 2,
		"Is_hard": 3,
	}
)

func (x IsDel) Enum() *IsDel {
	p := new(IsDel)
	*p = x
	return p
}

func (x IsDel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsDel) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudmind_core_api_common_proto_enumTypes[2].Descriptor()
}

func (IsDel) Type() protoreflect.EnumType {
	return &file_cloudmind_core_api_common_proto_enumTypes[2]
}

func (x IsDel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsDel.Descriptor instead.
func (IsDel) EnumDescriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{2}
}

type DocumentType int32

const (
	DocumentType_DocumentType_null     DocumentType = 0
	DocumentType_DocumentType_personal DocumentType = 1
	DocumentType_DocumentType_public   DocumentType = 2
)

// Enum value maps for DocumentType.
var (
	DocumentType_name = map[int32]string{
		0: "DocumentType_null",
		1: "DocumentType_personal",
		2: "DocumentType_public",
	}
	DocumentType_value = map[string]int32{
		"DocumentType_null":     0,
		"DocumentType_personal": 1,
		"DocumentType_public":   2,
	}
)

func (x DocumentType) Enum() *DocumentType {
	p := new(DocumentType)
	*p = x
	return p
}

func (x DocumentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudmind_core_api_common_proto_enumTypes[3].Descriptor()
}

func (DocumentType) Type() protoreflect.EnumType {
	return &file_cloudmind_core_api_common_proto_enumTypes[3]
}

func (x DocumentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentType.Descriptor instead.
func (DocumentType) EnumDescriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{3}
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url    string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type UserDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sex         int64  `protobuf:"varint,2,opt,name=sex,proto3" json:"sex,omitempty"`
	FullName    string `protobuf:"bytes,3,opt,name=fullName,proto3" json:"fullName,omitempty"`
	IdCard      string `protobuf:"bytes,4,opt,name=idCard,proto3" json:"idCard,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Url         string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *UserDetail) Reset() {
	*x = UserDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDetail) ProtoMessage() {}

func (x *UserDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDetail.ProtoReflect.Descriptor instead.
func (*UserDetail) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{1}
}

func (x *UserDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserDetail) GetSex() int64 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *UserDetail) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *UserDetail) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *UserDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UserDetail) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type PrivateFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId    string `protobuf:"bytes,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type      string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Path      string `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	FatherId  string `protobuf:"bytes,6,opt,name=fatherId,proto3" json:"fatherId,omitempty"`
	SpaceSize int64  `protobuf:"varint,7,opt,name=spaceSize,proto3" json:"spaceSize,omitempty"`
	IsDel     int64  `protobuf:"varint,8,opt,name=isDel,proto3" json:"isDel,omitempty"`
	CreateAt  int64  `protobuf:"varint,9,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpdateAt  int64  `protobuf:"varint,10,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
}

func (x *PrivateFile) Reset() {
	*x = PrivateFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateFile) ProtoMessage() {}

func (x *PrivateFile) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateFile.ProtoReflect.Descriptor instead.
func (*PrivateFile) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{2}
}

func (x *PrivateFile) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *PrivateFile) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PrivateFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrivateFile) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PrivateFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PrivateFile) GetFatherId() string {
	if x != nil {
		return x.FatherId
	}
	return ""
}

func (x *PrivateFile) GetSpaceSize() int64 {
	if x != nil {
		return x.SpaceSize
	}
	return 0
}

func (x *PrivateFile) GetIsDel() int64 {
	if x != nil {
		return x.IsDel
	}
	return 0
}

func (x *PrivateFile) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *PrivateFile) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

type PublicFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId       string        `protobuf:"bytes,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
	UserId       string        `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Name         string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type         string        `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Path         string        `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	FatherId     string        `protobuf:"bytes,6,opt,name=fatherId,proto3" json:"fatherId,omitempty"`
	SpaceSize    int64         `protobuf:"varint,7,opt,name=spaceSize,proto3" json:"spaceSize,omitempty"`
	IsDel        int64         `protobuf:"varint,8,opt,name=isDel,proto3" json:"isDel,omitempty"`
	Zone         string        `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone,omitempty"`
	SubZone      string        `protobuf:"bytes,10,opt,name=subZone,proto3" json:"subZone,omitempty"`
	Description  string        `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	CreateAt     int64         `protobuf:"varint,12,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpdateAt     int64         `protobuf:"varint,13,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
	Labels       []string      `protobuf:"bytes,14,rep,name=labels,proto3" json:"labels,omitempty"`
	Author       *User         `protobuf:"bytes,15,opt,name=author,proto3" json:"author,omitempty"`             // 作者信息
	FileCount    *PostCount    `protobuf:"bytes,16,opt,name=fileCount,proto3" json:"fileCount,omitempty"`       // 文章统计信息
	FileRelation *PostRelation `protobuf:"bytes,17,opt,name=fileRelation,proto3" json:"fileRelation,omitempty"` // 文章关系信息
}

func (x *PublicFile) Reset() {
	*x = PublicFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicFile) ProtoMessage() {}

func (x *PublicFile) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicFile.ProtoReflect.Descriptor instead.
func (*PublicFile) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{3}
}

func (x *PublicFile) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *PublicFile) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PublicFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublicFile) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PublicFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PublicFile) GetFatherId() string {
	if x != nil {
		return x.FatherId
	}
	return ""
}

func (x *PublicFile) GetSpaceSize() int64 {
	if x != nil {
		return x.SpaceSize
	}
	return 0
}

func (x *PublicFile) GetIsDel() int64 {
	if x != nil {
		return x.IsDel
	}
	return 0
}

func (x *PublicFile) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *PublicFile) GetSubZone() string {
	if x != nil {
		return x.SubZone
	}
	return ""
}

func (x *PublicFile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PublicFile) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *PublicFile) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *PublicFile) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PublicFile) GetAuthor() *User {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *PublicFile) GetFileCount() *PostCount {
	if x != nil {
		return x.FileCount
	}
	return nil
}

func (x *PublicFile) GetFileRelation() *PostRelation {
	if x != nil {
		return x.FileRelation
	}
	return nil
}

type Zone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FatherId string `protobuf:"bytes,2,opt,name=fatherId,proto3" json:"fatherId,omitempty"`
	Value    string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Zone) Reset() {
	*x = Zone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Zone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Zone) ProtoMessage() {}

func (x *Zone) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Zone.ProtoReflect.Descriptor instead.
func (*Zone) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{4}
}

func (x *Zone) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Zone) GetFatherId() string {
	if x != nil {
		return x.FatherId
	}
	return ""
}

func (x *Zone) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ShareFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	UserId        string   `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Name          string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	EffectiveTime int64    `protobuf:"varint,4,opt,name=effectiveTime,proto3" json:"effectiveTime,omitempty"`
	BrowseNumber  int64    `protobuf:"varint,5,opt,name=browseNumber,proto3" json:"browseNumber,omitempty"`
	CreateAt      int64    `protobuf:"varint,6,opt,name=createAt,proto3" json:"createAt,omitempty"`
	FileList      []string `protobuf:"bytes,7,rep,name=fileList,proto3" json:"fileList,omitempty"`
}

func (x *ShareFile) Reset() {
	*x = ShareFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareFile) ProtoMessage() {}

func (x *ShareFile) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareFile.ProtoReflect.Descriptor instead.
func (*ShareFile) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{5}
}

func (x *ShareFile) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ShareFile) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ShareFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShareFile) GetEffectiveTime() int64 {
	if x != nil {
		return x.EffectiveTime
	}
	return 0
}

func (x *ShareFile) GetBrowseNumber() int64 {
	if x != nil {
		return x.BrowseNumber
	}
	return 0
}

func (x *ShareFile) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *ShareFile) GetFileList() []string {
	if x != nil {
		return x.FileList
	}
	return nil
}

type ShareFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	UserId        string   `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Name          string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status        int64    `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	EffectiveTime int64    `protobuf:"varint,5,opt,name=effectiveTime,proto3" json:"effectiveTime,omitempty"`
	BrowseNumber  int64    `protobuf:"varint,6,opt,name=browseNumber,proto3" json:"browseNumber,omitempty"`
	CreateAt      int64    `protobuf:"varint,7,opt,name=createAt,proto3" json:"createAt,omitempty"`
	FileList      []string `protobuf:"bytes,8,rep,name=fileList,proto3" json:"fileList,omitempty"`
}

func (x *ShareFileInfo) Reset() {
	*x = ShareFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareFileInfo) ProtoMessage() {}

func (x *ShareFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareFileInfo.ProtoReflect.Descriptor instead.
func (*ShareFileInfo) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{6}
}

func (x *ShareFileInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ShareFileInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ShareFileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShareFileInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ShareFileInfo) GetEffectiveTime() int64 {
	if x != nil {
		return x.EffectiveTime
	}
	return 0
}

func (x *ShareFileInfo) GetBrowseNumber() int64 {
	if x != nil {
		return x.BrowseNumber
	}
	return 0
}

func (x *ShareFileInfo) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *ShareFileInfo) GetFileList() []string {
	if x != nil {
		return x.FileList
	}
	return nil
}

type ShareCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status       int64  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	BrowseNumber int64  `protobuf:"varint,4,opt,name=browseNumber,proto3" json:"browseNumber,omitempty"`
	CreateAt     int64  `protobuf:"varint,5,opt,name=createAt,proto3" json:"createAt,omitempty"`
	Key          string `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ShareCode) Reset() {
	*x = ShareCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareCode) ProtoMessage() {}

func (x *ShareCode) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareCode.ProtoReflect.Descriptor instead.
func (*ShareCode) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{7}
}

func (x *ShareCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ShareCode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShareCode) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ShareCode) GetBrowseNumber() int64 {
	if x != nil {
		return x.BrowseNumber
	}
	return 0
}

func (x *ShareCode) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *ShareCode) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SearchField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Id          *string `protobuf:"bytes,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Tag         *string `protobuf:"bytes,3,opt,name=tag,proto3,oneof" json:"tag,omitempty"` // 仅限Post
	Text        *string `protobuf:"bytes,4,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Title       *string `protobuf:"bytes,5,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Description *string `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	ProductName *string `protobuf:"bytes,7,opt,name=productName,proto3,oneof" json:"productName,omitempty"`
}

func (x *SearchField) Reset() {
	*x = SearchField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchField) ProtoMessage() {}

func (x *SearchField) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchField.ProtoReflect.Descriptor instead.
func (*SearchField) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{8}
}

func (x *SearchField) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SearchField) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *SearchField) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *SearchField) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *SearchField) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *SearchField) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SearchField) GetProductName() string {
	if x != nil && x.ProductName != nil {
		return *x.ProductName
	}
	return ""
}

type SearchOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*SearchOptions_AllFieldsKey
	//	*SearchOptions_MultiFieldsKey
	Type isSearchOptions_Type `protobuf_oneof:"Type"`
}

func (x *SearchOptions) Reset() {
	*x = SearchOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOptions) ProtoMessage() {}

func (x *SearchOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOptions.ProtoReflect.Descriptor instead.
func (*SearchOptions) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{9}
}

func (m *SearchOptions) GetType() isSearchOptions_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SearchOptions) GetAllFieldsKey() string {
	if x, ok := x.GetType().(*SearchOptions_AllFieldsKey); ok {
		return x.AllFieldsKey
	}
	return ""
}

func (x *SearchOptions) GetMultiFieldsKey() *SearchField {
	if x, ok := x.GetType().(*SearchOptions_MultiFieldsKey); ok {
		return x.MultiFieldsKey
	}
	return nil
}

type isSearchOptions_Type interface {
	isSearchOptions_Type()
}

type SearchOptions_AllFieldsKey struct {
	AllFieldsKey string `protobuf:"bytes,1,opt,name=allFieldsKey,proto3,oneof"`
}

type SearchOptions_MultiFieldsKey struct {
	MultiFieldsKey *SearchField `protobuf:"bytes,2,opt,name=multiFieldsKey,proto3,oneof"`
}

func (*SearchOptions_AllFieldsKey) isSearchOptions_Type() {}

func (*SearchOptions_MultiFieldsKey) isSearchOptions_Type() {}

type FileFilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlyUserId       *string  `protobuf:"bytes,1,opt,name=onlyUserId,proto3,oneof" json:"onlyUserId,omitempty"`
	OnlyFileId       *string  `protobuf:"bytes,2,opt,name=onlyFileId,proto3,oneof" json:"onlyFileId,omitempty"`
	OnlyFatherId     *string  `protobuf:"bytes,3,opt,name=onlyFatherId,proto3,oneof" json:"onlyFatherId,omitempty"`
	OnlyIsDel        *int64   `protobuf:"varint,4,opt,name=onlyIsDel,proto3,oneof" json:"onlyIsDel,omitempty"`               // 是否删除 1：未删除 2：软删除 3:彻底删除
	OnlyZone         *string  `protobuf:"bytes,5,opt,name=onlyZone,proto3,oneof" json:"onlyZone,omitempty"`                  // 分区
	OnlySubZone      *string  `protobuf:"bytes,6,opt,name=onlySubZone,proto3,oneof" json:"onlySubZone,omitempty"`            // 子分区
	OnlyDocumentType *int64   `protobuf:"varint,7,opt,name=onlyDocumentType,proto3,oneof" json:"onlyDocumentType,omitempty"` // 操作类型 1：个人空间文件 2：公共空间文件
	OnlyTags         []string `protobuf:"bytes,8,rep,name=onlyTags,proto3" json:"onlyTags,omitempty"`
	OnlyType         []string `protobuf:"bytes,9,rep,name=onlyType,proto3" json:"onlyType,omitempty"` // 文件类型
}

func (x *FileFilterOptions) Reset() {
	*x = FileFilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileFilterOptions) ProtoMessage() {}

func (x *FileFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileFilterOptions.ProtoReflect.Descriptor instead.
func (*FileFilterOptions) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{10}
}

func (x *FileFilterOptions) GetOnlyUserId() string {
	if x != nil && x.OnlyUserId != nil {
		return *x.OnlyUserId
	}
	return ""
}

func (x *FileFilterOptions) GetOnlyFileId() string {
	if x != nil && x.OnlyFileId != nil {
		return *x.OnlyFileId
	}
	return ""
}

func (x *FileFilterOptions) GetOnlyFatherId() string {
	if x != nil && x.OnlyFatherId != nil {
		return *x.OnlyFatherId
	}
	return ""
}

func (x *FileFilterOptions) GetOnlyIsDel() int64 {
	if x != nil && x.OnlyIsDel != nil {
		return *x.OnlyIsDel
	}
	return 0
}

func (x *FileFilterOptions) GetOnlyZone() string {
	if x != nil && x.OnlyZone != nil {
		return *x.OnlyZone
	}
	return ""
}

func (x *FileFilterOptions) GetOnlySubZone() string {
	if x != nil && x.OnlySubZone != nil {
		return *x.OnlySubZone
	}
	return ""
}

func (x *FileFilterOptions) GetOnlyDocumentType() int64 {
	if x != nil && x.OnlyDocumentType != nil {
		return *x.OnlyDocumentType
	}
	return 0
}

func (x *FileFilterOptions) GetOnlyTags() []string {
	if x != nil {
		return x.OnlyTags
	}
	return nil
}

func (x *FileFilterOptions) GetOnlyType() []string {
	if x != nil {
		return x.OnlyType
	}
	return nil
}

type ShareFileFilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlyCode   *string `protobuf:"bytes,1,opt,name=onlyCode,proto3,oneof" json:"onlyCode,omitempty"`
	OnlyUserId *string `protobuf:"bytes,2,opt,name=onlyUserId,proto3,oneof" json:"onlyUserId,omitempty"`
}

func (x *ShareFileFilterOptions) Reset() {
	*x = ShareFileFilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareFileFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareFileFilterOptions) ProtoMessage() {}

func (x *ShareFileFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareFileFilterOptions.ProtoReflect.Descriptor instead.
func (*ShareFileFilterOptions) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{11}
}

func (x *ShareFileFilterOptions) GetOnlyCode() string {
	if x != nil && x.OnlyCode != nil {
		return *x.OnlyCode
	}
	return ""
}

func (x *ShareFileFilterOptions) GetOnlyUserId() string {
	if x != nil && x.OnlyUserId != nil {
		return *x.OnlyUserId
	}
	return ""
}

type UserDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Sex         int64  `protobuf:"varint,3,opt,name=sex,proto3" json:"sex,omitempty"`
	FullName    string `protobuf:"bytes,4,opt,name=fullName,proto3" json:"fullName,omitempty"`
	IdCard      string `protobuf:"bytes,5,opt,name=idCard,proto3" json:"idCard,omitempty"`
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Url         string `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *UserDetailInfo) Reset() {
	*x = UserDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDetailInfo) ProtoMessage() {}

func (x *UserDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDetailInfo.ProtoReflect.Descriptor instead.
func (*UserDetailInfo) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{12}
}

func (x *UserDetailInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserDetailInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserDetailInfo) GetSex() int64 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *UserDetailInfo) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *UserDetailInfo) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *UserDetailInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UserDetailInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Sex    int64  `protobuf:"varint,3,opt,name=sex,proto3" json:"sex,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{13}
}

func (x *UserInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfo) GetSex() int64 {
	if x != nil {
		return x.Sex
	}
	return 0
}

type PostCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewCount    int64 `protobuf:"varint,1,opt,name=viewCount,proto3" json:"viewCount,omitempty"`       // 浏览量
	LikeCount    int64 `protobuf:"varint,2,opt,name=likeCount,proto3" json:"likeCount,omitempty"`       // 点赞量
	CommentCount int64 `protobuf:"varint,3,opt,name=commentCount,proto3" json:"commentCount,omitempty"` // 评论量
	ShareCount   int64 `protobuf:"varint,4,opt,name=shareCount,proto3" json:"shareCount,omitempty"`     // 分享量
	CollectCount int64 `protobuf:"varint,5,opt,name=collectCount,proto3" json:"collectCount,omitempty"` // 收藏量
}

func (x *PostCount) Reset() {
	*x = PostCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCount) ProtoMessage() {}

func (x *PostCount) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCount.ProtoReflect.Descriptor instead.
func (*PostCount) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{14}
}

func (x *PostCount) GetViewCount() int64 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *PostCount) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *PostCount) GetCommentCount() int64 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *PostCount) GetShareCount() int64 {
	if x != nil {
		return x.ShareCount
	}
	return 0
}

func (x *PostCount) GetCollectCount() int64 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

type PostRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Liked     bool `protobuf:"varint,1,opt,name=Liked,proto3" json:"Liked,omitempty"`
	Collected bool `protobuf:"varint,2,opt,name=Collected,proto3" json:"Collected,omitempty"`
}

func (x *PostRelation) Reset() {
	*x = PostRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostRelation) ProtoMessage() {}

func (x *PostRelation) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostRelation.ProtoReflect.Descriptor instead.
func (*PostRelation) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{15}
}

func (x *PostRelation) GetLiked() bool {
	if x != nil {
		return x.Liked
	}
	return false
}

func (x *PostRelation) GetCollected() bool {
	if x != nil {
		return x.Collected
	}
	return false
}

type Post struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostId    string   `protobuf:"bytes,1,opt,name=postId,proto3" json:"postId,omitempty"`
	Title     string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Text      string   `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Url       string   `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Tags      []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	LikeCount int64    `protobuf:"varint,6,opt,name=likeCount,proto3" json:"likeCount,omitempty"` // 点赞量
}

func (x *Post) Reset() {
	*x = Post{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Post) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Post) ProtoMessage() {}

func (x *Post) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Post.ProtoReflect.Descriptor instead.
func (*Post) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{16}
}

func (x *Post) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

func (x *Post) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Post) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Post) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Post) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Post) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

type OwnPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostId    string   `protobuf:"bytes,1,opt,name=postId,proto3" json:"postId,omitempty"`
	Title     string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Text      string   `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Url       string   `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Tags      []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	LikeCount int64    `protobuf:"varint,6,opt,name=likeCount,proto3" json:"likeCount,omitempty"` // 点赞量
}

func (x *OwnPost) Reset() {
	*x = OwnPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnPost) ProtoMessage() {}

func (x *OwnPost) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnPost.ProtoReflect.Descriptor instead.
func (*OwnPost) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{17}
}

func (x *OwnPost) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

func (x *OwnPost) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *OwnPost) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *OwnPost) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *OwnPost) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *OwnPost) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationId  string `protobuf:"bytes,1,opt,name=notificationId,proto3" json:"notificationId,omitempty"`
	SourceUserId    string `protobuf:"bytes,2,opt,name=sourceUserId,proto3" json:"sourceUserId,omitempty"`
	SourceContentId string `protobuf:"bytes,3,opt,name=sourceContentId,proto3" json:"sourceContentId,omitempty"`
	Type            int64  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Text            string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	IsRead          bool   `protobuf:"varint,6,opt,name=isRead,proto3" json:"isRead,omitempty"`
	CreateTime      int64  `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{18}
}

func (x *Notification) GetNotificationId() string {
	if x != nil {
		return x.NotificationId
	}
	return ""
}

func (x *Notification) GetSourceUserId() string {
	if x != nil {
		return x.SourceUserId
	}
	return ""
}

func (x *Notification) GetSourceContentId() string {
	if x != nil {
		return x.SourceContentId
	}
	return ""
}

func (x *Notification) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Notification) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Notification) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *Notification) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

var File_cloudmind_core_api_common_proto protoreflect.FileDescriptor

var file_cloudmind_core_api_common_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x1a, 0x1a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64,
	0x2f, 0x73, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x2f,
	0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x22, 0x9a, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x81, 0x02,
	0x0a, 0x0b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x22, 0x9d, 0x04, 0x0a, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x3b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x48, 0x0a, 0x04, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x09,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe9, 0x01, 0x0a, 0x0d,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x9f, 0x02, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x74, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x74, 0x61, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x0d, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0c, 0x61,
	0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4b, 0x65,
	0x79, 0x12, 0x49, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x06, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xc9, 0x03, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x6f, 0x6e,
	0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x6f, 0x6e,
	0x6c, 0x79, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x03, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x5a, 0x6f, 0x6e, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x75,
	0x62, 0x5a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x6f, 0x6e, 0x6c, 0x79,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x06, 0x52, 0x10, 0x6f, 0x6e, 0x6c, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6e, 0x6c,
	0x79, 0x54, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x6c,
	0x79, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x5a, 0x6f, 0x6e, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x7a, 0x0a, 0x16, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x6e,
	0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6f,
	0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb6, 0x01, 0x0a,
	0x0e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x48, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x78, 0x22,
	0xaf, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x42, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x07, 0x4f, 0x77, 0x6e, 0x50, 0x6f, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6b,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x5d, 0x0a,
	0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x55,
	0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x04, 0x2a, 0x83, 0x01, 0x0a,
	0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x55, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x69, 0x6b, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x06, 0x2a, 0x39, 0x0a, 0x05, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x73, 0x5f, 0x6e,
	0x6f, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x73, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x10, 0x03, 0x2a, 0x59, 0x0a,
	0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x10, 0x02, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x69, 0x64, 0x6c, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloudmind_core_api_common_proto_rawDescOnce sync.Once
	file_cloudmind_core_api_common_proto_rawDescData = file_cloudmind_core_api_common_proto_rawDesc
)

func file_cloudmind_core_api_common_proto_rawDescGZIP() []byte {
	file_cloudmind_core_api_common_proto_rawDescOnce.Do(func() {
		file_cloudmind_core_api_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloudmind_core_api_common_proto_rawDescData)
	})
	return file_cloudmind_core_api_common_proto_rawDescData
}

var file_cloudmind_core_api_common_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_cloudmind_core_api_common_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_cloudmind_core_api_common_proto_goTypes = []interface{}{
	(TargetType)(0),                // 0: cloudmind.core_api.TargetType
	(RelationType)(0),              // 1: cloudmind.core_api.RelationType
	(IsDel)(0),                     // 2: cloudmind.core_api.IsDel
	(DocumentType)(0),              // 3: cloudmind.core_api.DocumentType
	(*User)(nil),                   // 4: cloudmind.core_api.User
	(*UserDetail)(nil),             // 5: cloudmind.core_api.UserDetail
	(*PrivateFile)(nil),            // 6: cloudmind.core_api.PrivateFile
	(*PublicFile)(nil),             // 7: cloudmind.core_api.PublicFile
	(*Zone)(nil),                   // 8: cloudmind.core_api.Zone
	(*ShareFile)(nil),              // 9: cloudmind.core_api.ShareFile
	(*ShareFileInfo)(nil),          // 10: cloudmind.core_api.ShareFileInfo
	(*ShareCode)(nil),              // 11: cloudmind.core_api.ShareCode
	(*SearchField)(nil),            // 12: cloudmind.core_api.SearchField
	(*SearchOptions)(nil),          // 13: cloudmind.core_api.SearchOptions
	(*FileFilterOptions)(nil),      // 14: cloudmind.core_api.FileFilterOptions
	(*ShareFileFilterOptions)(nil), // 15: cloudmind.core_api.ShareFileFilterOptions
	(*UserDetailInfo)(nil),         // 16: cloudmind.core_api.UserDetailInfo
	(*UserInfo)(nil),               // 17: cloudmind.core_api.UserInfo
	(*PostCount)(nil),              // 18: cloudmind.core_api.PostCount
	(*PostRelation)(nil),           // 19: cloudmind.core_api.PostRelation
	(*Post)(nil),                   // 20: cloudmind.core_api.Post
	(*OwnPost)(nil),                // 21: cloudmind.core_api.OwnPost
	(*Notification)(nil),           // 22: cloudmind.core_api.Notification
}
var file_cloudmind_core_api_common_proto_depIdxs = []int32{
	4,  // 0: cloudmind.core_api.PublicFile.author:type_name -> cloudmind.core_api.User
	18, // 1: cloudmind.core_api.PublicFile.fileCount:type_name -> cloudmind.core_api.PostCount
	19, // 2: cloudmind.core_api.PublicFile.fileRelation:type_name -> cloudmind.core_api.PostRelation
	12, // 3: cloudmind.core_api.SearchOptions.multiFieldsKey:type_name -> cloudmind.core_api.SearchField
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_cloudmind_core_api_common_proto_init() }
func file_cloudmind_core_api_common_proto_init() {
	if File_cloudmind_core_api_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloudmind_core_api_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Zone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileFilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareFileFilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Post); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cloudmind_core_api_common_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_cloudmind_core_api_common_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*SearchOptions_AllFieldsKey)(nil),
		(*SearchOptions_MultiFieldsKey)(nil),
	}
	file_cloudmind_core_api_common_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_cloudmind_core_api_common_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloudmind_core_api_common_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloudmind_core_api_common_proto_goTypes,
		DependencyIndexes: file_cloudmind_core_api_common_proto_depIdxs,
		EnumInfos:         file_cloudmind_core_api_common_proto_enumTypes,
		MessageInfos:      file_cloudmind_core_api_common_proto_msgTypes,
	}.Build()
	File_cloudmind_core_api_common_proto = out.File
	file_cloudmind_core_api_common_proto_rawDesc = nil
	file_cloudmind_core_api_common_proto_goTypes = nil
	file_cloudmind_core_api_common_proto_depIdxs = nil
}

var _ context.Context
