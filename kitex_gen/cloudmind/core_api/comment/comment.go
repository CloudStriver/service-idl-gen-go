// Code generated by Kitex v0.8.0. DO NOT EDIT.

package comment

import (
	"context"
	core_api "github.com/CloudStriver/service-idl-gen-go/kitex_gen/cloudmind/core_api"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return commentServiceInfo
}

var commentServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "comment"
	handlerType := (*core_api.Comment)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateComment":        kitex.NewMethodInfo(createCommentHandler, newCreateCommentArgs, newCreateCommentResult, false),
		"GetComment":           kitex.NewMethodInfo(getCommentHandler, newGetCommentArgs, newGetCommentResult, false),
		"GetComments":          kitex.NewMethodInfo(getCommentsHandler, newGetCommentsArgs, newGetCommentsResult, false),
		"DeleteComment":        kitex.NewMethodInfo(deleteCommentHandler, newDeleteCommentArgs, newDeleteCommentResult, false),
		"UpdateComment":        kitex.NewMethodInfo(updateCommentHandler, newUpdateCommentArgs, newUpdateCommentResult, false),
		"SetCommentAttrs":      kitex.NewMethodInfo(setCommentAttrsHandler, newSetCommentAttrsArgs, newSetCommentAttrsResult, false),
		"GetCommentSubject":    kitex.NewMethodInfo(getCommentSubjectHandler, newGetCommentSubjectArgs, newGetCommentSubjectResult, false),
		"UpdateCommentSubject": kitex.NewMethodInfo(updateCommentSubjectHandler, newUpdateCommentSubjectArgs, newUpdateCommentSubjectResult, false),
		"DeleteCommentSubject": kitex.NewMethodInfo(deleteCommentSubjectHandler, newDeleteCommentSubjectArgs, newDeleteCommentSubjectResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "cloudmind.core_api",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func createCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreateCommentReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Comment).CreateComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateCommentArgs:
		success, err := handler.(core_api.Comment).CreateComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateCommentResult)
		realResult.Success = success
	}
	return nil
}
func newCreateCommentArgs() interface{} {
	return &CreateCommentArgs{}
}

func newCreateCommentResult() interface{} {
	return &CreateCommentResult{}
}

type CreateCommentArgs struct {
	Req *core_api.CreateCommentReq
}

func (p *CreateCommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CreateCommentReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateCommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateCommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateCommentArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreateCommentReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateCommentArgs_Req_DEFAULT *core_api.CreateCommentReq

func (p *CreateCommentArgs) GetReq() *core_api.CreateCommentReq {
	if !p.IsSetReq() {
		return CreateCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateCommentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateCommentResult struct {
	Success *core_api.CreateCommentResp
}

var CreateCommentResult_Success_DEFAULT *core_api.CreateCommentResp

func (p *CreateCommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.CreateCommentResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateCommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateCommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateCommentResult) Unmarshal(in []byte) error {
	msg := new(core_api.CreateCommentResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateCommentResult) GetSuccess() *core_api.CreateCommentResp {
	if !p.IsSetSuccess() {
		return CreateCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.CreateCommentResp)
}

func (p *CreateCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateCommentResult) GetResult() interface{} {
	return p.Success
}

func getCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetCommentReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Comment).GetComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetCommentArgs:
		success, err := handler.(core_api.Comment).GetComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCommentResult)
		realResult.Success = success
	}
	return nil
}
func newGetCommentArgs() interface{} {
	return &GetCommentArgs{}
}

func newGetCommentResult() interface{} {
	return &GetCommentResult{}
}

type GetCommentArgs struct {
	Req *core_api.GetCommentReq
}

func (p *GetCommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetCommentReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetCommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetCommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetCommentArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetCommentReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCommentArgs_Req_DEFAULT *core_api.GetCommentReq

func (p *GetCommentArgs) GetReq() *core_api.GetCommentReq {
	if !p.IsSetReq() {
		return GetCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetCommentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetCommentResult struct {
	Success *core_api.GetCommentResp
}

var GetCommentResult_Success_DEFAULT *core_api.GetCommentResp

func (p *GetCommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetCommentResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetCommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetCommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetCommentResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetCommentResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCommentResult) GetSuccess() *core_api.GetCommentResp {
	if !p.IsSetSuccess() {
		return GetCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetCommentResp)
}

func (p *GetCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCommentResult) GetResult() interface{} {
	return p.Success
}

func getCommentsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetCommentsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Comment).GetComments(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetCommentsArgs:
		success, err := handler.(core_api.Comment).GetComments(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCommentsResult)
		realResult.Success = success
	}
	return nil
}
func newGetCommentsArgs() interface{} {
	return &GetCommentsArgs{}
}

func newGetCommentsResult() interface{} {
	return &GetCommentsResult{}
}

type GetCommentsArgs struct {
	Req *core_api.GetCommentsReq
}

func (p *GetCommentsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetCommentsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetCommentsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetCommentsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetCommentsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetCommentsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetCommentsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCommentsArgs_Req_DEFAULT *core_api.GetCommentsReq

func (p *GetCommentsArgs) GetReq() *core_api.GetCommentsReq {
	if !p.IsSetReq() {
		return GetCommentsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCommentsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetCommentsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetCommentsResult struct {
	Success *core_api.GetCommentsResp
}

var GetCommentsResult_Success_DEFAULT *core_api.GetCommentsResp

func (p *GetCommentsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetCommentsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetCommentsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetCommentsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetCommentsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetCommentsResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetCommentsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCommentsResult) GetSuccess() *core_api.GetCommentsResp {
	if !p.IsSetSuccess() {
		return GetCommentsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCommentsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetCommentsResp)
}

func (p *GetCommentsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCommentsResult) GetResult() interface{} {
	return p.Success
}

func deleteCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteCommentReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Comment).DeleteComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteCommentArgs:
		success, err := handler.(core_api.Comment).DeleteComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteCommentResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteCommentArgs() interface{} {
	return &DeleteCommentArgs{}
}

func newDeleteCommentResult() interface{} {
	return &DeleteCommentResult{}
}

type DeleteCommentArgs struct {
	Req *core_api.DeleteCommentReq
}

func (p *DeleteCommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeleteCommentReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteCommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteCommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteCommentArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteCommentReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteCommentArgs_Req_DEFAULT *core_api.DeleteCommentReq

func (p *DeleteCommentArgs) GetReq() *core_api.DeleteCommentReq {
	if !p.IsSetReq() {
		return DeleteCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteCommentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteCommentResult struct {
	Success *core_api.DeleteCommentResp
}

var DeleteCommentResult_Success_DEFAULT *core_api.DeleteCommentResp

func (p *DeleteCommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.DeleteCommentResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteCommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteCommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteCommentResult) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteCommentResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteCommentResult) GetSuccess() *core_api.DeleteCommentResp {
	if !p.IsSetSuccess() {
		return DeleteCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.DeleteCommentResp)
}

func (p *DeleteCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteCommentResult) GetResult() interface{} {
	return p.Success
}

func updateCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateCommentReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Comment).UpdateComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateCommentArgs:
		success, err := handler.(core_api.Comment).UpdateComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateCommentResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateCommentArgs() interface{} {
	return &UpdateCommentArgs{}
}

func newUpdateCommentResult() interface{} {
	return &UpdateCommentResult{}
}

type UpdateCommentArgs struct {
	Req *core_api.UpdateCommentReq
}

func (p *UpdateCommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateCommentReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateCommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateCommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateCommentArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateCommentReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateCommentArgs_Req_DEFAULT *core_api.UpdateCommentReq

func (p *UpdateCommentArgs) GetReq() *core_api.UpdateCommentReq {
	if !p.IsSetReq() {
		return UpdateCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateCommentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateCommentResult struct {
	Success *core_api.UpdateCommentResp
}

var UpdateCommentResult_Success_DEFAULT *core_api.UpdateCommentResp

func (p *UpdateCommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.UpdateCommentResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateCommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateCommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateCommentResult) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateCommentResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateCommentResult) GetSuccess() *core_api.UpdateCommentResp {
	if !p.IsSetSuccess() {
		return UpdateCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.UpdateCommentResp)
}

func (p *UpdateCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateCommentResult) GetResult() interface{} {
	return p.Success
}

func setCommentAttrsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SetCommentAttrsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Comment).SetCommentAttrs(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SetCommentAttrsArgs:
		success, err := handler.(core_api.Comment).SetCommentAttrs(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SetCommentAttrsResult)
		realResult.Success = success
	}
	return nil
}
func newSetCommentAttrsArgs() interface{} {
	return &SetCommentAttrsArgs{}
}

func newSetCommentAttrsResult() interface{} {
	return &SetCommentAttrsResult{}
}

type SetCommentAttrsArgs struct {
	Req *core_api.SetCommentAttrsReq
}

func (p *SetCommentAttrsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SetCommentAttrsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SetCommentAttrsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SetCommentAttrsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SetCommentAttrsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SetCommentAttrsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SetCommentAttrsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SetCommentAttrsArgs_Req_DEFAULT *core_api.SetCommentAttrsReq

func (p *SetCommentAttrsArgs) GetReq() *core_api.SetCommentAttrsReq {
	if !p.IsSetReq() {
		return SetCommentAttrsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SetCommentAttrsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SetCommentAttrsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SetCommentAttrsResult struct {
	Success *core_api.SetCommentAttrsResp
}

var SetCommentAttrsResult_Success_DEFAULT *core_api.SetCommentAttrsResp

func (p *SetCommentAttrsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.SetCommentAttrsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SetCommentAttrsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SetCommentAttrsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SetCommentAttrsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SetCommentAttrsResult) Unmarshal(in []byte) error {
	msg := new(core_api.SetCommentAttrsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SetCommentAttrsResult) GetSuccess() *core_api.SetCommentAttrsResp {
	if !p.IsSetSuccess() {
		return SetCommentAttrsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SetCommentAttrsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SetCommentAttrsResp)
}

func (p *SetCommentAttrsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SetCommentAttrsResult) GetResult() interface{} {
	return p.Success
}

func getCommentSubjectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetCommentSubjectReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Comment).GetCommentSubject(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetCommentSubjectArgs:
		success, err := handler.(core_api.Comment).GetCommentSubject(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCommentSubjectResult)
		realResult.Success = success
	}
	return nil
}
func newGetCommentSubjectArgs() interface{} {
	return &GetCommentSubjectArgs{}
}

func newGetCommentSubjectResult() interface{} {
	return &GetCommentSubjectResult{}
}

type GetCommentSubjectArgs struct {
	Req *core_api.GetCommentSubjectReq
}

func (p *GetCommentSubjectArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetCommentSubjectReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetCommentSubjectArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetCommentSubjectArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetCommentSubjectArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetCommentSubjectArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetCommentSubjectReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCommentSubjectArgs_Req_DEFAULT *core_api.GetCommentSubjectReq

func (p *GetCommentSubjectArgs) GetReq() *core_api.GetCommentSubjectReq {
	if !p.IsSetReq() {
		return GetCommentSubjectArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCommentSubjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetCommentSubjectArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetCommentSubjectResult struct {
	Success *core_api.GetCommentSubjectResp
}

var GetCommentSubjectResult_Success_DEFAULT *core_api.GetCommentSubjectResp

func (p *GetCommentSubjectResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetCommentSubjectResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetCommentSubjectResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetCommentSubjectResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetCommentSubjectResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetCommentSubjectResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetCommentSubjectResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCommentSubjectResult) GetSuccess() *core_api.GetCommentSubjectResp {
	if !p.IsSetSuccess() {
		return GetCommentSubjectResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCommentSubjectResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetCommentSubjectResp)
}

func (p *GetCommentSubjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCommentSubjectResult) GetResult() interface{} {
	return p.Success
}

func updateCommentSubjectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateCommentSubjectReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Comment).UpdateCommentSubject(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateCommentSubjectArgs:
		success, err := handler.(core_api.Comment).UpdateCommentSubject(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateCommentSubjectResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateCommentSubjectArgs() interface{} {
	return &UpdateCommentSubjectArgs{}
}

func newUpdateCommentSubjectResult() interface{} {
	return &UpdateCommentSubjectResult{}
}

type UpdateCommentSubjectArgs struct {
	Req *core_api.UpdateCommentSubjectReq
}

func (p *UpdateCommentSubjectArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateCommentSubjectReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateCommentSubjectArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateCommentSubjectArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateCommentSubjectArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateCommentSubjectArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateCommentSubjectReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateCommentSubjectArgs_Req_DEFAULT *core_api.UpdateCommentSubjectReq

func (p *UpdateCommentSubjectArgs) GetReq() *core_api.UpdateCommentSubjectReq {
	if !p.IsSetReq() {
		return UpdateCommentSubjectArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateCommentSubjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateCommentSubjectArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateCommentSubjectResult struct {
	Success *core_api.UpdateCommentSubjectResp
}

var UpdateCommentSubjectResult_Success_DEFAULT *core_api.UpdateCommentSubjectResp

func (p *UpdateCommentSubjectResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.UpdateCommentSubjectResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateCommentSubjectResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateCommentSubjectResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateCommentSubjectResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateCommentSubjectResult) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateCommentSubjectResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateCommentSubjectResult) GetSuccess() *core_api.UpdateCommentSubjectResp {
	if !p.IsSetSuccess() {
		return UpdateCommentSubjectResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateCommentSubjectResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.UpdateCommentSubjectResp)
}

func (p *UpdateCommentSubjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateCommentSubjectResult) GetResult() interface{} {
	return p.Success
}

func deleteCommentSubjectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteCommentSubjectReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Comment).DeleteCommentSubject(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteCommentSubjectArgs:
		success, err := handler.(core_api.Comment).DeleteCommentSubject(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteCommentSubjectResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteCommentSubjectArgs() interface{} {
	return &DeleteCommentSubjectArgs{}
}

func newDeleteCommentSubjectResult() interface{} {
	return &DeleteCommentSubjectResult{}
}

type DeleteCommentSubjectArgs struct {
	Req *core_api.DeleteCommentSubjectReq
}

func (p *DeleteCommentSubjectArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeleteCommentSubjectReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteCommentSubjectArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteCommentSubjectArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteCommentSubjectArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteCommentSubjectArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteCommentSubjectReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteCommentSubjectArgs_Req_DEFAULT *core_api.DeleteCommentSubjectReq

func (p *DeleteCommentSubjectArgs) GetReq() *core_api.DeleteCommentSubjectReq {
	if !p.IsSetReq() {
		return DeleteCommentSubjectArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteCommentSubjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteCommentSubjectArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteCommentSubjectResult struct {
	Success *core_api.DeleteCommentSubjectResp
}

var DeleteCommentSubjectResult_Success_DEFAULT *core_api.DeleteCommentSubjectResp

func (p *DeleteCommentSubjectResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.DeleteCommentSubjectResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteCommentSubjectResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteCommentSubjectResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteCommentSubjectResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteCommentSubjectResult) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteCommentSubjectResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteCommentSubjectResult) GetSuccess() *core_api.DeleteCommentSubjectResp {
	if !p.IsSetSuccess() {
		return DeleteCommentSubjectResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteCommentSubjectResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.DeleteCommentSubjectResp)
}

func (p *DeleteCommentSubjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteCommentSubjectResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateComment(ctx context.Context, Req *core_api.CreateCommentReq) (r *core_api.CreateCommentResp, err error) {
	var _args CreateCommentArgs
	_args.Req = Req
	var _result CreateCommentResult
	if err = p.c.Call(ctx, "CreateComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetComment(ctx context.Context, Req *core_api.GetCommentReq) (r *core_api.GetCommentResp, err error) {
	var _args GetCommentArgs
	_args.Req = Req
	var _result GetCommentResult
	if err = p.c.Call(ctx, "GetComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetComments(ctx context.Context, Req *core_api.GetCommentsReq) (r *core_api.GetCommentsResp, err error) {
	var _args GetCommentsArgs
	_args.Req = Req
	var _result GetCommentsResult
	if err = p.c.Call(ctx, "GetComments", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteComment(ctx context.Context, Req *core_api.DeleteCommentReq) (r *core_api.DeleteCommentResp, err error) {
	var _args DeleteCommentArgs
	_args.Req = Req
	var _result DeleteCommentResult
	if err = p.c.Call(ctx, "DeleteComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateComment(ctx context.Context, Req *core_api.UpdateCommentReq) (r *core_api.UpdateCommentResp, err error) {
	var _args UpdateCommentArgs
	_args.Req = Req
	var _result UpdateCommentResult
	if err = p.c.Call(ctx, "UpdateComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetCommentAttrs(ctx context.Context, Req *core_api.SetCommentAttrsReq) (r *core_api.SetCommentAttrsResp, err error) {
	var _args SetCommentAttrsArgs
	_args.Req = Req
	var _result SetCommentAttrsResult
	if err = p.c.Call(ctx, "SetCommentAttrs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentSubject(ctx context.Context, Req *core_api.GetCommentSubjectReq) (r *core_api.GetCommentSubjectResp, err error) {
	var _args GetCommentSubjectArgs
	_args.Req = Req
	var _result GetCommentSubjectResult
	if err = p.c.Call(ctx, "GetCommentSubject", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCommentSubject(ctx context.Context, Req *core_api.UpdateCommentSubjectReq) (r *core_api.UpdateCommentSubjectResp, err error) {
	var _args UpdateCommentSubjectArgs
	_args.Req = Req
	var _result UpdateCommentSubjectResult
	if err = p.c.Call(ctx, "UpdateCommentSubject", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCommentSubject(ctx context.Context, Req *core_api.DeleteCommentSubjectReq) (r *core_api.DeleteCommentSubjectResp, err error) {
	var _args DeleteCommentSubjectArgs
	_args.Req = Req
	var _result DeleteCommentSubjectResult
	if err = p.c.Call(ctx, "DeleteCommentSubject", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
