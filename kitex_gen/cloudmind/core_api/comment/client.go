// Code generated by Kitex v0.8.0. DO NOT EDIT.

package comment

import (
	"context"
	core_api "github.com/CloudStriver/service-idl-gen-go/kitex_gen/cloudmind/core_api"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateComment(ctx context.Context, Req *core_api.CreateCommentReq, callOptions ...callopt.Option) (r *core_api.CreateCommentResp, err error)
	GetComment(ctx context.Context, Req *core_api.GetCommentReq, callOptions ...callopt.Option) (r *core_api.GetCommentResp, err error)
	GetComments(ctx context.Context, Req *core_api.GetCommentsReq, callOptions ...callopt.Option) (r *core_api.GetCommentsResp, err error)
	DeleteComment(ctx context.Context, Req *core_api.DeleteCommentReq, callOptions ...callopt.Option) (r *core_api.DeleteCommentResp, err error)
	UpdateComment(ctx context.Context, Req *core_api.UpdateCommentReq, callOptions ...callopt.Option) (r *core_api.UpdateCommentResp, err error)
	SetCommentState(ctx context.Context, Req *core_api.SetCommentStateReq, callOptions ...callopt.Option) (r *core_api.SetCommentStateResp, err error)
	SetCommentAttrs(ctx context.Context, Req *core_api.SetCommentAttrsReq, callOptions ...callopt.Option) (r *core_api.SetCommentAttrsResp, err error)
	GetCommentSubject(ctx context.Context, Req *core_api.GetCommentSubjectReq, callOptions ...callopt.Option) (r *core_api.GetCommentSubjectResp, err error)
	CreateCommentSubject(ctx context.Context, Req *core_api.CreateCommentSubjectReq, callOptions ...callopt.Option) (r *core_api.CreateCommentSubjectResp, err error)
	UpdateCommentSubject(ctx context.Context, Req *core_api.UpdateCommentSubjectReq, callOptions ...callopt.Option) (r *core_api.UpdateCommentSubjectResp, err error)
	DeleteCommentSubject(ctx context.Context, Req *core_api.DeleteCommentSubjectReq, callOptions ...callopt.Option) (r *core_api.DeleteCommentSubjectResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kCommentClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kCommentClient struct {
	*kClient
}

func (p *kCommentClient) CreateComment(ctx context.Context, Req *core_api.CreateCommentReq, callOptions ...callopt.Option) (r *core_api.CreateCommentResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateComment(ctx, Req)
}

func (p *kCommentClient) GetComment(ctx context.Context, Req *core_api.GetCommentReq, callOptions ...callopt.Option) (r *core_api.GetCommentResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetComment(ctx, Req)
}

func (p *kCommentClient) GetComments(ctx context.Context, Req *core_api.GetCommentsReq, callOptions ...callopt.Option) (r *core_api.GetCommentsResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetComments(ctx, Req)
}

func (p *kCommentClient) DeleteComment(ctx context.Context, Req *core_api.DeleteCommentReq, callOptions ...callopt.Option) (r *core_api.DeleteCommentResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteComment(ctx, Req)
}

func (p *kCommentClient) UpdateComment(ctx context.Context, Req *core_api.UpdateCommentReq, callOptions ...callopt.Option) (r *core_api.UpdateCommentResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateComment(ctx, Req)
}

func (p *kCommentClient) SetCommentState(ctx context.Context, Req *core_api.SetCommentStateReq, callOptions ...callopt.Option) (r *core_api.SetCommentStateResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SetCommentState(ctx, Req)
}

func (p *kCommentClient) SetCommentAttrs(ctx context.Context, Req *core_api.SetCommentAttrsReq, callOptions ...callopt.Option) (r *core_api.SetCommentAttrsResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SetCommentAttrs(ctx, Req)
}

func (p *kCommentClient) GetCommentSubject(ctx context.Context, Req *core_api.GetCommentSubjectReq, callOptions ...callopt.Option) (r *core_api.GetCommentSubjectResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCommentSubject(ctx, Req)
}

func (p *kCommentClient) CreateCommentSubject(ctx context.Context, Req *core_api.CreateCommentSubjectReq, callOptions ...callopt.Option) (r *core_api.CreateCommentSubjectResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateCommentSubject(ctx, Req)
}

func (p *kCommentClient) UpdateCommentSubject(ctx context.Context, Req *core_api.UpdateCommentSubjectReq, callOptions ...callopt.Option) (r *core_api.UpdateCommentSubjectResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateCommentSubject(ctx, Req)
}

func (p *kCommentClient) DeleteCommentSubject(ctx context.Context, Req *core_api.DeleteCommentSubjectReq, callOptions ...callopt.Option) (r *core_api.DeleteCommentSubjectResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteCommentSubject(ctx, Req)
}
