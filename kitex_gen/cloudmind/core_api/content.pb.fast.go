// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package core_api

import (
	fmt "fmt"
	basic "github.com/CloudStriver/service-idl-gen-go/kitex_gen/basic"
	http "github.com/CloudStriver/service-idl-gen-go/kitex_gen/http"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *UpdateUserReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateUserReq[number], err)
}

func (x *UpdateUserReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v UserDetail
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UserDetail = &v
	return offset, nil
}

func (x *UpdateUserResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *SearchUserReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchUserReq[number], err)
}

func (x *SearchUserReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Keyword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchUserReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Limit = &tmp
	return offset, err
}

func (x *SearchUserReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.LastToken = &tmp
	return offset, err
}

func (x *SearchUserReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadBool(buf, _type)
	x.Backward = &tmp
	return offset, err
}

func (x *SearchUserReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Offset = &tmp
	return offset, err
}

func (x *SearchUserResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchUserResp[number], err)
}

func (x *SearchUserResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v User
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Users = append(x.Users, &v)
	return offset, nil
}

func (x *SearchUserResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.LastToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchUserResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetPrivateFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPrivateFileReq[number], err)
}

func (x *GetPrivateFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPrivateFileReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.IsGetSize, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetPrivateFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPrivateFileResp[number], err)
}

func (x *GetPrivateFileResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PrivateFile
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.File = &v
	return offset, nil
}

func (x *GetPublicFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPublicFileReq[number], err)
}

func (x *GetPublicFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPublicFileReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.IsGetSize, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetPublicFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPublicFileResp[number], err)
}

func (x *GetPublicFileResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PublicFile
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.File = &v
	return offset, nil
}

func (x *GetPrivateFilesReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPrivateFilesReq[number], err)
}

func (x *GetPrivateFilesReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.AllFieldsKey = &tmp
	return offset, err
}

func (x *GetPrivateFilesReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Name = &tmp
	return offset, err
}

func (x *GetPrivateFilesReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Id = &tmp
	return offset, err
}

func (x *GetPrivateFilesReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.SortType = &tmp
	return offset, err
}

func (x *GetPrivateFilesReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyFatherId = &tmp
	return offset, err
}

func (x *GetPrivateFilesReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OnlyType = append(x.OnlyType, v)
	return offset, err
}

func (x *GetPrivateFilesReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Limit = &tmp
	return offset, err
}

func (x *GetPrivateFilesReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.LastToken = &tmp
	return offset, err
}

func (x *GetPrivateFilesReq) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadBool(buf, _type)
	x.Backward = &tmp
	return offset, err
}

func (x *GetPrivateFilesReq) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Offset = &tmp
	return offset, err
}

func (x *GetPrivateFilesResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPrivateFilesResp[number], err)
}

func (x *GetPrivateFilesResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PrivateFile
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *GetPrivateFilesResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetPrivateFilesResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPrivateFilesResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.FatherNamePath, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPrivateFilesResp) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.FatherIdPath, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPublicFilesReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPublicFilesReq[number], err)
}

func (x *GetPublicFilesReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.AllFieldsKey = &tmp
	return offset, err
}

func (x *GetPublicFilesReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Name = &tmp
	return offset, err
}

func (x *GetPublicFilesReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Id = &tmp
	return offset, err
}

func (x *GetPublicFilesReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Label = &tmp
	return offset, err
}

func (x *GetPublicFilesReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Description = &tmp
	return offset, err
}

func (x *GetPublicFilesReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.SortType = &tmp
	return offset, err
}

func (x *GetPublicFilesReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyFatherId = &tmp
	return offset, err
}

func (x *GetPublicFilesReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OnlyType = append(x.OnlyType, v)
	return offset, err
}

func (x *GetPublicFilesReq) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyZone = &tmp
	return offset, err
}

func (x *GetPublicFilesReq) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlySubZone = &tmp
	return offset, err
}

func (x *GetPublicFilesReq) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Limit = &tmp
	return offset, err
}

func (x *GetPublicFilesReq) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.LastToken = &tmp
	return offset, err
}

func (x *GetPublicFilesReq) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadBool(buf, _type)
	x.Backward = &tmp
	return offset, err
}

func (x *GetPublicFilesReq) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Offset = &tmp
	return offset, err
}

func (x *GetPublicFilesResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPublicFilesResp[number], err)
}

func (x *GetPublicFilesResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PublicFile
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *GetPublicFilesResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetPublicFilesResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPublicFilesResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.FatherNamePath, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPublicFilesResp) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.FatherIdPath, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetRecycleBinFilesReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetRecycleBinFilesReq[number], err)
}

func (x *GetRecycleBinFilesReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Limit = &tmp
	return offset, err
}

func (x *GetRecycleBinFilesReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.LastToken = &tmp
	return offset, err
}

func (x *GetRecycleBinFilesReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadBool(buf, _type)
	x.Backward = &tmp
	return offset, err
}

func (x *GetRecycleBinFilesReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Offset = &tmp
	return offset, err
}

func (x *GetRecycleBinFilesReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.SortType = &tmp
	return offset, err
}

func (x *GetRecycleBinFilesResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetRecycleBinFilesResp[number], err)
}

func (x *GetRecycleBinFilesResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PrivateFile
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *GetRecycleBinFilesResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetRecycleBinFilesResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileBySharingCodeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileBySharingCodeReq[number], err)
}

func (x *GetFileBySharingCodeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.SharingCode, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileBySharingCodeReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Key, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileBySharingCodeReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyFileId = &tmp
	return offset, err
}

func (x *GetFileBySharingCodeReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyFatherId = &tmp
	return offset, err
}

func (x *GetFileBySharingCodeReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Limit = &tmp
	return offset, err
}

func (x *GetFileBySharingCodeReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.LastToken = &tmp
	return offset, err
}

func (x *GetFileBySharingCodeReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadBool(buf, _type)
	x.Backward = &tmp
	return offset, err
}

func (x *GetFileBySharingCodeReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Offset = &tmp
	return offset, err
}

func (x *GetFileBySharingCodeResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileBySharingCodeResp[number], err)
}

func (x *GetFileBySharingCodeResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PrivateFile
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *GetFileBySharingCodeResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetFileBySharingCodeResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateFileReq[number], err)
}

func (x *CreateFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateFileReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateFileReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateFileReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.SpaceSize = &tmp
	return offset, err
}

func (x *CreateFileReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Md5, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateFileResp[number], err)
}

func (x *CreateFileResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateFileReq[number], err)
}

func (x *UpdateFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateFileReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *MoveFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MoveFileReq[number], err)
}

func (x *MoveFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MoveFileReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MoveFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *SaveFileToPrivateSpaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SaveFileToPrivateSpaceReq[number], err)
}

func (x *SaveFileToPrivateSpaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SaveFileToPrivateSpaceReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SaveFileToPrivateSpaceReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.DocumentType = DocumentType(v)
	return offset, nil
}

func (x *SaveFileToPrivateSpaceResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SaveFileToPrivateSpaceResp[number], err)
}

func (x *SaveFileToPrivateSpaceResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddFileToPublicSpaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddFileToPublicSpaceReq[number], err)
}

func (x *AddFileToPublicSpaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddFileToPublicSpaceReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Zone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddFileToPublicSpaceReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.SubZone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddFileToPublicSpaceReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddFileToPublicSpaceReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Labels = append(x.Labels, v)
	return offset, err
}

func (x *AddFileToPublicSpaceResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeleteFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteFileReq[number], err)
}

func (x *DeleteFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteFileReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.DeleteType = IsDel(v)
	return offset, nil
}

func (x *DeleteFileReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ClearCommunity, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *DeleteFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *CompletelyRemoveFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CompletelyRemoveFileReq[number], err)
}

func (x *CompletelyRemoveFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CompletelyRemoveFileReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CompletelyRemoveFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *RecoverRecycleBinFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RecoverRecycleBinFileReq[number], err)
}

func (x *RecoverRecycleBinFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RecoverRecycleBinFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *CreateZoneReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateZoneReq[number], err)
}

func (x *CreateZoneReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateZoneReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Value, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateZoneResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateZoneResp[number], err)
}

func (x *CreateZoneResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetZoneReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetZoneReq[number], err)
}

func (x *GetZoneReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetZoneResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetZoneResp[number], err)
}

func (x *GetZoneResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Zone
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Zone = &v
	return offset, nil
}

func (x *UpdateZoneReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateZoneReq[number], err)
}

func (x *UpdateZoneReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Zone
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Zone = &v
	return offset, nil
}

func (x *UpdateZoneResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeleteZoneReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteZoneReq[number], err)
}

func (x *DeleteZoneReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteZoneResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *CreateShareCodeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateShareCodeReq[number], err)
}

func (x *CreateShareCodeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateShareCodeReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.EffectiveTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateShareCodeReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.FileList = append(x.FileList, v)
	return offset, err
}

func (x *CreateShareCodeResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateShareCodeResp[number], err)
}

func (x *CreateShareCodeResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateShareCodeResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Key, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetShareListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetShareListReq[number], err)
}

func (x *GetShareListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Limit = &tmp
	return offset, err
}

func (x *GetShareListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.LastToken = &tmp
	return offset, err
}

func (x *GetShareListReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadBool(buf, _type)
	x.Backward = &tmp
	return offset, err
}

func (x *GetShareListReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Offset = &tmp
	return offset, err
}

func (x *GetShareListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetShareListResp[number], err)
}

func (x *GetShareListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v ShareCode
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ShareCodes = append(x.ShareCodes, &v)
	return offset, nil
}

func (x *GetShareListResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetShareListResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateShareCodeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateShareCodeReq[number], err)
}

func (x *UpdateShareCodeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateShareCodeReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.BrowseNumber, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateShareCodeResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeleteShareCodeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteShareCodeReq[number], err)
}

func (x *DeleteShareCodeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OnlyCode, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteShareCodeResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *ParsingShareCodeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ParsingShareCodeReq[number], err)
}

func (x *ParsingShareCodeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ParsingShareCodeReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Key, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ParsingShareCodeResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ParsingShareCodeResp[number], err)
}

func (x *ParsingShareCodeResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v ShareFile
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ShareFile = &v
	return offset, nil
}

func (x *AskUploadFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AskUploadFileReq[number], err)
}

func (x *AskUploadFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AskUploadFileReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FileSize, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AskUploadFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AskUploadFileResp[number], err)
}

func (x *AskUploadFileResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.TmpSecretId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AskUploadFileResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.TmpSecretKey, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AskUploadFileResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.StartTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AskUploadFileResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ExpiredTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AskUploadFileResp) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.SessionToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AskDownloadFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AskDownloadFileReq[number], err)
}

func (x *AskDownloadFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.FileIds = append(x.FileIds, v)
	return offset, err
}

func (x *AskDownloadFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AskDownloadFileResp[number], err)
}

func (x *AskDownloadFileResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Urls = append(x.Urls, v)
	return offset, err
}

func (x *GetUserReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserReq[number], err)
}

func (x *GetUserReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserResp[number], err)
}

func (x *GetUserResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v User
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.User = &v
	return offset, nil
}

func (x *CreateUserReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateUserReq[number], err)
}

func (x *CreateUserReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v UserInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UserInfo = &v
	return offset, nil
}

func (x *CreateUserResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetUserDetailReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetUserDetailResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserDetailResp[number], err)
}

func (x *GetUserDetailResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v UserDetail
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UserDetail = &v
	return offset, nil
}

func (x *DeleteUserReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteUserReq[number], err)
}

func (x *DeleteUserReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteUserResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *AskUploadAvatarReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AskUploadAvatarReq[number], err)
}

func (x *AskUploadAvatarReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AskUploadAvatarReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AvatarSize, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AskUploadAvatarResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AskUploadAvatarResp[number], err)
}

func (x *AskUploadAvatarResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.TmpSecretId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AskUploadAvatarResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.TmpSecretKey, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AskUploadAvatarResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.StartTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AskUploadAvatarResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ExpiredTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AskUploadAvatarResp) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.SessionToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreatePostReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreatePostReq[number], err)
}

func (x *CreatePostReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PostInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PostInfo = &v
	return offset, nil
}

func (x *CreatePostResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeletePostReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeletePostReq[number], err)
}

func (x *DeletePostReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PostId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeletePostResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *UpdatePostReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdatePostReq[number], err)
}

func (x *UpdatePostReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PostInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PostInfo = &v
	return offset, nil
}

func (x *UpdatePostResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetPostReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPostReq[number], err)
}

func (x *GetPostReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PostId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPostResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPostResp[number], err)
}

func (x *GetPostResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Post
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Post = &v
	return offset, nil
}

func (x *GetPostsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPostsReq[number], err)
}

func (x *GetPostsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v SearchOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SearchOptions = &v
	return offset, nil
}

func (x *GetPostsReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v PostFilterOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PostFilterOptions = &v
	return offset, nil
}

func (x *GetPostsReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *GetPostsResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPostsResp[number], err)
}

func (x *GetPostsResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Post
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Posts = append(x.Posts, &v)
	return offset, nil
}

func (x *GetPostsResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetPostsResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateUserReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateUserReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserDetail == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUserDetail())
	return offset
}

func (x *UpdateUserResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *SearchUserReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *SearchUserReq) fastWriteField1(buf []byte) (offset int) {
	if x.Keyword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetKeyword())
	return offset
}

func (x *SearchUserReq) fastWriteField2(buf []byte) (offset int) {
	if x.Limit == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetLimit())
	return offset
}

func (x *SearchUserReq) fastWriteField3(buf []byte) (offset int) {
	if x.LastToken == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetLastToken())
	return offset
}

func (x *SearchUserReq) fastWriteField4(buf []byte) (offset int) {
	if x.Backward == nil {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 4, x.GetBackward())
	return offset
}

func (x *SearchUserReq) fastWriteField5(buf []byte) (offset int) {
	if x.Offset == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetOffset())
	return offset
}

func (x *SearchUserResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SearchUserResp) fastWriteField1(buf []byte) (offset int) {
	if x.Users == nil {
		return offset
	}
	for i := range x.GetUsers() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUsers()[i])
	}
	return offset
}

func (x *SearchUserResp) fastWriteField2(buf []byte) (offset int) {
	if x.LastToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetLastToken())
	return offset
}

func (x *SearchUserResp) fastWriteField3(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetTotal())
	return offset
}

func (x *GetPrivateFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetPrivateFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *GetPrivateFileReq) fastWriteField2(buf []byte) (offset int) {
	if !x.IsGetSize {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetIsGetSize())
	return offset
}

func (x *GetPrivateFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPrivateFileResp) fastWriteField1(buf []byte) (offset int) {
	if x.File == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFile())
	return offset
}

func (x *GetPublicFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetPublicFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *GetPublicFileReq) fastWriteField2(buf []byte) (offset int) {
	if !x.IsGetSize {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetIsGetSize())
	return offset
}

func (x *GetPublicFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPublicFileResp) fastWriteField1(buf []byte) (offset int) {
	if x.File == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFile())
	return offset
}

func (x *GetPrivateFilesReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	return offset
}

func (x *GetPrivateFilesReq) fastWriteField1(buf []byte) (offset int) {
	if x.AllFieldsKey == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAllFieldsKey())
	return offset
}

func (x *GetPrivateFilesReq) fastWriteField2(buf []byte) (offset int) {
	if x.Name == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *GetPrivateFilesReq) fastWriteField3(buf []byte) (offset int) {
	if x.Id == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetId())
	return offset
}

func (x *GetPrivateFilesReq) fastWriteField4(buf []byte) (offset int) {
	if x.SortType == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetSortType())
	return offset
}

func (x *GetPrivateFilesReq) fastWriteField5(buf []byte) (offset int) {
	if x.OnlyFatherId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetOnlyFatherId())
	return offset
}

func (x *GetPrivateFilesReq) fastWriteField6(buf []byte) (offset int) {
	if len(x.OnlyType) == 0 {
		return offset
	}
	for i := range x.GetOnlyType() {
		offset += fastpb.WriteString(buf[offset:], 6, x.GetOnlyType()[i])
	}
	return offset
}

func (x *GetPrivateFilesReq) fastWriteField7(buf []byte) (offset int) {
	if x.Limit == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetLimit())
	return offset
}

func (x *GetPrivateFilesReq) fastWriteField8(buf []byte) (offset int) {
	if x.LastToken == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetLastToken())
	return offset
}

func (x *GetPrivateFilesReq) fastWriteField9(buf []byte) (offset int) {
	if x.Backward == nil {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 9, x.GetBackward())
	return offset
}

func (x *GetPrivateFilesReq) fastWriteField10(buf []byte) (offset int) {
	if x.Offset == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetOffset())
	return offset
}

func (x *GetPrivateFilesResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *GetPrivateFilesResp) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *GetPrivateFilesResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *GetPrivateFilesResp) fastWriteField3(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetToken())
	return offset
}

func (x *GetPrivateFilesResp) fastWriteField4(buf []byte) (offset int) {
	if x.FatherNamePath == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetFatherNamePath())
	return offset
}

func (x *GetPrivateFilesResp) fastWriteField5(buf []byte) (offset int) {
	if x.FatherIdPath == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetFatherIdPath())
	return offset
}

func (x *GetPublicFilesReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	return offset
}

func (x *GetPublicFilesReq) fastWriteField1(buf []byte) (offset int) {
	if x.AllFieldsKey == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAllFieldsKey())
	return offset
}

func (x *GetPublicFilesReq) fastWriteField2(buf []byte) (offset int) {
	if x.Name == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *GetPublicFilesReq) fastWriteField3(buf []byte) (offset int) {
	if x.Id == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetId())
	return offset
}

func (x *GetPublicFilesReq) fastWriteField4(buf []byte) (offset int) {
	if x.Label == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetLabel())
	return offset
}

func (x *GetPublicFilesReq) fastWriteField5(buf []byte) (offset int) {
	if x.Description == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetDescription())
	return offset
}

func (x *GetPublicFilesReq) fastWriteField6(buf []byte) (offset int) {
	if x.SortType == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetSortType())
	return offset
}

func (x *GetPublicFilesReq) fastWriteField7(buf []byte) (offset int) {
	if x.OnlyFatherId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetOnlyFatherId())
	return offset
}

func (x *GetPublicFilesReq) fastWriteField8(buf []byte) (offset int) {
	if len(x.OnlyType) == 0 {
		return offset
	}
	for i := range x.GetOnlyType() {
		offset += fastpb.WriteString(buf[offset:], 8, x.GetOnlyType()[i])
	}
	return offset
}

func (x *GetPublicFilesReq) fastWriteField9(buf []byte) (offset int) {
	if x.OnlyZone == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetOnlyZone())
	return offset
}

func (x *GetPublicFilesReq) fastWriteField10(buf []byte) (offset int) {
	if x.OnlySubZone == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetOnlySubZone())
	return offset
}

func (x *GetPublicFilesReq) fastWriteField11(buf []byte) (offset int) {
	if x.Limit == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetLimit())
	return offset
}

func (x *GetPublicFilesReq) fastWriteField12(buf []byte) (offset int) {
	if x.LastToken == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 12, x.GetLastToken())
	return offset
}

func (x *GetPublicFilesReq) fastWriteField13(buf []byte) (offset int) {
	if x.Backward == nil {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 13, x.GetBackward())
	return offset
}

func (x *GetPublicFilesReq) fastWriteField14(buf []byte) (offset int) {
	if x.Offset == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 14, x.GetOffset())
	return offset
}

func (x *GetPublicFilesResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *GetPublicFilesResp) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *GetPublicFilesResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *GetPublicFilesResp) fastWriteField3(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetToken())
	return offset
}

func (x *GetPublicFilesResp) fastWriteField4(buf []byte) (offset int) {
	if x.FatherNamePath == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetFatherNamePath())
	return offset
}

func (x *GetPublicFilesResp) fastWriteField5(buf []byte) (offset int) {
	if x.FatherIdPath == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetFatherIdPath())
	return offset
}

func (x *GetRecycleBinFilesReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *GetRecycleBinFilesReq) fastWriteField1(buf []byte) (offset int) {
	if x.Limit == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetLimit())
	return offset
}

func (x *GetRecycleBinFilesReq) fastWriteField2(buf []byte) (offset int) {
	if x.LastToken == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetLastToken())
	return offset
}

func (x *GetRecycleBinFilesReq) fastWriteField3(buf []byte) (offset int) {
	if x.Backward == nil {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 3, x.GetBackward())
	return offset
}

func (x *GetRecycleBinFilesReq) fastWriteField4(buf []byte) (offset int) {
	if x.Offset == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetOffset())
	return offset
}

func (x *GetRecycleBinFilesReq) fastWriteField5(buf []byte) (offset int) {
	if x.SortType == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetSortType())
	return offset
}

func (x *GetRecycleBinFilesResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetRecycleBinFilesResp) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *GetRecycleBinFilesResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *GetRecycleBinFilesResp) fastWriteField3(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetToken())
	return offset
}

func (x *GetFileBySharingCodeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *GetFileBySharingCodeReq) fastWriteField1(buf []byte) (offset int) {
	if x.SharingCode == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetSharingCode())
	return offset
}

func (x *GetFileBySharingCodeReq) fastWriteField2(buf []byte) (offset int) {
	if x.Key == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetKey())
	return offset
}

func (x *GetFileBySharingCodeReq) fastWriteField3(buf []byte) (offset int) {
	if x.OnlyFileId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetOnlyFileId())
	return offset
}

func (x *GetFileBySharingCodeReq) fastWriteField4(buf []byte) (offset int) {
	if x.OnlyFatherId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetOnlyFatherId())
	return offset
}

func (x *GetFileBySharingCodeReq) fastWriteField5(buf []byte) (offset int) {
	if x.Limit == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetLimit())
	return offset
}

func (x *GetFileBySharingCodeReq) fastWriteField6(buf []byte) (offset int) {
	if x.LastToken == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetLastToken())
	return offset
}

func (x *GetFileBySharingCodeReq) fastWriteField7(buf []byte) (offset int) {
	if x.Backward == nil {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 7, x.GetBackward())
	return offset
}

func (x *GetFileBySharingCodeReq) fastWriteField8(buf []byte) (offset int) {
	if x.Offset == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetOffset())
	return offset
}

func (x *GetFileBySharingCodeResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetFileBySharingCodeResp) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *GetFileBySharingCodeResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *GetFileBySharingCodeResp) fastWriteField3(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetToken())
	return offset
}

func (x *CreateFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *CreateFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *CreateFileReq) fastWriteField2(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetType())
	return offset
}

func (x *CreateFileReq) fastWriteField3(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetFatherId())
	return offset
}

func (x *CreateFileReq) fastWriteField4(buf []byte) (offset int) {
	if x.SpaceSize == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetSpaceSize())
	return offset
}

func (x *CreateFileReq) fastWriteField5(buf []byte) (offset int) {
	if x.Md5 == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetMd5())
	return offset
}

func (x *CreateFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateFileResp) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *UpdateFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *UpdateFileReq) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *UpdateFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *MoveFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *MoveFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *MoveFileReq) fastWriteField2(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFatherId())
	return offset
}

func (x *MoveFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *SaveFileToPrivateSpaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SaveFileToPrivateSpaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *SaveFileToPrivateSpaceReq) fastWriteField2(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFatherId())
	return offset
}

func (x *SaveFileToPrivateSpaceReq) fastWriteField3(buf []byte) (offset int) {
	if x.DocumentType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetDocumentType()))
	return offset
}

func (x *SaveFileToPrivateSpaceResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SaveFileToPrivateSpaceResp) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *AddFileToPublicSpaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *AddFileToPublicSpaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *AddFileToPublicSpaceReq) fastWriteField2(buf []byte) (offset int) {
	if x.Zone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetZone())
	return offset
}

func (x *AddFileToPublicSpaceReq) fastWriteField3(buf []byte) (offset int) {
	if x.SubZone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetSubZone())
	return offset
}

func (x *AddFileToPublicSpaceReq) fastWriteField4(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetDescription())
	return offset
}

func (x *AddFileToPublicSpaceReq) fastWriteField5(buf []byte) (offset int) {
	if len(x.Labels) == 0 {
		return offset
	}
	for i := range x.GetLabels() {
		offset += fastpb.WriteString(buf[offset:], 5, x.GetLabels()[i])
	}
	return offset
}

func (x *AddFileToPublicSpaceResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeleteFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *DeleteFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *DeleteFileReq) fastWriteField2(buf []byte) (offset int) {
	if x.DeleteType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, int32(x.GetDeleteType()))
	return offset
}

func (x *DeleteFileReq) fastWriteField3(buf []byte) (offset int) {
	if !x.ClearCommunity {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 3, x.GetClearCommunity())
	return offset
}

func (x *DeleteFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *CompletelyRemoveFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CompletelyRemoveFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *CompletelyRemoveFileReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *CompletelyRemoveFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *RecoverRecycleBinFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RecoverRecycleBinFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *RecoverRecycleBinFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *CreateZoneReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CreateZoneReq) fastWriteField1(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFatherId())
	return offset
}

func (x *CreateZoneReq) fastWriteField2(buf []byte) (offset int) {
	if x.Value == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetValue())
	return offset
}

func (x *CreateZoneResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateZoneResp) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetZoneReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetZoneReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetZoneResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetZoneResp) fastWriteField1(buf []byte) (offset int) {
	if x.Zone == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetZone())
	return offset
}

func (x *UpdateZoneReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateZoneReq) fastWriteField1(buf []byte) (offset int) {
	if x.Zone == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetZone())
	return offset
}

func (x *UpdateZoneResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeleteZoneReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteZoneReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeleteZoneResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *CreateShareCodeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *CreateShareCodeReq) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *CreateShareCodeReq) fastWriteField2(buf []byte) (offset int) {
	if x.EffectiveTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetEffectiveTime())
	return offset
}

func (x *CreateShareCodeReq) fastWriteField3(buf []byte) (offset int) {
	if len(x.FileList) == 0 {
		return offset
	}
	for i := range x.GetFileList() {
		offset += fastpb.WriteString(buf[offset:], 3, x.GetFileList()[i])
	}
	return offset
}

func (x *CreateShareCodeResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CreateShareCodeResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *CreateShareCodeResp) fastWriteField2(buf []byte) (offset int) {
	if x.Key == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetKey())
	return offset
}

func (x *GetShareListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *GetShareListReq) fastWriteField1(buf []byte) (offset int) {
	if x.Limit == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetLimit())
	return offset
}

func (x *GetShareListReq) fastWriteField2(buf []byte) (offset int) {
	if x.LastToken == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetLastToken())
	return offset
}

func (x *GetShareListReq) fastWriteField3(buf []byte) (offset int) {
	if x.Backward == nil {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 3, x.GetBackward())
	return offset
}

func (x *GetShareListReq) fastWriteField4(buf []byte) (offset int) {
	if x.Offset == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetOffset())
	return offset
}

func (x *GetShareListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetShareListResp) fastWriteField1(buf []byte) (offset int) {
	if x.ShareCodes == nil {
		return offset
	}
	for i := range x.GetShareCodes() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetShareCodes()[i])
	}
	return offset
}

func (x *GetShareListResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *GetShareListResp) fastWriteField3(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetToken())
	return offset
}

func (x *UpdateShareCodeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateShareCodeReq) fastWriteField1(buf []byte) (offset int) {
	if x.Code == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *UpdateShareCodeReq) fastWriteField2(buf []byte) (offset int) {
	if x.BrowseNumber == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetBrowseNumber())
	return offset
}

func (x *UpdateShareCodeResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeleteShareCodeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteShareCodeReq) fastWriteField1(buf []byte) (offset int) {
	if x.OnlyCode == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOnlyCode())
	return offset
}

func (x *DeleteShareCodeResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *ParsingShareCodeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ParsingShareCodeReq) fastWriteField1(buf []byte) (offset int) {
	if x.Code == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *ParsingShareCodeReq) fastWriteField2(buf []byte) (offset int) {
	if x.Key == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetKey())
	return offset
}

func (x *ParsingShareCodeResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ParsingShareCodeResp) fastWriteField1(buf []byte) (offset int) {
	if x.ShareFile == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetShareFile())
	return offset
}

func (x *AskUploadFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *AskUploadFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *AskUploadFileReq) fastWriteField2(buf []byte) (offset int) {
	if x.FileSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetFileSize())
	return offset
}

func (x *AskUploadFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *AskUploadFileResp) fastWriteField1(buf []byte) (offset int) {
	if x.TmpSecretId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetTmpSecretId())
	return offset
}

func (x *AskUploadFileResp) fastWriteField2(buf []byte) (offset int) {
	if x.TmpSecretKey == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTmpSecretKey())
	return offset
}

func (x *AskUploadFileResp) fastWriteField3(buf []byte) (offset int) {
	if x.StartTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetStartTime())
	return offset
}

func (x *AskUploadFileResp) fastWriteField4(buf []byte) (offset int) {
	if x.ExpiredTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetExpiredTime())
	return offset
}

func (x *AskUploadFileResp) fastWriteField5(buf []byte) (offset int) {
	if x.SessionToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetSessionToken())
	return offset
}

func (x *AskDownloadFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *AskDownloadFileReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.FileIds) == 0 {
		return offset
	}
	for i := range x.GetFileIds() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetFileIds()[i])
	}
	return offset
}

func (x *AskDownloadFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *AskDownloadFileResp) fastWriteField1(buf []byte) (offset int) {
	if len(x.Urls) == 0 {
		return offset
	}
	for i := range x.GetUrls() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetUrls()[i])
	}
	return offset
}

func (x *GetUserReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetUserReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *GetUserResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetUserResp) fastWriteField1(buf []byte) (offset int) {
	if x.User == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUser())
	return offset
}

func (x *CreateUserReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateUserReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUserInfo())
	return offset
}

func (x *CreateUserResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetUserDetailReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetUserDetailResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetUserDetailResp) fastWriteField1(buf []byte) (offset int) {
	if x.UserDetail == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUserDetail())
	return offset
}

func (x *DeleteUserReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteUserReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *DeleteUserResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *AskUploadAvatarReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *AskUploadAvatarReq) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *AskUploadAvatarReq) fastWriteField2(buf []byte) (offset int) {
	if x.AvatarSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetAvatarSize())
	return offset
}

func (x *AskUploadAvatarResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *AskUploadAvatarResp) fastWriteField1(buf []byte) (offset int) {
	if x.TmpSecretId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetTmpSecretId())
	return offset
}

func (x *AskUploadAvatarResp) fastWriteField2(buf []byte) (offset int) {
	if x.TmpSecretKey == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTmpSecretKey())
	return offset
}

func (x *AskUploadAvatarResp) fastWriteField3(buf []byte) (offset int) {
	if x.StartTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetStartTime())
	return offset
}

func (x *AskUploadAvatarResp) fastWriteField4(buf []byte) (offset int) {
	if x.ExpiredTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetExpiredTime())
	return offset
}

func (x *AskUploadAvatarResp) fastWriteField5(buf []byte) (offset int) {
	if x.SessionToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetSessionToken())
	return offset
}

func (x *CreatePostReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreatePostReq) fastWriteField1(buf []byte) (offset int) {
	if x.PostInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPostInfo())
	return offset
}

func (x *CreatePostResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeletePostReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeletePostReq) fastWriteField1(buf []byte) (offset int) {
	if x.PostId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPostId())
	return offset
}

func (x *DeletePostResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *UpdatePostReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdatePostReq) fastWriteField1(buf []byte) (offset int) {
	if x.PostInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPostInfo())
	return offset
}

func (x *UpdatePostResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetPostReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPostReq) fastWriteField1(buf []byte) (offset int) {
	if x.PostId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPostId())
	return offset
}

func (x *GetPostResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPostResp) fastWriteField1(buf []byte) (offset int) {
	if x.Post == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPost())
	return offset
}

func (x *GetPostsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetPostsReq) fastWriteField1(buf []byte) (offset int) {
	if x.SearchOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetSearchOptions())
	return offset
}

func (x *GetPostsReq) fastWriteField2(buf []byte) (offset int) {
	if x.PostFilterOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPostFilterOptions())
	return offset
}

func (x *GetPostsReq) fastWriteField3(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetPaginationOptions())
	return offset
}

func (x *GetPostsResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetPostsResp) fastWriteField1(buf []byte) (offset int) {
	if x.Posts == nil {
		return offset
	}
	for i := range x.GetPosts() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPosts()[i])
	}
	return offset
}

func (x *GetPostsResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *GetPostsResp) fastWriteField3(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetToken())
	return offset
}

func (x *UpdateUserReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateUserReq) sizeField1() (n int) {
	if x.UserDetail == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetUserDetail())
	return n
}

func (x *UpdateUserResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *SearchUserReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *SearchUserReq) sizeField1() (n int) {
	if x.Keyword == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetKeyword())
	return n
}

func (x *SearchUserReq) sizeField2() (n int) {
	if x.Limit == nil {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetLimit())
	return n
}

func (x *SearchUserReq) sizeField3() (n int) {
	if x.LastToken == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetLastToken())
	return n
}

func (x *SearchUserReq) sizeField4() (n int) {
	if x.Backward == nil {
		return n
	}
	n += fastpb.SizeBool(4, x.GetBackward())
	return n
}

func (x *SearchUserReq) sizeField5() (n int) {
	if x.Offset == nil {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetOffset())
	return n
}

func (x *SearchUserResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SearchUserResp) sizeField1() (n int) {
	if x.Users == nil {
		return n
	}
	for i := range x.GetUsers() {
		n += fastpb.SizeMessage(1, x.GetUsers()[i])
	}
	return n
}

func (x *SearchUserResp) sizeField2() (n int) {
	if x.LastToken == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetLastToken())
	return n
}

func (x *SearchUserResp) sizeField3() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetTotal())
	return n
}

func (x *GetPrivateFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetPrivateFileReq) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *GetPrivateFileReq) sizeField2() (n int) {
	if !x.IsGetSize {
		return n
	}
	n += fastpb.SizeBool(2, x.GetIsGetSize())
	return n
}

func (x *GetPrivateFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPrivateFileResp) sizeField1() (n int) {
	if x.File == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFile())
	return n
}

func (x *GetPublicFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetPublicFileReq) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *GetPublicFileReq) sizeField2() (n int) {
	if !x.IsGetSize {
		return n
	}
	n += fastpb.SizeBool(2, x.GetIsGetSize())
	return n
}

func (x *GetPublicFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPublicFileResp) sizeField1() (n int) {
	if x.File == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFile())
	return n
}

func (x *GetPrivateFilesReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	return n
}

func (x *GetPrivateFilesReq) sizeField1() (n int) {
	if x.AllFieldsKey == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetAllFieldsKey())
	return n
}

func (x *GetPrivateFilesReq) sizeField2() (n int) {
	if x.Name == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *GetPrivateFilesReq) sizeField3() (n int) {
	if x.Id == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetId())
	return n
}

func (x *GetPrivateFilesReq) sizeField4() (n int) {
	if x.SortType == nil {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetSortType())
	return n
}

func (x *GetPrivateFilesReq) sizeField5() (n int) {
	if x.OnlyFatherId == nil {
		return n
	}
	n += fastpb.SizeString(5, x.GetOnlyFatherId())
	return n
}

func (x *GetPrivateFilesReq) sizeField6() (n int) {
	if len(x.OnlyType) == 0 {
		return n
	}
	for i := range x.GetOnlyType() {
		n += fastpb.SizeString(6, x.GetOnlyType()[i])
	}
	return n
}

func (x *GetPrivateFilesReq) sizeField7() (n int) {
	if x.Limit == nil {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetLimit())
	return n
}

func (x *GetPrivateFilesReq) sizeField8() (n int) {
	if x.LastToken == nil {
		return n
	}
	n += fastpb.SizeString(8, x.GetLastToken())
	return n
}

func (x *GetPrivateFilesReq) sizeField9() (n int) {
	if x.Backward == nil {
		return n
	}
	n += fastpb.SizeBool(9, x.GetBackward())
	return n
}

func (x *GetPrivateFilesReq) sizeField10() (n int) {
	if x.Offset == nil {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetOffset())
	return n
}

func (x *GetPrivateFilesResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *GetPrivateFilesResp) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *GetPrivateFilesResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *GetPrivateFilesResp) sizeField3() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetToken())
	return n
}

func (x *GetPrivateFilesResp) sizeField4() (n int) {
	if x.FatherNamePath == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetFatherNamePath())
	return n
}

func (x *GetPrivateFilesResp) sizeField5() (n int) {
	if x.FatherIdPath == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetFatherIdPath())
	return n
}

func (x *GetPublicFilesReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	return n
}

func (x *GetPublicFilesReq) sizeField1() (n int) {
	if x.AllFieldsKey == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetAllFieldsKey())
	return n
}

func (x *GetPublicFilesReq) sizeField2() (n int) {
	if x.Name == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *GetPublicFilesReq) sizeField3() (n int) {
	if x.Id == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetId())
	return n
}

func (x *GetPublicFilesReq) sizeField4() (n int) {
	if x.Label == nil {
		return n
	}
	n += fastpb.SizeString(4, x.GetLabel())
	return n
}

func (x *GetPublicFilesReq) sizeField5() (n int) {
	if x.Description == nil {
		return n
	}
	n += fastpb.SizeString(5, x.GetDescription())
	return n
}

func (x *GetPublicFilesReq) sizeField6() (n int) {
	if x.SortType == nil {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetSortType())
	return n
}

func (x *GetPublicFilesReq) sizeField7() (n int) {
	if x.OnlyFatherId == nil {
		return n
	}
	n += fastpb.SizeString(7, x.GetOnlyFatherId())
	return n
}

func (x *GetPublicFilesReq) sizeField8() (n int) {
	if len(x.OnlyType) == 0 {
		return n
	}
	for i := range x.GetOnlyType() {
		n += fastpb.SizeString(8, x.GetOnlyType()[i])
	}
	return n
}

func (x *GetPublicFilesReq) sizeField9() (n int) {
	if x.OnlyZone == nil {
		return n
	}
	n += fastpb.SizeString(9, x.GetOnlyZone())
	return n
}

func (x *GetPublicFilesReq) sizeField10() (n int) {
	if x.OnlySubZone == nil {
		return n
	}
	n += fastpb.SizeString(10, x.GetOnlySubZone())
	return n
}

func (x *GetPublicFilesReq) sizeField11() (n int) {
	if x.Limit == nil {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetLimit())
	return n
}

func (x *GetPublicFilesReq) sizeField12() (n int) {
	if x.LastToken == nil {
		return n
	}
	n += fastpb.SizeString(12, x.GetLastToken())
	return n
}

func (x *GetPublicFilesReq) sizeField13() (n int) {
	if x.Backward == nil {
		return n
	}
	n += fastpb.SizeBool(13, x.GetBackward())
	return n
}

func (x *GetPublicFilesReq) sizeField14() (n int) {
	if x.Offset == nil {
		return n
	}
	n += fastpb.SizeInt64(14, x.GetOffset())
	return n
}

func (x *GetPublicFilesResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *GetPublicFilesResp) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *GetPublicFilesResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *GetPublicFilesResp) sizeField3() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetToken())
	return n
}

func (x *GetPublicFilesResp) sizeField4() (n int) {
	if x.FatherNamePath == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetFatherNamePath())
	return n
}

func (x *GetPublicFilesResp) sizeField5() (n int) {
	if x.FatherIdPath == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetFatherIdPath())
	return n
}

func (x *GetRecycleBinFilesReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *GetRecycleBinFilesReq) sizeField1() (n int) {
	if x.Limit == nil {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetLimit())
	return n
}

func (x *GetRecycleBinFilesReq) sizeField2() (n int) {
	if x.LastToken == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetLastToken())
	return n
}

func (x *GetRecycleBinFilesReq) sizeField3() (n int) {
	if x.Backward == nil {
		return n
	}
	n += fastpb.SizeBool(3, x.GetBackward())
	return n
}

func (x *GetRecycleBinFilesReq) sizeField4() (n int) {
	if x.Offset == nil {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetOffset())
	return n
}

func (x *GetRecycleBinFilesReq) sizeField5() (n int) {
	if x.SortType == nil {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetSortType())
	return n
}

func (x *GetRecycleBinFilesResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetRecycleBinFilesResp) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *GetRecycleBinFilesResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *GetRecycleBinFilesResp) sizeField3() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetToken())
	return n
}

func (x *GetFileBySharingCodeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *GetFileBySharingCodeReq) sizeField1() (n int) {
	if x.SharingCode == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetSharingCode())
	return n
}

func (x *GetFileBySharingCodeReq) sizeField2() (n int) {
	if x.Key == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetKey())
	return n
}

func (x *GetFileBySharingCodeReq) sizeField3() (n int) {
	if x.OnlyFileId == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetOnlyFileId())
	return n
}

func (x *GetFileBySharingCodeReq) sizeField4() (n int) {
	if x.OnlyFatherId == nil {
		return n
	}
	n += fastpb.SizeString(4, x.GetOnlyFatherId())
	return n
}

func (x *GetFileBySharingCodeReq) sizeField5() (n int) {
	if x.Limit == nil {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetLimit())
	return n
}

func (x *GetFileBySharingCodeReq) sizeField6() (n int) {
	if x.LastToken == nil {
		return n
	}
	n += fastpb.SizeString(6, x.GetLastToken())
	return n
}

func (x *GetFileBySharingCodeReq) sizeField7() (n int) {
	if x.Backward == nil {
		return n
	}
	n += fastpb.SizeBool(7, x.GetBackward())
	return n
}

func (x *GetFileBySharingCodeReq) sizeField8() (n int) {
	if x.Offset == nil {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetOffset())
	return n
}

func (x *GetFileBySharingCodeResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetFileBySharingCodeResp) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *GetFileBySharingCodeResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *GetFileBySharingCodeResp) sizeField3() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetToken())
	return n
}

func (x *CreateFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *CreateFileReq) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *CreateFileReq) sizeField2() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetType())
	return n
}

func (x *CreateFileReq) sizeField3() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetFatherId())
	return n
}

func (x *CreateFileReq) sizeField4() (n int) {
	if x.SpaceSize == nil {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetSpaceSize())
	return n
}

func (x *CreateFileReq) sizeField5() (n int) {
	if x.Md5 == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetMd5())
	return n
}

func (x *CreateFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateFileResp) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *UpdateFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateFileReq) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *UpdateFileReq) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *UpdateFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *MoveFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *MoveFileReq) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *MoveFileReq) sizeField2() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetFatherId())
	return n
}

func (x *MoveFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *SaveFileToPrivateSpaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SaveFileToPrivateSpaceReq) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *SaveFileToPrivateSpaceReq) sizeField2() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetFatherId())
	return n
}

func (x *SaveFileToPrivateSpaceReq) sizeField3() (n int) {
	if x.DocumentType == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetDocumentType()))
	return n
}

func (x *SaveFileToPrivateSpaceResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SaveFileToPrivateSpaceResp) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *AddFileToPublicSpaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *AddFileToPublicSpaceReq) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *AddFileToPublicSpaceReq) sizeField2() (n int) {
	if x.Zone == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetZone())
	return n
}

func (x *AddFileToPublicSpaceReq) sizeField3() (n int) {
	if x.SubZone == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetSubZone())
	return n
}

func (x *AddFileToPublicSpaceReq) sizeField4() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetDescription())
	return n
}

func (x *AddFileToPublicSpaceReq) sizeField5() (n int) {
	if len(x.Labels) == 0 {
		return n
	}
	for i := range x.GetLabels() {
		n += fastpb.SizeString(5, x.GetLabels()[i])
	}
	return n
}

func (x *AddFileToPublicSpaceResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeleteFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *DeleteFileReq) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *DeleteFileReq) sizeField2() (n int) {
	if x.DeleteType == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, int32(x.GetDeleteType()))
	return n
}

func (x *DeleteFileReq) sizeField3() (n int) {
	if !x.ClearCommunity {
		return n
	}
	n += fastpb.SizeBool(3, x.GetClearCommunity())
	return n
}

func (x *DeleteFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *CompletelyRemoveFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CompletelyRemoveFileReq) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *CompletelyRemoveFileReq) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *CompletelyRemoveFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *RecoverRecycleBinFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RecoverRecycleBinFileReq) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *RecoverRecycleBinFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *CreateZoneReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CreateZoneReq) sizeField1() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFatherId())
	return n
}

func (x *CreateZoneReq) sizeField2() (n int) {
	if x.Value == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetValue())
	return n
}

func (x *CreateZoneResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateZoneResp) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *GetZoneReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetZoneReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *GetZoneResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetZoneResp) sizeField1() (n int) {
	if x.Zone == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetZone())
	return n
}

func (x *UpdateZoneReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateZoneReq) sizeField1() (n int) {
	if x.Zone == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetZone())
	return n
}

func (x *UpdateZoneResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeleteZoneReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteZoneReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *DeleteZoneResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *CreateShareCodeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *CreateShareCodeReq) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *CreateShareCodeReq) sizeField2() (n int) {
	if x.EffectiveTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetEffectiveTime())
	return n
}

func (x *CreateShareCodeReq) sizeField3() (n int) {
	if len(x.FileList) == 0 {
		return n
	}
	for i := range x.GetFileList() {
		n += fastpb.SizeString(3, x.GetFileList()[i])
	}
	return n
}

func (x *CreateShareCodeResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CreateShareCodeResp) sizeField1() (n int) {
	if x.Code == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCode())
	return n
}

func (x *CreateShareCodeResp) sizeField2() (n int) {
	if x.Key == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetKey())
	return n
}

func (x *GetShareListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *GetShareListReq) sizeField1() (n int) {
	if x.Limit == nil {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetLimit())
	return n
}

func (x *GetShareListReq) sizeField2() (n int) {
	if x.LastToken == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetLastToken())
	return n
}

func (x *GetShareListReq) sizeField3() (n int) {
	if x.Backward == nil {
		return n
	}
	n += fastpb.SizeBool(3, x.GetBackward())
	return n
}

func (x *GetShareListReq) sizeField4() (n int) {
	if x.Offset == nil {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetOffset())
	return n
}

func (x *GetShareListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetShareListResp) sizeField1() (n int) {
	if x.ShareCodes == nil {
		return n
	}
	for i := range x.GetShareCodes() {
		n += fastpb.SizeMessage(1, x.GetShareCodes()[i])
	}
	return n
}

func (x *GetShareListResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *GetShareListResp) sizeField3() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetToken())
	return n
}

func (x *UpdateShareCodeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateShareCodeReq) sizeField1() (n int) {
	if x.Code == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCode())
	return n
}

func (x *UpdateShareCodeReq) sizeField2() (n int) {
	if x.BrowseNumber == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetBrowseNumber())
	return n
}

func (x *UpdateShareCodeResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeleteShareCodeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteShareCodeReq) sizeField1() (n int) {
	if x.OnlyCode == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetOnlyCode())
	return n
}

func (x *DeleteShareCodeResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *ParsingShareCodeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ParsingShareCodeReq) sizeField1() (n int) {
	if x.Code == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCode())
	return n
}

func (x *ParsingShareCodeReq) sizeField2() (n int) {
	if x.Key == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetKey())
	return n
}

func (x *ParsingShareCodeResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ParsingShareCodeResp) sizeField1() (n int) {
	if x.ShareFile == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetShareFile())
	return n
}

func (x *AskUploadFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *AskUploadFileReq) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *AskUploadFileReq) sizeField2() (n int) {
	if x.FileSize == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetFileSize())
	return n
}

func (x *AskUploadFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *AskUploadFileResp) sizeField1() (n int) {
	if x.TmpSecretId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetTmpSecretId())
	return n
}

func (x *AskUploadFileResp) sizeField2() (n int) {
	if x.TmpSecretKey == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTmpSecretKey())
	return n
}

func (x *AskUploadFileResp) sizeField3() (n int) {
	if x.StartTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetStartTime())
	return n
}

func (x *AskUploadFileResp) sizeField4() (n int) {
	if x.ExpiredTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetExpiredTime())
	return n
}

func (x *AskUploadFileResp) sizeField5() (n int) {
	if x.SessionToken == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetSessionToken())
	return n
}

func (x *AskDownloadFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *AskDownloadFileReq) sizeField1() (n int) {
	if len(x.FileIds) == 0 {
		return n
	}
	for i := range x.GetFileIds() {
		n += fastpb.SizeString(1, x.GetFileIds()[i])
	}
	return n
}

func (x *AskDownloadFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *AskDownloadFileResp) sizeField1() (n int) {
	if len(x.Urls) == 0 {
		return n
	}
	for i := range x.GetUrls() {
		n += fastpb.SizeString(1, x.GetUrls()[i])
	}
	return n
}

func (x *GetUserReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetUserReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *GetUserResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetUserResp) sizeField1() (n int) {
	if x.User == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetUser())
	return n
}

func (x *CreateUserReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateUserReq) sizeField1() (n int) {
	if x.UserInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetUserInfo())
	return n
}

func (x *CreateUserResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetUserDetailReq) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetUserDetailResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetUserDetailResp) sizeField1() (n int) {
	if x.UserDetail == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetUserDetail())
	return n
}

func (x *DeleteUserReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteUserReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *DeleteUserResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *AskUploadAvatarReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *AskUploadAvatarReq) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *AskUploadAvatarReq) sizeField2() (n int) {
	if x.AvatarSize == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetAvatarSize())
	return n
}

func (x *AskUploadAvatarResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *AskUploadAvatarResp) sizeField1() (n int) {
	if x.TmpSecretId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetTmpSecretId())
	return n
}

func (x *AskUploadAvatarResp) sizeField2() (n int) {
	if x.TmpSecretKey == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTmpSecretKey())
	return n
}

func (x *AskUploadAvatarResp) sizeField3() (n int) {
	if x.StartTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetStartTime())
	return n
}

func (x *AskUploadAvatarResp) sizeField4() (n int) {
	if x.ExpiredTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetExpiredTime())
	return n
}

func (x *AskUploadAvatarResp) sizeField5() (n int) {
	if x.SessionToken == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetSessionToken())
	return n
}

func (x *CreatePostReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreatePostReq) sizeField1() (n int) {
	if x.PostInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPostInfo())
	return n
}

func (x *CreatePostResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeletePostReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeletePostReq) sizeField1() (n int) {
	if x.PostId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPostId())
	return n
}

func (x *DeletePostResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *UpdatePostReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdatePostReq) sizeField1() (n int) {
	if x.PostInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPostInfo())
	return n
}

func (x *UpdatePostResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetPostReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPostReq) sizeField1() (n int) {
	if x.PostId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPostId())
	return n
}

func (x *GetPostResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPostResp) sizeField1() (n int) {
	if x.Post == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPost())
	return n
}

func (x *GetPostsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetPostsReq) sizeField1() (n int) {
	if x.SearchOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetSearchOptions())
	return n
}

func (x *GetPostsReq) sizeField2() (n int) {
	if x.PostFilterOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetPostFilterOptions())
	return n
}

func (x *GetPostsReq) sizeField3() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetPaginationOptions())
	return n
}

func (x *GetPostsResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetPostsResp) sizeField1() (n int) {
	if x.Posts == nil {
		return n
	}
	for i := range x.GetPosts() {
		n += fastpb.SizeMessage(1, x.GetPosts()[i])
	}
	return n
}

func (x *GetPostsResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *GetPostsResp) sizeField3() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetToken())
	return n
}

var fieldIDToName_UpdateUserReq = map[int32]string{
	1: "UserDetail",
}

var fieldIDToName_UpdateUserResp = map[int32]string{}

var fieldIDToName_SearchUserReq = map[int32]string{
	1: "Keyword",
	2: "Limit",
	3: "LastToken",
	4: "Backward",
	5: "Offset",
}

var fieldIDToName_SearchUserResp = map[int32]string{
	1: "Users",
	2: "LastToken",
	3: "Total",
}

var fieldIDToName_GetPrivateFileReq = map[int32]string{
	1: "FileId",
	2: "IsGetSize",
}

var fieldIDToName_GetPrivateFileResp = map[int32]string{
	1: "File",
}

var fieldIDToName_GetPublicFileReq = map[int32]string{
	1: "FileId",
	2: "IsGetSize",
}

var fieldIDToName_GetPublicFileResp = map[int32]string{
	1: "File",
}

var fieldIDToName_GetPrivateFilesReq = map[int32]string{
	1:  "AllFieldsKey",
	2:  "Name",
	3:  "Id",
	4:  "SortType",
	5:  "OnlyFatherId",
	6:  "OnlyType",
	7:  "Limit",
	8:  "LastToken",
	9:  "Backward",
	10: "Offset",
}

var fieldIDToName_GetPrivateFilesResp = map[int32]string{
	1: "Files",
	2: "Total",
	3: "Token",
	4: "FatherNamePath",
	5: "FatherIdPath",
}

var fieldIDToName_GetPublicFilesReq = map[int32]string{
	1:  "AllFieldsKey",
	2:  "Name",
	3:  "Id",
	4:  "Label",
	5:  "Description",
	6:  "SortType",
	7:  "OnlyFatherId",
	8:  "OnlyType",
	9:  "OnlyZone",
	10: "OnlySubZone",
	11: "Limit",
	12: "LastToken",
	13: "Backward",
	14: "Offset",
}

var fieldIDToName_GetPublicFilesResp = map[int32]string{
	1: "Files",
	2: "Total",
	3: "Token",
	4: "FatherNamePath",
	5: "FatherIdPath",
}

var fieldIDToName_GetRecycleBinFilesReq = map[int32]string{
	1: "Limit",
	2: "LastToken",
	3: "Backward",
	4: "Offset",
	5: "SortType",
}

var fieldIDToName_GetRecycleBinFilesResp = map[int32]string{
	1: "Files",
	2: "Total",
	3: "Token",
}

var fieldIDToName_GetFileBySharingCodeReq = map[int32]string{
	1: "SharingCode",
	2: "Key",
	3: "OnlyFileId",
	4: "OnlyFatherId",
	5: "Limit",
	6: "LastToken",
	7: "Backward",
	8: "Offset",
}

var fieldIDToName_GetFileBySharingCodeResp = map[int32]string{
	1: "Files",
	2: "Total",
	3: "Token",
}

var fieldIDToName_CreateFileReq = map[int32]string{
	1: "Name",
	2: "Type",
	3: "FatherId",
	4: "SpaceSize",
	5: "Md5",
}

var fieldIDToName_CreateFileResp = map[int32]string{
	1: "FileId",
}

var fieldIDToName_UpdateFileReq = map[int32]string{
	1: "FileId",
	2: "Name",
}

var fieldIDToName_UpdateFileResp = map[int32]string{}

var fieldIDToName_MoveFileReq = map[int32]string{
	1: "FileId",
	2: "FatherId",
}

var fieldIDToName_MoveFileResp = map[int32]string{}

var fieldIDToName_SaveFileToPrivateSpaceReq = map[int32]string{
	1: "FileId",
	2: "FatherId",
	3: "DocumentType",
}

var fieldIDToName_SaveFileToPrivateSpaceResp = map[int32]string{
	1: "FileId",
}

var fieldIDToName_AddFileToPublicSpaceReq = map[int32]string{
	1: "FileId",
	2: "Zone",
	3: "SubZone",
	4: "Description",
	5: "Labels",
}

var fieldIDToName_AddFileToPublicSpaceResp = map[int32]string{}

var fieldIDToName_DeleteFileReq = map[int32]string{
	1: "FileId",
	2: "DeleteType",
	3: "ClearCommunity",
}

var fieldIDToName_DeleteFileResp = map[int32]string{}

var fieldIDToName_CompletelyRemoveFileReq = map[int32]string{
	1: "FileId",
	2: "UserId",
}

var fieldIDToName_CompletelyRemoveFileResp = map[int32]string{}

var fieldIDToName_RecoverRecycleBinFileReq = map[int32]string{
	1: "FileId",
}

var fieldIDToName_RecoverRecycleBinFileResp = map[int32]string{}

var fieldIDToName_CreateZoneReq = map[int32]string{
	1: "FatherId",
	2: "Value",
}

var fieldIDToName_CreateZoneResp = map[int32]string{
	1: "Id",
}

var fieldIDToName_GetZoneReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_GetZoneResp = map[int32]string{
	1: "Zone",
}

var fieldIDToName_UpdateZoneReq = map[int32]string{
	1: "Zone",
}

var fieldIDToName_UpdateZoneResp = map[int32]string{}

var fieldIDToName_DeleteZoneReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeleteZoneResp = map[int32]string{}

var fieldIDToName_CreateShareCodeReq = map[int32]string{
	1: "Name",
	2: "EffectiveTime",
	3: "FileList",
}

var fieldIDToName_CreateShareCodeResp = map[int32]string{
	1: "Code",
	2: "Key",
}

var fieldIDToName_GetShareListReq = map[int32]string{
	1: "Limit",
	2: "LastToken",
	3: "Backward",
	4: "Offset",
}

var fieldIDToName_GetShareListResp = map[int32]string{
	1: "ShareCodes",
	2: "Total",
	3: "Token",
}

var fieldIDToName_UpdateShareCodeReq = map[int32]string{
	1: "Code",
	2: "BrowseNumber",
}

var fieldIDToName_UpdateShareCodeResp = map[int32]string{}

var fieldIDToName_DeleteShareCodeReq = map[int32]string{
	1: "OnlyCode",
}

var fieldIDToName_DeleteShareCodeResp = map[int32]string{}

var fieldIDToName_ParsingShareCodeReq = map[int32]string{
	1: "Code",
	2: "Key",
}

var fieldIDToName_ParsingShareCodeResp = map[int32]string{
	1: "ShareFile",
}

var fieldIDToName_AskUploadFileReq = map[int32]string{
	1: "Name",
	2: "FileSize",
}

var fieldIDToName_AskUploadFileResp = map[int32]string{
	1: "TmpSecretId",
	2: "TmpSecretKey",
	3: "StartTime",
	4: "ExpiredTime",
	5: "SessionToken",
}

var fieldIDToName_AskDownloadFileReq = map[int32]string{
	1: "FileIds",
}

var fieldIDToName_AskDownloadFileResp = map[int32]string{
	1: "Urls",
}

var fieldIDToName_GetUserReq = map[int32]string{
	1: "UserId",
}

var fieldIDToName_GetUserResp = map[int32]string{
	1: "User",
}

var fieldIDToName_CreateUserReq = map[int32]string{
	1: "UserInfo",
}

var fieldIDToName_CreateUserResp = map[int32]string{}

var fieldIDToName_GetUserDetailReq = map[int32]string{}

var fieldIDToName_GetUserDetailResp = map[int32]string{
	1: "UserDetail",
}

var fieldIDToName_DeleteUserReq = map[int32]string{
	1: "UserId",
}

var fieldIDToName_DeleteUserResp = map[int32]string{}

var fieldIDToName_AskUploadAvatarReq = map[int32]string{
	1: "Name",
	2: "AvatarSize",
}

var fieldIDToName_AskUploadAvatarResp = map[int32]string{
	1: "TmpSecretId",
	2: "TmpSecretKey",
	3: "StartTime",
	4: "ExpiredTime",
	5: "SessionToken",
}

var fieldIDToName_CreatePostReq = map[int32]string{
	1: "PostInfo",
}

var fieldIDToName_CreatePostResp = map[int32]string{}

var fieldIDToName_DeletePostReq = map[int32]string{
	1: "PostId",
}

var fieldIDToName_DeletePostResp = map[int32]string{}

var fieldIDToName_UpdatePostReq = map[int32]string{
	1: "PostInfo",
}

var fieldIDToName_UpdatePostResp = map[int32]string{}

var fieldIDToName_GetPostReq = map[int32]string{
	1: "PostId",
}

var fieldIDToName_GetPostResp = map[int32]string{
	1: "Post",
}

var fieldIDToName_GetPostsReq = map[int32]string{
	1: "SearchOptions",
	2: "PostFilterOptions",
	3: "PaginationOptions",
}

var fieldIDToName_GetPostsResp = map[int32]string{
	1: "Posts",
	2: "Total",
	3: "Token",
}

var _ = basic.File_basic_pagination_proto
var _ = http.File_http_http_proto
