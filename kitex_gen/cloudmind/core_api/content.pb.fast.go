// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package core_api

import (
	fmt "fmt"
	basic "github.com/CloudStriver/service-idl-gen-go/kitex_gen/basic"
	http "github.com/CloudStriver/service-idl-gen-go/kitex_gen/http"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *UpdateUserReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateUserReq[number], err)
}

func (x *UpdateUserReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v UserDetail
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UserDetail = &v
	return offset, nil
}

func (x *UpdateUserResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *SearchUserReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchUserReq[number], err)
}

func (x *SearchUserReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Keyword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchUserReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *SearchUserResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchUserResp[number], err)
}

func (x *SearchUserResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v User
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Users = append(x.Users, &v)
	return offset, nil
}

func (x *SearchUserResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.LastToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchUserResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileReq[number], err)
}

func (x *GetFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FileFilterOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FilterOptions = &v
	return offset, nil
}

func (x *GetFileReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.IsGetSize, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileResp[number], err)
}

func (x *GetFileResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FileInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.File = &v
	return offset, nil
}

func (x *GetFileListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileListReq[number], err)
}

func (x *GetFileListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v SearchOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SearchOptions = &v
	return offset, nil
}

func (x *GetFileListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v FileFilterOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FilterOptions = &v
	return offset, nil
}

func (x *GetFileListReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *GetFileListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileListResp[number], err)
}

func (x *GetFileListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FileInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *GetFileListResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetFileListResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileBySharingCodeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileBySharingCodeReq[number], err)
}

func (x *GetFileBySharingCodeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.SharingCode, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileBySharingCodeReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v FileFilterOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FilterOptions = &v
	return offset, nil
}

func (x *GetFileBySharingCodeReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *GetFileBySharingCodeResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileBySharingCodeResp[number], err)
}

func (x *GetFileBySharingCodeResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FileInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *GetFileBySharingCodeResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetFileBySharingCodeResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateFolderReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateFolderReq[number], err)
}

func (x *CreateFolderReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v File
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.File = &v
	return offset, nil
}

func (x *CreateFolderResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateFolderResp[number], err)
}

func (x *CreateFolderResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateFileReq[number], err)
}

func (x *UpdateFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v File
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.File = &v
	return offset, nil
}

func (x *UpdateFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *MoveFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MoveFileReq[number], err)
}

func (x *MoveFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MoveFileReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MoveFileReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MoveFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *SaveFileToPrivateSpaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SaveFileToPrivateSpaceReq[number], err)
}

func (x *SaveFileToPrivateSpaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SaveFileToPrivateSpaceReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SaveFileToPrivateSpaceReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SaveFileToPrivateSpaceReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.DocumentType = DocumentType(v)
	return offset, nil
}

func (x *SaveFileToPrivateSpaceResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SaveFileToPrivateSpaceResp[number], err)
}

func (x *SaveFileToPrivateSpaceResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddFileToPublicSpaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddFileToPublicSpaceReq[number], err)
}

func (x *AddFileToPublicSpaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v File
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.File = &v
	return offset, nil
}

func (x *AddFileToPublicSpaceResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeleteFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteFileReq[number], err)
}

func (x *DeleteFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteFileReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteFileReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.DeleteType = IsDel(v)
	return offset, nil
}

func (x *DeleteFileReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ClearCommunity, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *DeleteFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *RecoverRecycleBinFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RecoverRecycleBinFileReq[number], err)
}

func (x *RecoverRecycleBinFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RecoverRecycleBinFileReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RecoverRecycleBinFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *CreateLabelReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateLabelReq[number], err)
}

func (x *CreateLabelReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Label
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Label = &v
	return offset, nil
}

func (x *CreateLabelResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateLabelResp[number], err)
}

func (x *CreateLabelResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetLabelReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetLabelReq[number], err)
}

func (x *GetLabelReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetLabelResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetLabelResp[number], err)
}

func (x *GetLabelResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Label
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Label = &v
	return offset, nil
}

func (x *UpdateLabelReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateLabelReq[number], err)
}

func (x *UpdateLabelReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Label
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Label = &v
	return offset, nil
}

func (x *UpdateLabelResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeleteLabelReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteLabelReq[number], err)
}

func (x *DeleteLabelReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteLabelResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *CreateShareCodeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateShareCodeReq[number], err)
}

func (x *CreateShareCodeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v ShareFile
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ShareFile = &v
	return offset, nil
}

func (x *CreateShareCodeResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateShareCodeResp[number], err)
}

func (x *CreateShareCodeResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateShareCodeResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Key, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetShareListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetShareListReq[number], err)
}

func (x *GetShareListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v ShareFileFilterOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ShareFileFilterOptions = &v
	return offset, nil
}

func (x *GetShareListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *GetShareListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetShareListResp[number], err)
}

func (x *GetShareListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v ShareCode
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ShareCodes = append(x.ShareCodes, &v)
	return offset, nil
}

func (x *GetShareListResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetShareListResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateShareCodeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateShareCodeReq[number], err)
}

func (x *UpdateShareCodeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v ShareFile
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ShareFile = &v
	return offset, nil
}

func (x *UpdateShareCodeResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeleteShareCodeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteShareCodeReq[number], err)
}

func (x *DeleteShareCodeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v ShareFileFilterOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ShareFileFilterOptions = &v
	return offset, nil
}

func (x *DeleteShareCodeResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *ParsingShareCodeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ParsingShareCodeReq[number], err)
}

func (x *ParsingShareCodeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ParsingShareCodeReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Key, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ParsingShareCodeResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ParsingShareCodeResp[number], err)
}

func (x *ParsingShareCodeResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v ShareFile
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ShareFile = &v
	return offset, nil
}

func (x *GetUserReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserReq[number], err)
}

func (x *GetUserReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserResp[number], err)
}

func (x *GetUserResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v User
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.User = &v
	return offset, nil
}

func (x *CreateUserReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateUserReq[number], err)
}

func (x *CreateUserReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v UserInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UserInfo = &v
	return offset, nil
}

func (x *CreateUserResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetUserDetailReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserDetailReq[number], err)
}

func (x *GetUserDetailReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserDetailResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserDetailResp[number], err)
}

func (x *GetUserDetailResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v UserDetail
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UserDetail = &v
	return offset, nil
}

func (x *DeleteUserReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteUserReq[number], err)
}

func (x *DeleteUserReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteUserResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *CreatePostReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreatePostReq[number], err)
}

func (x *CreatePostReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PostInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PostInfo = &v
	return offset, nil
}

func (x *CreatePostResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeletePostReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeletePostReq[number], err)
}

func (x *DeletePostReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PostId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeletePostResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *UpdatePostReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdatePostReq[number], err)
}

func (x *UpdatePostReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PostInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PostInfo = &v
	return offset, nil
}

func (x *UpdatePostResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetPostReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPostReq[number], err)
}

func (x *GetPostReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PostId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPostResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPostResp[number], err)
}

func (x *GetPostResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Post
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Post = &v
	return offset, nil
}

func (x *GetPostsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPostsReq[number], err)
}

func (x *GetPostsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v SearchOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SearchOptions = &v
	return offset, nil
}

func (x *GetPostsReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v PostFilterOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PostFilterOptions = &v
	return offset, nil
}

func (x *GetPostsReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *GetPostsResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPostsResp[number], err)
}

func (x *GetPostsResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Post
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Posts = append(x.Posts, &v)
	return offset, nil
}

func (x *GetPostsResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetPostsResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateUserReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateUserReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserDetail == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUserDetail())
	return offset
}

func (x *UpdateUserResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *SearchUserReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SearchUserReq) fastWriteField1(buf []byte) (offset int) {
	if x.Keyword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetKeyword())
	return offset
}

func (x *SearchUserReq) fastWriteField2(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPaginationOptions())
	return offset
}

func (x *SearchUserResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SearchUserResp) fastWriteField1(buf []byte) (offset int) {
	if x.Users == nil {
		return offset
	}
	for i := range x.GetUsers() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUsers()[i])
	}
	return offset
}

func (x *SearchUserResp) fastWriteField2(buf []byte) (offset int) {
	if x.LastToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetLastToken())
	return offset
}

func (x *SearchUserResp) fastWriteField3(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetTotal())
	return offset
}

func (x *GetFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.FilterOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFilterOptions())
	return offset
}

func (x *GetFileReq) fastWriteField2(buf []byte) (offset int) {
	if !x.IsGetSize {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetIsGetSize())
	return offset
}

func (x *GetFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetFileResp) fastWriteField1(buf []byte) (offset int) {
	if x.File == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFile())
	return offset
}

func (x *GetFileListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetFileListReq) fastWriteField1(buf []byte) (offset int) {
	if x.SearchOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetSearchOptions())
	return offset
}

func (x *GetFileListReq) fastWriteField2(buf []byte) (offset int) {
	if x.FilterOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetFilterOptions())
	return offset
}

func (x *GetFileListReq) fastWriteField3(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetPaginationOptions())
	return offset
}

func (x *GetFileListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetFileListResp) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *GetFileListResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *GetFileListResp) fastWriteField3(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetToken())
	return offset
}

func (x *GetFileBySharingCodeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetFileBySharingCodeReq) fastWriteField1(buf []byte) (offset int) {
	if x.SharingCode == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetSharingCode())
	return offset
}

func (x *GetFileBySharingCodeReq) fastWriteField2(buf []byte) (offset int) {
	if x.FilterOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetFilterOptions())
	return offset
}

func (x *GetFileBySharingCodeReq) fastWriteField3(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetPaginationOptions())
	return offset
}

func (x *GetFileBySharingCodeResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetFileBySharingCodeResp) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *GetFileBySharingCodeResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *GetFileBySharingCodeResp) fastWriteField3(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetToken())
	return offset
}

func (x *CreateFolderReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateFolderReq) fastWriteField1(buf []byte) (offset int) {
	if x.File == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFile())
	return offset
}

func (x *CreateFolderResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateFolderResp) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *UpdateFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.File == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFile())
	return offset
}

func (x *UpdateFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *MoveFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *MoveFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *MoveFileReq) fastWriteField2(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFileId())
	return offset
}

func (x *MoveFileReq) fastWriteField3(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetFatherId())
	return offset
}

func (x *MoveFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *SaveFileToPrivateSpaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *SaveFileToPrivateSpaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *SaveFileToPrivateSpaceReq) fastWriteField2(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFileId())
	return offset
}

func (x *SaveFileToPrivateSpaceReq) fastWriteField3(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetFatherId())
	return offset
}

func (x *SaveFileToPrivateSpaceReq) fastWriteField4(buf []byte) (offset int) {
	if x.DocumentType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetDocumentType()))
	return offset
}

func (x *SaveFileToPrivateSpaceResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SaveFileToPrivateSpaceResp) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *AddFileToPublicSpaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *AddFileToPublicSpaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.File == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFile())
	return offset
}

func (x *AddFileToPublicSpaceResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeleteFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *DeleteFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *DeleteFileReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *DeleteFileReq) fastWriteField3(buf []byte) (offset int) {
	if x.DeleteType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetDeleteType()))
	return offset
}

func (x *DeleteFileReq) fastWriteField4(buf []byte) (offset int) {
	if !x.ClearCommunity {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 4, x.GetClearCommunity())
	return offset
}

func (x *DeleteFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *RecoverRecycleBinFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *RecoverRecycleBinFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *RecoverRecycleBinFileReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *RecoverRecycleBinFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *CreateLabelReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateLabelReq) fastWriteField1(buf []byte) (offset int) {
	if x.Label == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLabel())
	return offset
}

func (x *CreateLabelResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateLabelResp) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetLabelReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetLabelReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetLabelResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetLabelResp) fastWriteField1(buf []byte) (offset int) {
	if x.Label == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLabel())
	return offset
}

func (x *UpdateLabelReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateLabelReq) fastWriteField1(buf []byte) (offset int) {
	if x.Label == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLabel())
	return offset
}

func (x *UpdateLabelResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeleteLabelReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteLabelReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeleteLabelResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *CreateShareCodeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateShareCodeReq) fastWriteField1(buf []byte) (offset int) {
	if x.ShareFile == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetShareFile())
	return offset
}

func (x *CreateShareCodeResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CreateShareCodeResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *CreateShareCodeResp) fastWriteField2(buf []byte) (offset int) {
	if x.Key == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetKey())
	return offset
}

func (x *GetShareListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetShareListReq) fastWriteField1(buf []byte) (offset int) {
	if x.ShareFileFilterOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetShareFileFilterOptions())
	return offset
}

func (x *GetShareListReq) fastWriteField2(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPaginationOptions())
	return offset
}

func (x *GetShareListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetShareListResp) fastWriteField1(buf []byte) (offset int) {
	if x.ShareCodes == nil {
		return offset
	}
	for i := range x.GetShareCodes() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetShareCodes()[i])
	}
	return offset
}

func (x *GetShareListResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *GetShareListResp) fastWriteField3(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetToken())
	return offset
}

func (x *UpdateShareCodeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateShareCodeReq) fastWriteField1(buf []byte) (offset int) {
	if x.ShareFile == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetShareFile())
	return offset
}

func (x *UpdateShareCodeResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeleteShareCodeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteShareCodeReq) fastWriteField1(buf []byte) (offset int) {
	if x.ShareFileFilterOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetShareFileFilterOptions())
	return offset
}

func (x *DeleteShareCodeResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *ParsingShareCodeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ParsingShareCodeReq) fastWriteField1(buf []byte) (offset int) {
	if x.Code == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *ParsingShareCodeReq) fastWriteField2(buf []byte) (offset int) {
	if x.Key == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetKey())
	return offset
}

func (x *ParsingShareCodeResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ParsingShareCodeResp) fastWriteField1(buf []byte) (offset int) {
	if x.ShareFile == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetShareFile())
	return offset
}

func (x *GetUserReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetUserReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *GetUserResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetUserResp) fastWriteField1(buf []byte) (offset int) {
	if x.User == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUser())
	return offset
}

func (x *CreateUserReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateUserReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUserInfo())
	return offset
}

func (x *CreateUserResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetUserDetailReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetUserDetailReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *GetUserDetailResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetUserDetailResp) fastWriteField1(buf []byte) (offset int) {
	if x.UserDetail == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUserDetail())
	return offset
}

func (x *DeleteUserReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteUserReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *DeleteUserResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *CreatePostReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreatePostReq) fastWriteField1(buf []byte) (offset int) {
	if x.PostInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPostInfo())
	return offset
}

func (x *CreatePostResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeletePostReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeletePostReq) fastWriteField1(buf []byte) (offset int) {
	if x.PostId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPostId())
	return offset
}

func (x *DeletePostResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *UpdatePostReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdatePostReq) fastWriteField1(buf []byte) (offset int) {
	if x.PostInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPostInfo())
	return offset
}

func (x *UpdatePostResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetPostReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPostReq) fastWriteField1(buf []byte) (offset int) {
	if x.PostId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPostId())
	return offset
}

func (x *GetPostResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPostResp) fastWriteField1(buf []byte) (offset int) {
	if x.Post == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPost())
	return offset
}

func (x *GetPostsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetPostsReq) fastWriteField1(buf []byte) (offset int) {
	if x.SearchOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetSearchOptions())
	return offset
}

func (x *GetPostsReq) fastWriteField2(buf []byte) (offset int) {
	if x.PostFilterOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPostFilterOptions())
	return offset
}

func (x *GetPostsReq) fastWriteField3(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetPaginationOptions())
	return offset
}

func (x *GetPostsResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetPostsResp) fastWriteField1(buf []byte) (offset int) {
	if x.Posts == nil {
		return offset
	}
	for i := range x.GetPosts() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPosts()[i])
	}
	return offset
}

func (x *GetPostsResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *GetPostsResp) fastWriteField3(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetToken())
	return offset
}

func (x *UpdateUserReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateUserReq) sizeField1() (n int) {
	if x.UserDetail == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetUserDetail())
	return n
}

func (x *UpdateUserResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *SearchUserReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SearchUserReq) sizeField1() (n int) {
	if x.Keyword == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetKeyword())
	return n
}

func (x *SearchUserReq) sizeField2() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetPaginationOptions())
	return n
}

func (x *SearchUserResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SearchUserResp) sizeField1() (n int) {
	if x.Users == nil {
		return n
	}
	for i := range x.GetUsers() {
		n += fastpb.SizeMessage(1, x.GetUsers()[i])
	}
	return n
}

func (x *SearchUserResp) sizeField2() (n int) {
	if x.LastToken == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetLastToken())
	return n
}

func (x *SearchUserResp) sizeField3() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetTotal())
	return n
}

func (x *GetFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFileReq) sizeField1() (n int) {
	if x.FilterOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFilterOptions())
	return n
}

func (x *GetFileReq) sizeField2() (n int) {
	if !x.IsGetSize {
		return n
	}
	n += fastpb.SizeBool(2, x.GetIsGetSize())
	return n
}

func (x *GetFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetFileResp) sizeField1() (n int) {
	if x.File == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFile())
	return n
}

func (x *GetFileListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetFileListReq) sizeField1() (n int) {
	if x.SearchOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetSearchOptions())
	return n
}

func (x *GetFileListReq) sizeField2() (n int) {
	if x.FilterOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetFilterOptions())
	return n
}

func (x *GetFileListReq) sizeField3() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetPaginationOptions())
	return n
}

func (x *GetFileListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetFileListResp) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *GetFileListResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *GetFileListResp) sizeField3() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetToken())
	return n
}

func (x *GetFileBySharingCodeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetFileBySharingCodeReq) sizeField1() (n int) {
	if x.SharingCode == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetSharingCode())
	return n
}

func (x *GetFileBySharingCodeReq) sizeField2() (n int) {
	if x.FilterOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetFilterOptions())
	return n
}

func (x *GetFileBySharingCodeReq) sizeField3() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetPaginationOptions())
	return n
}

func (x *GetFileBySharingCodeResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetFileBySharingCodeResp) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *GetFileBySharingCodeResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *GetFileBySharingCodeResp) sizeField3() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetToken())
	return n
}

func (x *CreateFolderReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateFolderReq) sizeField1() (n int) {
	if x.File == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFile())
	return n
}

func (x *CreateFolderResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateFolderResp) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *UpdateFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateFileReq) sizeField1() (n int) {
	if x.File == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFile())
	return n
}

func (x *UpdateFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *MoveFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *MoveFileReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *MoveFileReq) sizeField2() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetFileId())
	return n
}

func (x *MoveFileReq) sizeField3() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetFatherId())
	return n
}

func (x *MoveFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *SaveFileToPrivateSpaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *SaveFileToPrivateSpaceReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *SaveFileToPrivateSpaceReq) sizeField2() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetFileId())
	return n
}

func (x *SaveFileToPrivateSpaceReq) sizeField3() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetFatherId())
	return n
}

func (x *SaveFileToPrivateSpaceReq) sizeField4() (n int) {
	if x.DocumentType == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetDocumentType()))
	return n
}

func (x *SaveFileToPrivateSpaceResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SaveFileToPrivateSpaceResp) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *AddFileToPublicSpaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *AddFileToPublicSpaceReq) sizeField1() (n int) {
	if x.File == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFile())
	return n
}

func (x *AddFileToPublicSpaceResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeleteFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *DeleteFileReq) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *DeleteFileReq) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *DeleteFileReq) sizeField3() (n int) {
	if x.DeleteType == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetDeleteType()))
	return n
}

func (x *DeleteFileReq) sizeField4() (n int) {
	if !x.ClearCommunity {
		return n
	}
	n += fastpb.SizeBool(4, x.GetClearCommunity())
	return n
}

func (x *DeleteFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *RecoverRecycleBinFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *RecoverRecycleBinFileReq) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *RecoverRecycleBinFileReq) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *RecoverRecycleBinFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *CreateLabelReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateLabelReq) sizeField1() (n int) {
	if x.Label == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetLabel())
	return n
}

func (x *CreateLabelResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateLabelResp) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *GetLabelReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetLabelReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *GetLabelResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetLabelResp) sizeField1() (n int) {
	if x.Label == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetLabel())
	return n
}

func (x *UpdateLabelReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateLabelReq) sizeField1() (n int) {
	if x.Label == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetLabel())
	return n
}

func (x *UpdateLabelResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeleteLabelReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteLabelReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *DeleteLabelResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *CreateShareCodeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateShareCodeReq) sizeField1() (n int) {
	if x.ShareFile == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetShareFile())
	return n
}

func (x *CreateShareCodeResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CreateShareCodeResp) sizeField1() (n int) {
	if x.Code == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCode())
	return n
}

func (x *CreateShareCodeResp) sizeField2() (n int) {
	if x.Key == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetKey())
	return n
}

func (x *GetShareListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetShareListReq) sizeField1() (n int) {
	if x.ShareFileFilterOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetShareFileFilterOptions())
	return n
}

func (x *GetShareListReq) sizeField2() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetPaginationOptions())
	return n
}

func (x *GetShareListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetShareListResp) sizeField1() (n int) {
	if x.ShareCodes == nil {
		return n
	}
	for i := range x.GetShareCodes() {
		n += fastpb.SizeMessage(1, x.GetShareCodes()[i])
	}
	return n
}

func (x *GetShareListResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *GetShareListResp) sizeField3() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetToken())
	return n
}

func (x *UpdateShareCodeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateShareCodeReq) sizeField1() (n int) {
	if x.ShareFile == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetShareFile())
	return n
}

func (x *UpdateShareCodeResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeleteShareCodeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteShareCodeReq) sizeField1() (n int) {
	if x.ShareFileFilterOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetShareFileFilterOptions())
	return n
}

func (x *DeleteShareCodeResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *ParsingShareCodeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ParsingShareCodeReq) sizeField1() (n int) {
	if x.Code == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCode())
	return n
}

func (x *ParsingShareCodeReq) sizeField2() (n int) {
	if x.Key == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetKey())
	return n
}

func (x *ParsingShareCodeResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ParsingShareCodeResp) sizeField1() (n int) {
	if x.ShareFile == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetShareFile())
	return n
}

func (x *GetUserReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetUserReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *GetUserResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetUserResp) sizeField1() (n int) {
	if x.User == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetUser())
	return n
}

func (x *CreateUserReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateUserReq) sizeField1() (n int) {
	if x.UserInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetUserInfo())
	return n
}

func (x *CreateUserResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetUserDetailReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetUserDetailReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *GetUserDetailResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetUserDetailResp) sizeField1() (n int) {
	if x.UserDetail == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetUserDetail())
	return n
}

func (x *DeleteUserReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteUserReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *DeleteUserResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *CreatePostReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreatePostReq) sizeField1() (n int) {
	if x.PostInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPostInfo())
	return n
}

func (x *CreatePostResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeletePostReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeletePostReq) sizeField1() (n int) {
	if x.PostId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPostId())
	return n
}

func (x *DeletePostResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *UpdatePostReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdatePostReq) sizeField1() (n int) {
	if x.PostInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPostInfo())
	return n
}

func (x *UpdatePostResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetPostReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPostReq) sizeField1() (n int) {
	if x.PostId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPostId())
	return n
}

func (x *GetPostResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPostResp) sizeField1() (n int) {
	if x.Post == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPost())
	return n
}

func (x *GetPostsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetPostsReq) sizeField1() (n int) {
	if x.SearchOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetSearchOptions())
	return n
}

func (x *GetPostsReq) sizeField2() (n int) {
	if x.PostFilterOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetPostFilterOptions())
	return n
}

func (x *GetPostsReq) sizeField3() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetPaginationOptions())
	return n
}

func (x *GetPostsResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetPostsResp) sizeField1() (n int) {
	if x.Posts == nil {
		return n
	}
	for i := range x.GetPosts() {
		n += fastpb.SizeMessage(1, x.GetPosts()[i])
	}
	return n
}

func (x *GetPostsResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *GetPostsResp) sizeField3() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetToken())
	return n
}

var fieldIDToName_UpdateUserReq = map[int32]string{
	1: "UserDetail",
}

var fieldIDToName_UpdateUserResp = map[int32]string{}

var fieldIDToName_SearchUserReq = map[int32]string{
	1: "Keyword",
	2: "PaginationOptions",
}

var fieldIDToName_SearchUserResp = map[int32]string{
	1: "Users",
	2: "LastToken",
	3: "Total",
}

var fieldIDToName_GetFileReq = map[int32]string{
	1: "FilterOptions",
	2: "IsGetSize",
}

var fieldIDToName_GetFileResp = map[int32]string{
	1: "File",
}

var fieldIDToName_GetFileListReq = map[int32]string{
	1: "SearchOptions",
	2: "FilterOptions",
	3: "PaginationOptions",
}

var fieldIDToName_GetFileListResp = map[int32]string{
	1: "Files",
	2: "Total",
	3: "Token",
}

var fieldIDToName_GetFileBySharingCodeReq = map[int32]string{
	1: "SharingCode",
	2: "FilterOptions",
	3: "PaginationOptions",
}

var fieldIDToName_GetFileBySharingCodeResp = map[int32]string{
	1: "Files",
	2: "Total",
	3: "Token",
}

var fieldIDToName_CreateFolderReq = map[int32]string{
	1: "File",
}

var fieldIDToName_CreateFolderResp = map[int32]string{
	1: "FileId",
}

var fieldIDToName_UpdateFileReq = map[int32]string{
	1: "File",
}

var fieldIDToName_UpdateFileResp = map[int32]string{}

var fieldIDToName_MoveFileReq = map[int32]string{
	1: "UserId",
	2: "FileId",
	3: "FatherId",
}

var fieldIDToName_MoveFileResp = map[int32]string{}

var fieldIDToName_SaveFileToPrivateSpaceReq = map[int32]string{
	1: "UserId",
	2: "FileId",
	3: "FatherId",
	4: "DocumentType",
}

var fieldIDToName_SaveFileToPrivateSpaceResp = map[int32]string{
	1: "FileId",
}

var fieldIDToName_AddFileToPublicSpaceReq = map[int32]string{
	1: "File",
}

var fieldIDToName_AddFileToPublicSpaceResp = map[int32]string{}

var fieldIDToName_DeleteFileReq = map[int32]string{
	1: "FileId",
	2: "UserId",
	3: "DeleteType",
	4: "ClearCommunity",
}

var fieldIDToName_DeleteFileResp = map[int32]string{}

var fieldIDToName_RecoverRecycleBinFileReq = map[int32]string{
	1: "FileId",
	2: "UserId",
}

var fieldIDToName_RecoverRecycleBinFileResp = map[int32]string{}

var fieldIDToName_CreateLabelReq = map[int32]string{
	1: "Label",
}

var fieldIDToName_CreateLabelResp = map[int32]string{
	1: "Id",
}

var fieldIDToName_GetLabelReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_GetLabelResp = map[int32]string{
	1: "Label",
}

var fieldIDToName_UpdateLabelReq = map[int32]string{
	1: "Label",
}

var fieldIDToName_UpdateLabelResp = map[int32]string{}

var fieldIDToName_DeleteLabelReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeleteLabelResp = map[int32]string{}

var fieldIDToName_CreateShareCodeReq = map[int32]string{
	1: "ShareFile",
}

var fieldIDToName_CreateShareCodeResp = map[int32]string{
	1: "Code",
	2: "Key",
}

var fieldIDToName_GetShareListReq = map[int32]string{
	1: "ShareFileFilterOptions",
	2: "PaginationOptions",
}

var fieldIDToName_GetShareListResp = map[int32]string{
	1: "ShareCodes",
	2: "Total",
	3: "Token",
}

var fieldIDToName_UpdateShareCodeReq = map[int32]string{
	1: "ShareFile",
}

var fieldIDToName_UpdateShareCodeResp = map[int32]string{}

var fieldIDToName_DeleteShareCodeReq = map[int32]string{
	1: "ShareFileFilterOptions",
}

var fieldIDToName_DeleteShareCodeResp = map[int32]string{}

var fieldIDToName_ParsingShareCodeReq = map[int32]string{
	1: "Code",
	2: "Key",
}

var fieldIDToName_ParsingShareCodeResp = map[int32]string{
	1: "ShareFile",
}

var fieldIDToName_GetUserReq = map[int32]string{
	1: "UserId",
}

var fieldIDToName_GetUserResp = map[int32]string{
	1: "User",
}

var fieldIDToName_CreateUserReq = map[int32]string{
	1: "UserInfo",
}

var fieldIDToName_CreateUserResp = map[int32]string{}

var fieldIDToName_GetUserDetailReq = map[int32]string{
	1: "UserId",
}

var fieldIDToName_GetUserDetailResp = map[int32]string{
	1: "UserDetail",
}

var fieldIDToName_DeleteUserReq = map[int32]string{
	1: "UserId",
}

var fieldIDToName_DeleteUserResp = map[int32]string{}

var fieldIDToName_CreatePostReq = map[int32]string{
	1: "PostInfo",
}

var fieldIDToName_CreatePostResp = map[int32]string{}

var fieldIDToName_DeletePostReq = map[int32]string{
	1: "PostId",
}

var fieldIDToName_DeletePostResp = map[int32]string{}

var fieldIDToName_UpdatePostReq = map[int32]string{
	1: "PostInfo",
}

var fieldIDToName_UpdatePostResp = map[int32]string{}

var fieldIDToName_GetPostReq = map[int32]string{
	1: "PostId",
}

var fieldIDToName_GetPostResp = map[int32]string{
	1: "Post",
}

var fieldIDToName_GetPostsReq = map[int32]string{
	1: "SearchOptions",
	2: "PostFilterOptions",
	3: "PaginationOptions",
}

var fieldIDToName_GetPostsResp = map[int32]string{
	1: "Posts",
	2: "Total",
	3: "Token",
}

var _ = basic.File_basic_pagination_proto
var _ = http.File_http_http_proto
