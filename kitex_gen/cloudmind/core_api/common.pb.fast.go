// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package core_api

import (
	fmt "fmt"
	basic "github.com/CloudStriver/service-idl-gen-go/kitex_gen/basic"
	content "github.com/CloudStriver/service-idl-gen-go/kitex_gen/cloudmind/content"
	sts "github.com/CloudStriver/service-idl-gen-go/kitex_gen/cloudmind/sts"
	http "github.com/CloudStriver/service-idl-gen-go/kitex_gen/http"
	comment "github.com/CloudStriver/service-idl-gen-go/kitex_gen/platform/comment"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Slider) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Slider[number], err)
}

func (x *Slider) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.SliderId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Slider) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ImageUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Slider) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.LinkUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Slider) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.IsPublic, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *User) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_User[number], err)
}

func (x *User) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RecommendUser) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RecommendUser[number], err)
}

func (x *RecommendUser) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RecommendUser) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RecommendUser) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RecommendUser) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.FollowCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RecommendUser) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RecommendUser) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Labels = append(x.Labels, v)
	return offset, err
}

func (x *UserDetail) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserDetail[number], err)
}

func (x *UserDetail) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserDetail) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Sex, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UserDetail) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.FullName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserDetail) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.IdCard, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserDetail) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserDetail) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PrivateFile) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PrivateFile[number], err)
}

func (x *PrivateFile) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PrivateFile) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PrivateFile) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PrivateFile) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PrivateFile) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Path, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PrivateFile) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PrivateFile) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.SpaceSize, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PrivateFile) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.IsDel, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PrivateFile) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.CreateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PrivateFile) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.UpdateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PrivateFile) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.DeleteAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PublicFile) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 16:
		offset, err = x.fastReadField16(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 17:
		offset, err = x.fastReadField17(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PublicFile[number], err)
}

func (x *PublicFile) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Path, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.SpaceSize, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.IsDel, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Zone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.SubZone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.CreateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.UpdateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	var v Label
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Labels = append(x.Labels, &v)
	return offset, nil
}

func (x *PublicFile) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	var v User
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Author = &v
	return offset, nil
}

func (x *PublicFile) fastReadField16(buf []byte, _type int8) (offset int, err error) {
	var v PostCount
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FileCount = &v
	return offset, nil
}

func (x *PublicFile) fastReadField17(buf []byte, _type int8) (offset int, err error) {
	var v PostRelation
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FileRelation = &v
	return offset, nil
}

func (x *Zone) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Zone[number], err)
}

func (x *Zone) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Zone) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Zone) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Value, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ShareFile) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ShareFile[number], err)
}

func (x *ShareFile) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ShareFile) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ShareFile) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ShareFile) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.EffectiveTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ShareFile) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.BrowseNumber, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ShareFile) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.CreateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ShareFile) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.FileList = append(x.FileList, v)
	return offset, err
}

func (x *ShareFileInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ShareFileInfo[number], err)
}

func (x *ShareFileInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ShareFileInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ShareFileInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ShareFileInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ShareFileInfo) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.EffectiveTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ShareFileInfo) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.BrowseNumber, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ShareFileInfo) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.CreateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ShareFileInfo) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.FileList = append(x.FileList, v)
	return offset, err
}

func (x *ShareCode) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ShareCode[number], err)
}

func (x *ShareCode) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ShareCode) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ShareCode) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ShareCode) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.BrowseNumber, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ShareCode) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CreateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ShareCode) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Key, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchField) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchField[number], err)
}

func (x *SearchField) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Name = &tmp
	return offset, err
}

func (x *SearchField) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Id = &tmp
	return offset, err
}

func (x *SearchField) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Tag = &tmp
	return offset, err
}

func (x *SearchField) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Text = &tmp
	return offset, err
}

func (x *SearchField) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Title = &tmp
	return offset, err
}

func (x *SearchField) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Description = &tmp
	return offset, err
}

func (x *SearchField) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.ProductName = &tmp
	return offset, err
}

func (x *SearchOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchOptions[number], err)
}

func (x *SearchOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var ov SearchOptions_AllFieldsKey
	x.Type = &ov
	ov.AllFieldsKey, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var ov SearchOptions_MultiFieldsKey
	x.Type = &ov
	var v SearchField
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	ov.MultiFieldsKey = &v
	return offset, nil
}

func (x *FileFilterOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FileFilterOptions[number], err)
}

func (x *FileFilterOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyUserId = &tmp
	return offset, err
}

func (x *FileFilterOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyFileId = &tmp
	return offset, err
}

func (x *FileFilterOptions) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyFatherId = &tmp
	return offset, err
}

func (x *FileFilterOptions) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.OnlyIsDel = &tmp
	return offset, err
}

func (x *FileFilterOptions) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyZone = &tmp
	return offset, err
}

func (x *FileFilterOptions) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlySubZone = &tmp
	return offset, err
}

func (x *FileFilterOptions) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.OnlyDocumentType = &tmp
	return offset, err
}

func (x *FileFilterOptions) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OnlyLabels = append(x.OnlyLabels, v)
	return offset, err
}

func (x *FileFilterOptions) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OnlyType = append(x.OnlyType, v)
	return offset, err
}

func (x *ShareFileFilterOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ShareFileFilterOptions[number], err)
}

func (x *ShareFileFilterOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyCode = &tmp
	return offset, err
}

func (x *ShareFileFilterOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyUserId = &tmp
	return offset, err
}

func (x *UserDetailInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserDetailInfo[number], err)
}

func (x *UserDetailInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserDetailInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserDetailInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Sex, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UserDetailInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.FullName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserDetailInfo) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.IdCard, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserDetailInfo) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserDetailInfo) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserInfo[number], err)
}

func (x *UserInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Sex, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PostCount) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PostCount[number], err)
}

func (x *PostCount) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ViewCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PostCount) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.LikeCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PostCount) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CommentCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PostCount) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ShareCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PostCount) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CollectCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PostRelation) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PostRelation[number], err)
}

func (x *PostRelation) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Liked, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *PostRelation) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Collected, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *CommentRelation) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CommentRelation[number], err)
}

func (x *CommentRelation) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Liked, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *CommentRelation) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Hated, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Post) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Post[number], err)
}

func (x *Post) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PostId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Post) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Post) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Text, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Post) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Post) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Tags = append(x.Tags, v)
	return offset, err
}

func (x *Post) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.LikeCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Post) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.CommentCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Post) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Liked, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Post) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.UserName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Notification) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Notification[number], err)
}

func (x *Notification) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FromName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Notification) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FromId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Notification) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ToName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Notification) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ToId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Notification) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ToType, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Notification) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Notification) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Comment) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Comment[number], err)
}

func (x *Comment) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SubjectId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.RootId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Count = &tmp
	return offset, err
}

func (x *Comment) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.State = State(v)
	return offset, nil
}

func (x *Comment) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Attrs = Attrs(v)
	return offset, nil
}

func (x *Comment) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Labels = append(x.Labels, v)
	return offset, err
}

func (x *Comment) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.AtUserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.Meta, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CommentInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 16:
		offset, err = x.fastReadField16(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CommentInfo[number], err)
}

func (x *CommentInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CommentInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SubjectId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CommentInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.RootId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CommentInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CommentInfo) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Count, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CommentInfo) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.State, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CommentInfo) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Attrs, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CommentInfo) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	var v Label
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Labels = append(x.Labels, &v)
	return offset, nil
}

func (x *CommentInfo) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CommentInfo) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.AtUserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CommentInfo) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CommentInfo) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.Meta, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CommentInfo) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CommentInfo) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.Like, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CommentInfo) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	var v User
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Author = &v
	return offset, nil
}

func (x *CommentInfo) fastReadField16(buf []byte, _type int8) (offset int, err error) {
	var v CommentRelation
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.CommentRelation = &v
	return offset, nil
}

func (x *CommentFilterOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CommentFilterOptions[number], err)
}

func (x *CommentFilterOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyUserId = &tmp
	return offset, err
}

func (x *CommentFilterOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyAtUserId = &tmp
	return offset, err
}

func (x *CommentFilterOptions) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyCommentId = &tmp
	return offset, err
}

func (x *CommentFilterOptions) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlySubjectId = &tmp
	return offset, err
}

func (x *CommentFilterOptions) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyRootId = &tmp
	return offset, err
}

func (x *CommentFilterOptions) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyFatherId = &tmp
	return offset, err
}

func (x *CommentFilterOptions) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.OnlyState = &tmp
	return offset, err
}

func (x *CommentFilterOptions) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.OnlyAttrs = &tmp
	return offset, err
}

func (x *SubjectFilterOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SubjectFilterOptions[number], err)
}

func (x *SubjectFilterOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyUserId = &tmp
	return offset, err
}

func (x *SubjectFilterOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlySubjectId = &tmp
	return offset, err
}

func (x *SubjectFilterOptions) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.OnlyState = &tmp
	return offset, err
}

func (x *SubjectFilterOptions) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.OnlyAttrs = &tmp
	return offset, err
}

func (x *Subject) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Subject[number], err)
}

func (x *Subject) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Subject) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Subject) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.TopCommentId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Subject) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.RootCount = &tmp
	return offset, err
}

func (x *Subject) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.AllCount = &tmp
	return offset, err
}

func (x *Subject) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.State = State(v)
	return offset, nil
}

func (x *Subject) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Attrs = Attrs(v)
	return offset, nil
}

func (x *SubjectDetails) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SubjectDetails[number], err)
}

func (x *SubjectDetails) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SubjectDetails) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SubjectDetails) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.TopCommentId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SubjectDetails) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.RootCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SubjectDetails) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.AllCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SubjectDetails) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.State, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SubjectDetails) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Attrs, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SubjectInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SubjectInfo[number], err)
}

func (x *SubjectInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SubjectInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SubjectInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Attrs, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Label) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Label[number], err)
}

func (x *Label) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.LabelId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Label) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Value, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Recommends) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Recommends[number], err)
}

func (x *Recommends) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v RecommendUser
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Users = append(x.Users, &v)
	return offset, nil
}

func (x *Recommends) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Post
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Posts = append(x.Posts, &v)
	return offset, nil
}

func (x *Product) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Product[number], err)
}

func (x *Product) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProductId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Product) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Product) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Product) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Product) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Tags = append(x.Tags, v)
	return offset, err
}

func (x *Product) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Product) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Product) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.ProductSize, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Product) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	var v User
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.User = &v
	return offset, nil
}

func (x *Product) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.CollectCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Product) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.PurchaseCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Product) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Slider) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *Slider) fastWriteField1(buf []byte) (offset int) {
	if x.SliderId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetSliderId())
	return offset
}

func (x *Slider) fastWriteField2(buf []byte) (offset int) {
	if x.ImageUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetImageUrl())
	return offset
}

func (x *Slider) fastWriteField3(buf []byte) (offset int) {
	if x.LinkUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetLinkUrl())
	return offset
}

func (x *Slider) fastWriteField4(buf []byte) (offset int) {
	if x.IsPublic == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetIsPublic())
	return offset
}

func (x *User) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *User) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *User) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *User) fastWriteField3(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUrl())
	return offset
}

func (x *RecommendUser) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *RecommendUser) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *RecommendUser) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *RecommendUser) fastWriteField3(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUrl())
	return offset
}

func (x *RecommendUser) fastWriteField4(buf []byte) (offset int) {
	if x.FollowCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetFollowCount())
	return offset
}

func (x *RecommendUser) fastWriteField5(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetDescription())
	return offset
}

func (x *RecommendUser) fastWriteField6(buf []byte) (offset int) {
	if len(x.Labels) == 0 {
		return offset
	}
	for i := range x.GetLabels() {
		offset += fastpb.WriteString(buf[offset:], 6, x.GetLabels()[i])
	}
	return offset
}

func (x *UserDetail) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *UserDetail) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *UserDetail) fastWriteField2(buf []byte) (offset int) {
	if x.Sex == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetSex())
	return offset
}

func (x *UserDetail) fastWriteField3(buf []byte) (offset int) {
	if x.FullName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetFullName())
	return offset
}

func (x *UserDetail) fastWriteField4(buf []byte) (offset int) {
	if x.IdCard == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetIdCard())
	return offset
}

func (x *UserDetail) fastWriteField5(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetDescription())
	return offset
}

func (x *UserDetail) fastWriteField6(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetUrl())
	return offset
}

func (x *PrivateFile) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	return offset
}

func (x *PrivateFile) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *PrivateFile) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *PrivateFile) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *PrivateFile) fastWriteField4(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetType())
	return offset
}

func (x *PrivateFile) fastWriteField5(buf []byte) (offset int) {
	if x.Path == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetPath())
	return offset
}

func (x *PrivateFile) fastWriteField6(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetFatherId())
	return offset
}

func (x *PrivateFile) fastWriteField7(buf []byte) (offset int) {
	if x.SpaceSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetSpaceSize())
	return offset
}

func (x *PrivateFile) fastWriteField8(buf []byte) (offset int) {
	if x.IsDel == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetIsDel())
	return offset
}

func (x *PrivateFile) fastWriteField9(buf []byte) (offset int) {
	if x.CreateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetCreateAt())
	return offset
}

func (x *PrivateFile) fastWriteField10(buf []byte) (offset int) {
	if x.UpdateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetUpdateAt())
	return offset
}

func (x *PrivateFile) fastWriteField11(buf []byte) (offset int) {
	if x.DeleteAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetDeleteAt())
	return offset
}

func (x *PublicFile) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	offset += x.fastWriteField16(buf[offset:])
	offset += x.fastWriteField17(buf[offset:])
	return offset
}

func (x *PublicFile) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *PublicFile) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *PublicFile) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *PublicFile) fastWriteField4(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetType())
	return offset
}

func (x *PublicFile) fastWriteField5(buf []byte) (offset int) {
	if x.Path == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetPath())
	return offset
}

func (x *PublicFile) fastWriteField6(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetFatherId())
	return offset
}

func (x *PublicFile) fastWriteField7(buf []byte) (offset int) {
	if x.SpaceSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetSpaceSize())
	return offset
}

func (x *PublicFile) fastWriteField8(buf []byte) (offset int) {
	if x.IsDel == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetIsDel())
	return offset
}

func (x *PublicFile) fastWriteField9(buf []byte) (offset int) {
	if x.Zone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetZone())
	return offset
}

func (x *PublicFile) fastWriteField10(buf []byte) (offset int) {
	if x.SubZone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetSubZone())
	return offset
}

func (x *PublicFile) fastWriteField11(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetDescription())
	return offset
}

func (x *PublicFile) fastWriteField12(buf []byte) (offset int) {
	if x.CreateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 12, x.GetCreateAt())
	return offset
}

func (x *PublicFile) fastWriteField13(buf []byte) (offset int) {
	if x.UpdateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 13, x.GetUpdateAt())
	return offset
}

func (x *PublicFile) fastWriteField14(buf []byte) (offset int) {
	if x.Labels == nil {
		return offset
	}
	for i := range x.GetLabels() {
		offset += fastpb.WriteMessage(buf[offset:], 14, x.GetLabels()[i])
	}
	return offset
}

func (x *PublicFile) fastWriteField15(buf []byte) (offset int) {
	if x.Author == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 15, x.GetAuthor())
	return offset
}

func (x *PublicFile) fastWriteField16(buf []byte) (offset int) {
	if x.FileCount == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 16, x.GetFileCount())
	return offset
}

func (x *PublicFile) fastWriteField17(buf []byte) (offset int) {
	if x.FileRelation == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 17, x.GetFileRelation())
	return offset
}

func (x *Zone) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Zone) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Zone) fastWriteField2(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFatherId())
	return offset
}

func (x *Zone) fastWriteField3(buf []byte) (offset int) {
	if x.Value == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetValue())
	return offset
}

func (x *ShareFile) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *ShareFile) fastWriteField1(buf []byte) (offset int) {
	if x.Code == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *ShareFile) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *ShareFile) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *ShareFile) fastWriteField4(buf []byte) (offset int) {
	if x.EffectiveTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetEffectiveTime())
	return offset
}

func (x *ShareFile) fastWriteField5(buf []byte) (offset int) {
	if x.BrowseNumber == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetBrowseNumber())
	return offset
}

func (x *ShareFile) fastWriteField6(buf []byte) (offset int) {
	if x.CreateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetCreateAt())
	return offset
}

func (x *ShareFile) fastWriteField7(buf []byte) (offset int) {
	if len(x.FileList) == 0 {
		return offset
	}
	for i := range x.GetFileList() {
		offset += fastpb.WriteString(buf[offset:], 7, x.GetFileList()[i])
	}
	return offset
}

func (x *ShareFileInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *ShareFileInfo) fastWriteField1(buf []byte) (offset int) {
	if x.Code == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *ShareFileInfo) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *ShareFileInfo) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *ShareFileInfo) fastWriteField4(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetStatus())
	return offset
}

func (x *ShareFileInfo) fastWriteField5(buf []byte) (offset int) {
	if x.EffectiveTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetEffectiveTime())
	return offset
}

func (x *ShareFileInfo) fastWriteField6(buf []byte) (offset int) {
	if x.BrowseNumber == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetBrowseNumber())
	return offset
}

func (x *ShareFileInfo) fastWriteField7(buf []byte) (offset int) {
	if x.CreateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetCreateAt())
	return offset
}

func (x *ShareFileInfo) fastWriteField8(buf []byte) (offset int) {
	if len(x.FileList) == 0 {
		return offset
	}
	for i := range x.GetFileList() {
		offset += fastpb.WriteString(buf[offset:], 8, x.GetFileList()[i])
	}
	return offset
}

func (x *ShareCode) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *ShareCode) fastWriteField1(buf []byte) (offset int) {
	if x.Code == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *ShareCode) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *ShareCode) fastWriteField3(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetStatus())
	return offset
}

func (x *ShareCode) fastWriteField4(buf []byte) (offset int) {
	if x.BrowseNumber == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetBrowseNumber())
	return offset
}

func (x *ShareCode) fastWriteField5(buf []byte) (offset int) {
	if x.CreateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetCreateAt())
	return offset
}

func (x *ShareCode) fastWriteField6(buf []byte) (offset int) {
	if x.Key == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetKey())
	return offset
}

func (x *SearchField) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *SearchField) fastWriteField1(buf []byte) (offset int) {
	if x.Name == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *SearchField) fastWriteField2(buf []byte) (offset int) {
	if x.Id == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetId())
	return offset
}

func (x *SearchField) fastWriteField3(buf []byte) (offset int) {
	if x.Tag == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetTag())
	return offset
}

func (x *SearchField) fastWriteField4(buf []byte) (offset int) {
	if x.Text == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetText())
	return offset
}

func (x *SearchField) fastWriteField5(buf []byte) (offset int) {
	if x.Title == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetTitle())
	return offset
}

func (x *SearchField) fastWriteField6(buf []byte) (offset int) {
	if x.Description == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetDescription())
	return offset
}

func (x *SearchField) fastWriteField7(buf []byte) (offset int) {
	if x.ProductName == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetProductName())
	return offset
}

func (x *SearchOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SearchOptions) fastWriteField1(buf []byte) (offset int) {
	if x.GetAllFieldsKey() == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAllFieldsKey())
	return offset
}

func (x *SearchOptions) fastWriteField2(buf []byte) (offset int) {
	if x.GetMultiFieldsKey() == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetMultiFieldsKey())
	return offset
}

func (x *FileFilterOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *FileFilterOptions) fastWriteField1(buf []byte) (offset int) {
	if x.OnlyUserId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOnlyUserId())
	return offset
}

func (x *FileFilterOptions) fastWriteField2(buf []byte) (offset int) {
	if x.OnlyFileId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOnlyFileId())
	return offset
}

func (x *FileFilterOptions) fastWriteField3(buf []byte) (offset int) {
	if x.OnlyFatherId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetOnlyFatherId())
	return offset
}

func (x *FileFilterOptions) fastWriteField4(buf []byte) (offset int) {
	if x.OnlyIsDel == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetOnlyIsDel())
	return offset
}

func (x *FileFilterOptions) fastWriteField5(buf []byte) (offset int) {
	if x.OnlyZone == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetOnlyZone())
	return offset
}

func (x *FileFilterOptions) fastWriteField6(buf []byte) (offset int) {
	if x.OnlySubZone == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetOnlySubZone())
	return offset
}

func (x *FileFilterOptions) fastWriteField7(buf []byte) (offset int) {
	if x.OnlyDocumentType == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetOnlyDocumentType())
	return offset
}

func (x *FileFilterOptions) fastWriteField8(buf []byte) (offset int) {
	if len(x.OnlyLabels) == 0 {
		return offset
	}
	for i := range x.GetOnlyLabels() {
		offset += fastpb.WriteString(buf[offset:], 8, x.GetOnlyLabels()[i])
	}
	return offset
}

func (x *FileFilterOptions) fastWriteField9(buf []byte) (offset int) {
	if len(x.OnlyType) == 0 {
		return offset
	}
	for i := range x.GetOnlyType() {
		offset += fastpb.WriteString(buf[offset:], 9, x.GetOnlyType()[i])
	}
	return offset
}

func (x *ShareFileFilterOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ShareFileFilterOptions) fastWriteField1(buf []byte) (offset int) {
	if x.OnlyCode == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOnlyCode())
	return offset
}

func (x *ShareFileFilterOptions) fastWriteField2(buf []byte) (offset int) {
	if x.OnlyUserId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOnlyUserId())
	return offset
}

func (x *UserDetailInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *UserDetailInfo) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *UserDetailInfo) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *UserDetailInfo) fastWriteField3(buf []byte) (offset int) {
	if x.Sex == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetSex())
	return offset
}

func (x *UserDetailInfo) fastWriteField4(buf []byte) (offset int) {
	if x.FullName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetFullName())
	return offset
}

func (x *UserDetailInfo) fastWriteField5(buf []byte) (offset int) {
	if x.IdCard == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetIdCard())
	return offset
}

func (x *UserDetailInfo) fastWriteField6(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetDescription())
	return offset
}

func (x *UserDetailInfo) fastWriteField7(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetUrl())
	return offset
}

func (x *UserInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *UserInfo) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *UserInfo) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *UserInfo) fastWriteField3(buf []byte) (offset int) {
	if x.Sex == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetSex())
	return offset
}

func (x *PostCount) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *PostCount) fastWriteField1(buf []byte) (offset int) {
	if x.ViewCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetViewCount())
	return offset
}

func (x *PostCount) fastWriteField2(buf []byte) (offset int) {
	if x.LikeCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetLikeCount())
	return offset
}

func (x *PostCount) fastWriteField3(buf []byte) (offset int) {
	if x.CommentCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetCommentCount())
	return offset
}

func (x *PostCount) fastWriteField4(buf []byte) (offset int) {
	if x.ShareCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetShareCount())
	return offset
}

func (x *PostCount) fastWriteField5(buf []byte) (offset int) {
	if x.CollectCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetCollectCount())
	return offset
}

func (x *PostRelation) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *PostRelation) fastWriteField1(buf []byte) (offset int) {
	if !x.Liked {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetLiked())
	return offset
}

func (x *PostRelation) fastWriteField2(buf []byte) (offset int) {
	if !x.Collected {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetCollected())
	return offset
}

func (x *CommentRelation) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CommentRelation) fastWriteField1(buf []byte) (offset int) {
	if !x.Liked {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetLiked())
	return offset
}

func (x *CommentRelation) fastWriteField2(buf []byte) (offset int) {
	if !x.Hated {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetHated())
	return offset
}

func (x *Post) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *Post) fastWriteField1(buf []byte) (offset int) {
	if x.PostId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPostId())
	return offset
}

func (x *Post) fastWriteField2(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTitle())
	return offset
}

func (x *Post) fastWriteField3(buf []byte) (offset int) {
	if x.Text == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetText())
	return offset
}

func (x *Post) fastWriteField4(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetUrl())
	return offset
}

func (x *Post) fastWriteField5(buf []byte) (offset int) {
	if len(x.Tags) == 0 {
		return offset
	}
	for i := range x.GetTags() {
		offset += fastpb.WriteString(buf[offset:], 5, x.GetTags()[i])
	}
	return offset
}

func (x *Post) fastWriteField6(buf []byte) (offset int) {
	if x.LikeCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetLikeCount())
	return offset
}

func (x *Post) fastWriteField7(buf []byte) (offset int) {
	if x.CommentCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetCommentCount())
	return offset
}

func (x *Post) fastWriteField8(buf []byte) (offset int) {
	if !x.Liked {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 8, x.GetLiked())
	return offset
}

func (x *Post) fastWriteField9(buf []byte) (offset int) {
	if x.UserName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetUserName())
	return offset
}

func (x *Notification) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *Notification) fastWriteField1(buf []byte) (offset int) {
	if x.FromName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFromName())
	return offset
}

func (x *Notification) fastWriteField2(buf []byte) (offset int) {
	if x.FromId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFromId())
	return offset
}

func (x *Notification) fastWriteField3(buf []byte) (offset int) {
	if x.ToName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetToName())
	return offset
}

func (x *Notification) fastWriteField4(buf []byte) (offset int) {
	if x.ToId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetToId())
	return offset
}

func (x *Notification) fastWriteField5(buf []byte) (offset int) {
	if x.ToType == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetToType())
	return offset
}

func (x *Notification) fastWriteField6(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetType())
	return offset
}

func (x *Notification) fastWriteField7(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetCreateTime())
	return offset
}

func (x *Comment) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	return offset
}

func (x *Comment) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Comment) fastWriteField2(buf []byte) (offset int) {
	if x.SubjectId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSubjectId())
	return offset
}

func (x *Comment) fastWriteField3(buf []byte) (offset int) {
	if x.RootId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetRootId())
	return offset
}

func (x *Comment) fastWriteField4(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetFatherId())
	return offset
}

func (x *Comment) fastWriteField5(buf []byte) (offset int) {
	if x.Count == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetCount())
	return offset
}

func (x *Comment) fastWriteField6(buf []byte) (offset int) {
	if x.State == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, int32(x.GetState()))
	return offset
}

func (x *Comment) fastWriteField7(buf []byte) (offset int) {
	if x.Attrs == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 7, int32(x.GetAttrs()))
	return offset
}

func (x *Comment) fastWriteField8(buf []byte) (offset int) {
	if len(x.Labels) == 0 {
		return offset
	}
	for i := range x.GetLabels() {
		offset += fastpb.WriteString(buf[offset:], 8, x.GetLabels()[i])
	}
	return offset
}

func (x *Comment) fastWriteField9(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetUserId())
	return offset
}

func (x *Comment) fastWriteField10(buf []byte) (offset int) {
	if x.AtUserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetAtUserId())
	return offset
}

func (x *Comment) fastWriteField11(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetContent())
	return offset
}

func (x *Comment) fastWriteField12(buf []byte) (offset int) {
	if x.Meta == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 12, x.GetMeta())
	return offset
}

func (x *CommentInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	offset += x.fastWriteField16(buf[offset:])
	return offset
}

func (x *CommentInfo) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *CommentInfo) fastWriteField2(buf []byte) (offset int) {
	if x.SubjectId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSubjectId())
	return offset
}

func (x *CommentInfo) fastWriteField3(buf []byte) (offset int) {
	if x.RootId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetRootId())
	return offset
}

func (x *CommentInfo) fastWriteField4(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetFatherId())
	return offset
}

func (x *CommentInfo) fastWriteField5(buf []byte) (offset int) {
	if x.Count == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetCount())
	return offset
}

func (x *CommentInfo) fastWriteField6(buf []byte) (offset int) {
	if x.State == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetState())
	return offset
}

func (x *CommentInfo) fastWriteField7(buf []byte) (offset int) {
	if x.Attrs == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetAttrs())
	return offset
}

func (x *CommentInfo) fastWriteField8(buf []byte) (offset int) {
	if x.Labels == nil {
		return offset
	}
	for i := range x.GetLabels() {
		offset += fastpb.WriteMessage(buf[offset:], 8, x.GetLabels()[i])
	}
	return offset
}

func (x *CommentInfo) fastWriteField9(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetUserId())
	return offset
}

func (x *CommentInfo) fastWriteField10(buf []byte) (offset int) {
	if x.AtUserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetAtUserId())
	return offset
}

func (x *CommentInfo) fastWriteField11(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetContent())
	return offset
}

func (x *CommentInfo) fastWriteField12(buf []byte) (offset int) {
	if x.Meta == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 12, x.GetMeta())
	return offset
}

func (x *CommentInfo) fastWriteField13(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 13, x.GetCreateTime())
	return offset
}

func (x *CommentInfo) fastWriteField14(buf []byte) (offset int) {
	if x.Like == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 14, x.GetLike())
	return offset
}

func (x *CommentInfo) fastWriteField15(buf []byte) (offset int) {
	if x.Author == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 15, x.GetAuthor())
	return offset
}

func (x *CommentInfo) fastWriteField16(buf []byte) (offset int) {
	if x.CommentRelation == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 16, x.GetCommentRelation())
	return offset
}

func (x *CommentFilterOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *CommentFilterOptions) fastWriteField1(buf []byte) (offset int) {
	if x.OnlyUserId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOnlyUserId())
	return offset
}

func (x *CommentFilterOptions) fastWriteField2(buf []byte) (offset int) {
	if x.OnlyAtUserId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOnlyAtUserId())
	return offset
}

func (x *CommentFilterOptions) fastWriteField3(buf []byte) (offset int) {
	if x.OnlyCommentId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetOnlyCommentId())
	return offset
}

func (x *CommentFilterOptions) fastWriteField4(buf []byte) (offset int) {
	if x.OnlySubjectId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetOnlySubjectId())
	return offset
}

func (x *CommentFilterOptions) fastWriteField5(buf []byte) (offset int) {
	if x.OnlyRootId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetOnlyRootId())
	return offset
}

func (x *CommentFilterOptions) fastWriteField6(buf []byte) (offset int) {
	if x.OnlyFatherId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetOnlyFatherId())
	return offset
}

func (x *CommentFilterOptions) fastWriteField7(buf []byte) (offset int) {
	if x.OnlyState == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetOnlyState())
	return offset
}

func (x *CommentFilterOptions) fastWriteField8(buf []byte) (offset int) {
	if x.OnlyAttrs == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetOnlyAttrs())
	return offset
}

func (x *SubjectFilterOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *SubjectFilterOptions) fastWriteField1(buf []byte) (offset int) {
	if x.OnlyUserId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOnlyUserId())
	return offset
}

func (x *SubjectFilterOptions) fastWriteField2(buf []byte) (offset int) {
	if x.OnlySubjectId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOnlySubjectId())
	return offset
}

func (x *SubjectFilterOptions) fastWriteField3(buf []byte) (offset int) {
	if x.OnlyState == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetOnlyState())
	return offset
}

func (x *SubjectFilterOptions) fastWriteField4(buf []byte) (offset int) {
	if x.OnlyAttrs == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetOnlyAttrs())
	return offset
}

func (x *Subject) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *Subject) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Subject) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *Subject) fastWriteField3(buf []byte) (offset int) {
	if x.TopCommentId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetTopCommentId())
	return offset
}

func (x *Subject) fastWriteField4(buf []byte) (offset int) {
	if x.RootCount == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetRootCount())
	return offset
}

func (x *Subject) fastWriteField5(buf []byte) (offset int) {
	if x.AllCount == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetAllCount())
	return offset
}

func (x *Subject) fastWriteField6(buf []byte) (offset int) {
	if x.State == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, int32(x.GetState()))
	return offset
}

func (x *Subject) fastWriteField7(buf []byte) (offset int) {
	if x.Attrs == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 7, int32(x.GetAttrs()))
	return offset
}

func (x *SubjectDetails) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *SubjectDetails) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *SubjectDetails) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *SubjectDetails) fastWriteField3(buf []byte) (offset int) {
	if x.TopCommentId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetTopCommentId())
	return offset
}

func (x *SubjectDetails) fastWriteField4(buf []byte) (offset int) {
	if x.RootCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetRootCount())
	return offset
}

func (x *SubjectDetails) fastWriteField5(buf []byte) (offset int) {
	if x.AllCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetAllCount())
	return offset
}

func (x *SubjectDetails) fastWriteField6(buf []byte) (offset int) {
	if x.State == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetState())
	return offset
}

func (x *SubjectDetails) fastWriteField7(buf []byte) (offset int) {
	if x.Attrs == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetAttrs())
	return offset
}

func (x *SubjectInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SubjectInfo) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *SubjectInfo) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *SubjectInfo) fastWriteField3(buf []byte) (offset int) {
	if x.Attrs == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetAttrs())
	return offset
}

func (x *Label) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Label) fastWriteField1(buf []byte) (offset int) {
	if x.LabelId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetLabelId())
	return offset
}

func (x *Label) fastWriteField2(buf []byte) (offset int) {
	if x.Value == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetValue())
	return offset
}

func (x *Recommends) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Recommends) fastWriteField1(buf []byte) (offset int) {
	if x.Users == nil {
		return offset
	}
	for i := range x.GetUsers() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUsers()[i])
	}
	return offset
}

func (x *Recommends) fastWriteField2(buf []byte) (offset int) {
	if x.Posts == nil {
		return offset
	}
	for i := range x.GetPosts() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPosts()[i])
	}
	return offset
}

func (x *Product) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	return offset
}

func (x *Product) fastWriteField1(buf []byte) (offset int) {
	if x.ProductId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetProductId())
	return offset
}

func (x *Product) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *Product) fastWriteField3(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetDescription())
	return offset
}

func (x *Product) fastWriteField4(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetUrl())
	return offset
}

func (x *Product) fastWriteField5(buf []byte) (offset int) {
	if len(x.Tags) == 0 {
		return offset
	}
	for i := range x.GetTags() {
		offset += fastpb.WriteString(buf[offset:], 5, x.GetTags()[i])
	}
	return offset
}

func (x *Product) fastWriteField6(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetType())
	return offset
}

func (x *Product) fastWriteField7(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetPrice())
	return offset
}

func (x *Product) fastWriteField8(buf []byte) (offset int) {
	if x.ProductSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetProductSize())
	return offset
}

func (x *Product) fastWriteField9(buf []byte) (offset int) {
	if x.User == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 9, x.GetUser())
	return offset
}

func (x *Product) fastWriteField10(buf []byte) (offset int) {
	if x.CollectCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetCollectCount())
	return offset
}

func (x *Product) fastWriteField11(buf []byte) (offset int) {
	if x.PurchaseCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetPurchaseCount())
	return offset
}

func (x *Product) fastWriteField12(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 12, x.GetCreateTime())
	return offset
}

func (x *Slider) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *Slider) sizeField1() (n int) {
	if x.SliderId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetSliderId())
	return n
}

func (x *Slider) sizeField2() (n int) {
	if x.ImageUrl == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetImageUrl())
	return n
}

func (x *Slider) sizeField3() (n int) {
	if x.LinkUrl == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetLinkUrl())
	return n
}

func (x *Slider) sizeField4() (n int) {
	if x.IsPublic == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetIsPublic())
	return n
}

func (x *User) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *User) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *User) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *User) sizeField3() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUrl())
	return n
}

func (x *RecommendUser) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *RecommendUser) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *RecommendUser) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *RecommendUser) sizeField3() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUrl())
	return n
}

func (x *RecommendUser) sizeField4() (n int) {
	if x.FollowCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetFollowCount())
	return n
}

func (x *RecommendUser) sizeField5() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetDescription())
	return n
}

func (x *RecommendUser) sizeField6() (n int) {
	if len(x.Labels) == 0 {
		return n
	}
	for i := range x.GetLabels() {
		n += fastpb.SizeString(6, x.GetLabels()[i])
	}
	return n
}

func (x *UserDetail) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *UserDetail) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *UserDetail) sizeField2() (n int) {
	if x.Sex == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetSex())
	return n
}

func (x *UserDetail) sizeField3() (n int) {
	if x.FullName == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetFullName())
	return n
}

func (x *UserDetail) sizeField4() (n int) {
	if x.IdCard == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetIdCard())
	return n
}

func (x *UserDetail) sizeField5() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetDescription())
	return n
}

func (x *UserDetail) sizeField6() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetUrl())
	return n
}

func (x *PrivateFile) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	return n
}

func (x *PrivateFile) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *PrivateFile) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *PrivateFile) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *PrivateFile) sizeField4() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetType())
	return n
}

func (x *PrivateFile) sizeField5() (n int) {
	if x.Path == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetPath())
	return n
}

func (x *PrivateFile) sizeField6() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetFatherId())
	return n
}

func (x *PrivateFile) sizeField7() (n int) {
	if x.SpaceSize == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetSpaceSize())
	return n
}

func (x *PrivateFile) sizeField8() (n int) {
	if x.IsDel == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetIsDel())
	return n
}

func (x *PrivateFile) sizeField9() (n int) {
	if x.CreateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetCreateAt())
	return n
}

func (x *PrivateFile) sizeField10() (n int) {
	if x.UpdateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetUpdateAt())
	return n
}

func (x *PrivateFile) sizeField11() (n int) {
	if x.DeleteAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetDeleteAt())
	return n
}

func (x *PublicFile) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	n += x.sizeField16()
	n += x.sizeField17()
	return n
}

func (x *PublicFile) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *PublicFile) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *PublicFile) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *PublicFile) sizeField4() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetType())
	return n
}

func (x *PublicFile) sizeField5() (n int) {
	if x.Path == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetPath())
	return n
}

func (x *PublicFile) sizeField6() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetFatherId())
	return n
}

func (x *PublicFile) sizeField7() (n int) {
	if x.SpaceSize == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetSpaceSize())
	return n
}

func (x *PublicFile) sizeField8() (n int) {
	if x.IsDel == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetIsDel())
	return n
}

func (x *PublicFile) sizeField9() (n int) {
	if x.Zone == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetZone())
	return n
}

func (x *PublicFile) sizeField10() (n int) {
	if x.SubZone == "" {
		return n
	}
	n += fastpb.SizeString(10, x.GetSubZone())
	return n
}

func (x *PublicFile) sizeField11() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetDescription())
	return n
}

func (x *PublicFile) sizeField12() (n int) {
	if x.CreateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(12, x.GetCreateAt())
	return n
}

func (x *PublicFile) sizeField13() (n int) {
	if x.UpdateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(13, x.GetUpdateAt())
	return n
}

func (x *PublicFile) sizeField14() (n int) {
	if x.Labels == nil {
		return n
	}
	for i := range x.GetLabels() {
		n += fastpb.SizeMessage(14, x.GetLabels()[i])
	}
	return n
}

func (x *PublicFile) sizeField15() (n int) {
	if x.Author == nil {
		return n
	}
	n += fastpb.SizeMessage(15, x.GetAuthor())
	return n
}

func (x *PublicFile) sizeField16() (n int) {
	if x.FileCount == nil {
		return n
	}
	n += fastpb.SizeMessage(16, x.GetFileCount())
	return n
}

func (x *PublicFile) sizeField17() (n int) {
	if x.FileRelation == nil {
		return n
	}
	n += fastpb.SizeMessage(17, x.GetFileRelation())
	return n
}

func (x *Zone) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Zone) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Zone) sizeField2() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetFatherId())
	return n
}

func (x *Zone) sizeField3() (n int) {
	if x.Value == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetValue())
	return n
}

func (x *ShareFile) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *ShareFile) sizeField1() (n int) {
	if x.Code == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCode())
	return n
}

func (x *ShareFile) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *ShareFile) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *ShareFile) sizeField4() (n int) {
	if x.EffectiveTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetEffectiveTime())
	return n
}

func (x *ShareFile) sizeField5() (n int) {
	if x.BrowseNumber == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetBrowseNumber())
	return n
}

func (x *ShareFile) sizeField6() (n int) {
	if x.CreateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetCreateAt())
	return n
}

func (x *ShareFile) sizeField7() (n int) {
	if len(x.FileList) == 0 {
		return n
	}
	for i := range x.GetFileList() {
		n += fastpb.SizeString(7, x.GetFileList()[i])
	}
	return n
}

func (x *ShareFileInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *ShareFileInfo) sizeField1() (n int) {
	if x.Code == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCode())
	return n
}

func (x *ShareFileInfo) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *ShareFileInfo) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *ShareFileInfo) sizeField4() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetStatus())
	return n
}

func (x *ShareFileInfo) sizeField5() (n int) {
	if x.EffectiveTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetEffectiveTime())
	return n
}

func (x *ShareFileInfo) sizeField6() (n int) {
	if x.BrowseNumber == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetBrowseNumber())
	return n
}

func (x *ShareFileInfo) sizeField7() (n int) {
	if x.CreateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetCreateAt())
	return n
}

func (x *ShareFileInfo) sizeField8() (n int) {
	if len(x.FileList) == 0 {
		return n
	}
	for i := range x.GetFileList() {
		n += fastpb.SizeString(8, x.GetFileList()[i])
	}
	return n
}

func (x *ShareCode) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *ShareCode) sizeField1() (n int) {
	if x.Code == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCode())
	return n
}

func (x *ShareCode) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *ShareCode) sizeField3() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetStatus())
	return n
}

func (x *ShareCode) sizeField4() (n int) {
	if x.BrowseNumber == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetBrowseNumber())
	return n
}

func (x *ShareCode) sizeField5() (n int) {
	if x.CreateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetCreateAt())
	return n
}

func (x *ShareCode) sizeField6() (n int) {
	if x.Key == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetKey())
	return n
}

func (x *SearchField) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *SearchField) sizeField1() (n int) {
	if x.Name == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *SearchField) sizeField2() (n int) {
	if x.Id == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetId())
	return n
}

func (x *SearchField) sizeField3() (n int) {
	if x.Tag == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetTag())
	return n
}

func (x *SearchField) sizeField4() (n int) {
	if x.Text == nil {
		return n
	}
	n += fastpb.SizeString(4, x.GetText())
	return n
}

func (x *SearchField) sizeField5() (n int) {
	if x.Title == nil {
		return n
	}
	n += fastpb.SizeString(5, x.GetTitle())
	return n
}

func (x *SearchField) sizeField6() (n int) {
	if x.Description == nil {
		return n
	}
	n += fastpb.SizeString(6, x.GetDescription())
	return n
}

func (x *SearchField) sizeField7() (n int) {
	if x.ProductName == nil {
		return n
	}
	n += fastpb.SizeString(7, x.GetProductName())
	return n
}

func (x *SearchOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SearchOptions) sizeField1() (n int) {
	if x.GetAllFieldsKey() == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAllFieldsKey())
	return n
}

func (x *SearchOptions) sizeField2() (n int) {
	if x.GetMultiFieldsKey() == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetMultiFieldsKey())
	return n
}

func (x *FileFilterOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *FileFilterOptions) sizeField1() (n int) {
	if x.OnlyUserId == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetOnlyUserId())
	return n
}

func (x *FileFilterOptions) sizeField2() (n int) {
	if x.OnlyFileId == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetOnlyFileId())
	return n
}

func (x *FileFilterOptions) sizeField3() (n int) {
	if x.OnlyFatherId == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetOnlyFatherId())
	return n
}

func (x *FileFilterOptions) sizeField4() (n int) {
	if x.OnlyIsDel == nil {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetOnlyIsDel())
	return n
}

func (x *FileFilterOptions) sizeField5() (n int) {
	if x.OnlyZone == nil {
		return n
	}
	n += fastpb.SizeString(5, x.GetOnlyZone())
	return n
}

func (x *FileFilterOptions) sizeField6() (n int) {
	if x.OnlySubZone == nil {
		return n
	}
	n += fastpb.SizeString(6, x.GetOnlySubZone())
	return n
}

func (x *FileFilterOptions) sizeField7() (n int) {
	if x.OnlyDocumentType == nil {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetOnlyDocumentType())
	return n
}

func (x *FileFilterOptions) sizeField8() (n int) {
	if len(x.OnlyLabels) == 0 {
		return n
	}
	for i := range x.GetOnlyLabels() {
		n += fastpb.SizeString(8, x.GetOnlyLabels()[i])
	}
	return n
}

func (x *FileFilterOptions) sizeField9() (n int) {
	if len(x.OnlyType) == 0 {
		return n
	}
	for i := range x.GetOnlyType() {
		n += fastpb.SizeString(9, x.GetOnlyType()[i])
	}
	return n
}

func (x *ShareFileFilterOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ShareFileFilterOptions) sizeField1() (n int) {
	if x.OnlyCode == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetOnlyCode())
	return n
}

func (x *ShareFileFilterOptions) sizeField2() (n int) {
	if x.OnlyUserId == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetOnlyUserId())
	return n
}

func (x *UserDetailInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *UserDetailInfo) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *UserDetailInfo) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *UserDetailInfo) sizeField3() (n int) {
	if x.Sex == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetSex())
	return n
}

func (x *UserDetailInfo) sizeField4() (n int) {
	if x.FullName == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetFullName())
	return n
}

func (x *UserDetailInfo) sizeField5() (n int) {
	if x.IdCard == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetIdCard())
	return n
}

func (x *UserDetailInfo) sizeField6() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetDescription())
	return n
}

func (x *UserDetailInfo) sizeField7() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetUrl())
	return n
}

func (x *UserInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *UserInfo) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *UserInfo) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *UserInfo) sizeField3() (n int) {
	if x.Sex == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetSex())
	return n
}

func (x *PostCount) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *PostCount) sizeField1() (n int) {
	if x.ViewCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetViewCount())
	return n
}

func (x *PostCount) sizeField2() (n int) {
	if x.LikeCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetLikeCount())
	return n
}

func (x *PostCount) sizeField3() (n int) {
	if x.CommentCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetCommentCount())
	return n
}

func (x *PostCount) sizeField4() (n int) {
	if x.ShareCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetShareCount())
	return n
}

func (x *PostCount) sizeField5() (n int) {
	if x.CollectCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetCollectCount())
	return n
}

func (x *PostRelation) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *PostRelation) sizeField1() (n int) {
	if !x.Liked {
		return n
	}
	n += fastpb.SizeBool(1, x.GetLiked())
	return n
}

func (x *PostRelation) sizeField2() (n int) {
	if !x.Collected {
		return n
	}
	n += fastpb.SizeBool(2, x.GetCollected())
	return n
}

func (x *CommentRelation) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CommentRelation) sizeField1() (n int) {
	if !x.Liked {
		return n
	}
	n += fastpb.SizeBool(1, x.GetLiked())
	return n
}

func (x *CommentRelation) sizeField2() (n int) {
	if !x.Hated {
		return n
	}
	n += fastpb.SizeBool(2, x.GetHated())
	return n
}

func (x *Post) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *Post) sizeField1() (n int) {
	if x.PostId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPostId())
	return n
}

func (x *Post) sizeField2() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTitle())
	return n
}

func (x *Post) sizeField3() (n int) {
	if x.Text == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetText())
	return n
}

func (x *Post) sizeField4() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetUrl())
	return n
}

func (x *Post) sizeField5() (n int) {
	if len(x.Tags) == 0 {
		return n
	}
	for i := range x.GetTags() {
		n += fastpb.SizeString(5, x.GetTags()[i])
	}
	return n
}

func (x *Post) sizeField6() (n int) {
	if x.LikeCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetLikeCount())
	return n
}

func (x *Post) sizeField7() (n int) {
	if x.CommentCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetCommentCount())
	return n
}

func (x *Post) sizeField8() (n int) {
	if !x.Liked {
		return n
	}
	n += fastpb.SizeBool(8, x.GetLiked())
	return n
}

func (x *Post) sizeField9() (n int) {
	if x.UserName == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetUserName())
	return n
}

func (x *Notification) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *Notification) sizeField1() (n int) {
	if x.FromName == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFromName())
	return n
}

func (x *Notification) sizeField2() (n int) {
	if x.FromId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetFromId())
	return n
}

func (x *Notification) sizeField3() (n int) {
	if x.ToName == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetToName())
	return n
}

func (x *Notification) sizeField4() (n int) {
	if x.ToId == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetToId())
	return n
}

func (x *Notification) sizeField5() (n int) {
	if x.ToType == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetToType())
	return n
}

func (x *Notification) sizeField6() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetType())
	return n
}

func (x *Notification) sizeField7() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetCreateTime())
	return n
}

func (x *Comment) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	return n
}

func (x *Comment) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Comment) sizeField2() (n int) {
	if x.SubjectId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetSubjectId())
	return n
}

func (x *Comment) sizeField3() (n int) {
	if x.RootId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetRootId())
	return n
}

func (x *Comment) sizeField4() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetFatherId())
	return n
}

func (x *Comment) sizeField5() (n int) {
	if x.Count == nil {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetCount())
	return n
}

func (x *Comment) sizeField6() (n int) {
	if x.State == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, int32(x.GetState()))
	return n
}

func (x *Comment) sizeField7() (n int) {
	if x.Attrs == 0 {
		return n
	}
	n += fastpb.SizeInt32(7, int32(x.GetAttrs()))
	return n
}

func (x *Comment) sizeField8() (n int) {
	if len(x.Labels) == 0 {
		return n
	}
	for i := range x.GetLabels() {
		n += fastpb.SizeString(8, x.GetLabels()[i])
	}
	return n
}

func (x *Comment) sizeField9() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetUserId())
	return n
}

func (x *Comment) sizeField10() (n int) {
	if x.AtUserId == "" {
		return n
	}
	n += fastpb.SizeString(10, x.GetAtUserId())
	return n
}

func (x *Comment) sizeField11() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetContent())
	return n
}

func (x *Comment) sizeField12() (n int) {
	if x.Meta == "" {
		return n
	}
	n += fastpb.SizeString(12, x.GetMeta())
	return n
}

func (x *CommentInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	n += x.sizeField16()
	return n
}

func (x *CommentInfo) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *CommentInfo) sizeField2() (n int) {
	if x.SubjectId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetSubjectId())
	return n
}

func (x *CommentInfo) sizeField3() (n int) {
	if x.RootId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetRootId())
	return n
}

func (x *CommentInfo) sizeField4() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetFatherId())
	return n
}

func (x *CommentInfo) sizeField5() (n int) {
	if x.Count == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetCount())
	return n
}

func (x *CommentInfo) sizeField6() (n int) {
	if x.State == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetState())
	return n
}

func (x *CommentInfo) sizeField7() (n int) {
	if x.Attrs == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetAttrs())
	return n
}

func (x *CommentInfo) sizeField8() (n int) {
	if x.Labels == nil {
		return n
	}
	for i := range x.GetLabels() {
		n += fastpb.SizeMessage(8, x.GetLabels()[i])
	}
	return n
}

func (x *CommentInfo) sizeField9() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetUserId())
	return n
}

func (x *CommentInfo) sizeField10() (n int) {
	if x.AtUserId == "" {
		return n
	}
	n += fastpb.SizeString(10, x.GetAtUserId())
	return n
}

func (x *CommentInfo) sizeField11() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetContent())
	return n
}

func (x *CommentInfo) sizeField12() (n int) {
	if x.Meta == "" {
		return n
	}
	n += fastpb.SizeString(12, x.GetMeta())
	return n
}

func (x *CommentInfo) sizeField13() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(13, x.GetCreateTime())
	return n
}

func (x *CommentInfo) sizeField14() (n int) {
	if x.Like == 0 {
		return n
	}
	n += fastpb.SizeInt64(14, x.GetLike())
	return n
}

func (x *CommentInfo) sizeField15() (n int) {
	if x.Author == nil {
		return n
	}
	n += fastpb.SizeMessage(15, x.GetAuthor())
	return n
}

func (x *CommentInfo) sizeField16() (n int) {
	if x.CommentRelation == nil {
		return n
	}
	n += fastpb.SizeMessage(16, x.GetCommentRelation())
	return n
}

func (x *CommentFilterOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *CommentFilterOptions) sizeField1() (n int) {
	if x.OnlyUserId == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetOnlyUserId())
	return n
}

func (x *CommentFilterOptions) sizeField2() (n int) {
	if x.OnlyAtUserId == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetOnlyAtUserId())
	return n
}

func (x *CommentFilterOptions) sizeField3() (n int) {
	if x.OnlyCommentId == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetOnlyCommentId())
	return n
}

func (x *CommentFilterOptions) sizeField4() (n int) {
	if x.OnlySubjectId == nil {
		return n
	}
	n += fastpb.SizeString(4, x.GetOnlySubjectId())
	return n
}

func (x *CommentFilterOptions) sizeField5() (n int) {
	if x.OnlyRootId == nil {
		return n
	}
	n += fastpb.SizeString(5, x.GetOnlyRootId())
	return n
}

func (x *CommentFilterOptions) sizeField6() (n int) {
	if x.OnlyFatherId == nil {
		return n
	}
	n += fastpb.SizeString(6, x.GetOnlyFatherId())
	return n
}

func (x *CommentFilterOptions) sizeField7() (n int) {
	if x.OnlyState == nil {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetOnlyState())
	return n
}

func (x *CommentFilterOptions) sizeField8() (n int) {
	if x.OnlyAttrs == nil {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetOnlyAttrs())
	return n
}

func (x *SubjectFilterOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *SubjectFilterOptions) sizeField1() (n int) {
	if x.OnlyUserId == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetOnlyUserId())
	return n
}

func (x *SubjectFilterOptions) sizeField2() (n int) {
	if x.OnlySubjectId == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetOnlySubjectId())
	return n
}

func (x *SubjectFilterOptions) sizeField3() (n int) {
	if x.OnlyState == nil {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetOnlyState())
	return n
}

func (x *SubjectFilterOptions) sizeField4() (n int) {
	if x.OnlyAttrs == nil {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetOnlyAttrs())
	return n
}

func (x *Subject) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *Subject) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Subject) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *Subject) sizeField3() (n int) {
	if x.TopCommentId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetTopCommentId())
	return n
}

func (x *Subject) sizeField4() (n int) {
	if x.RootCount == nil {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetRootCount())
	return n
}

func (x *Subject) sizeField5() (n int) {
	if x.AllCount == nil {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetAllCount())
	return n
}

func (x *Subject) sizeField6() (n int) {
	if x.State == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, int32(x.GetState()))
	return n
}

func (x *Subject) sizeField7() (n int) {
	if x.Attrs == 0 {
		return n
	}
	n += fastpb.SizeInt32(7, int32(x.GetAttrs()))
	return n
}

func (x *SubjectDetails) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *SubjectDetails) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *SubjectDetails) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *SubjectDetails) sizeField3() (n int) {
	if x.TopCommentId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetTopCommentId())
	return n
}

func (x *SubjectDetails) sizeField4() (n int) {
	if x.RootCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetRootCount())
	return n
}

func (x *SubjectDetails) sizeField5() (n int) {
	if x.AllCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetAllCount())
	return n
}

func (x *SubjectDetails) sizeField6() (n int) {
	if x.State == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetState())
	return n
}

func (x *SubjectDetails) sizeField7() (n int) {
	if x.Attrs == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetAttrs())
	return n
}

func (x *SubjectInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SubjectInfo) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *SubjectInfo) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *SubjectInfo) sizeField3() (n int) {
	if x.Attrs == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetAttrs())
	return n
}

func (x *Label) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Label) sizeField1() (n int) {
	if x.LabelId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetLabelId())
	return n
}

func (x *Label) sizeField2() (n int) {
	if x.Value == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetValue())
	return n
}

func (x *Recommends) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Recommends) sizeField1() (n int) {
	if x.Users == nil {
		return n
	}
	for i := range x.GetUsers() {
		n += fastpb.SizeMessage(1, x.GetUsers()[i])
	}
	return n
}

func (x *Recommends) sizeField2() (n int) {
	if x.Posts == nil {
		return n
	}
	for i := range x.GetPosts() {
		n += fastpb.SizeMessage(2, x.GetPosts()[i])
	}
	return n
}

func (x *Product) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	return n
}

func (x *Product) sizeField1() (n int) {
	if x.ProductId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetProductId())
	return n
}

func (x *Product) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *Product) sizeField3() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetDescription())
	return n
}

func (x *Product) sizeField4() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetUrl())
	return n
}

func (x *Product) sizeField5() (n int) {
	if len(x.Tags) == 0 {
		return n
	}
	for i := range x.GetTags() {
		n += fastpb.SizeString(5, x.GetTags()[i])
	}
	return n
}

func (x *Product) sizeField6() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetType())
	return n
}

func (x *Product) sizeField7() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetPrice())
	return n
}

func (x *Product) sizeField8() (n int) {
	if x.ProductSize == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetProductSize())
	return n
}

func (x *Product) sizeField9() (n int) {
	if x.User == nil {
		return n
	}
	n += fastpb.SizeMessage(9, x.GetUser())
	return n
}

func (x *Product) sizeField10() (n int) {
	if x.CollectCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetCollectCount())
	return n
}

func (x *Product) sizeField11() (n int) {
	if x.PurchaseCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetPurchaseCount())
	return n
}

func (x *Product) sizeField12() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(12, x.GetCreateTime())
	return n
}

var fieldIDToName_Slider = map[int32]string{
	1: "SliderId",
	2: "ImageUrl",
	3: "LinkUrl",
	4: "IsPublic",
}

var fieldIDToName_User = map[int32]string{
	1: "UserId",
	2: "Name",
	3: "Url",
}

var fieldIDToName_RecommendUser = map[int32]string{
	1: "UserId",
	2: "Name",
	3: "Url",
	4: "FollowCount",
	5: "Description",
	6: "Labels",
}

var fieldIDToName_UserDetail = map[int32]string{
	1: "Name",
	2: "Sex",
	3: "FullName",
	4: "IdCard",
	5: "Description",
	6: "Url",
}

var fieldIDToName_PrivateFile = map[int32]string{
	1:  "FileId",
	2:  "UserId",
	3:  "Name",
	4:  "Type",
	5:  "Path",
	6:  "FatherId",
	7:  "SpaceSize",
	8:  "IsDel",
	9:  "CreateAt",
	10: "UpdateAt",
	11: "DeleteAt",
}

var fieldIDToName_PublicFile = map[int32]string{
	1:  "FileId",
	2:  "UserId",
	3:  "Name",
	4:  "Type",
	5:  "Path",
	6:  "FatherId",
	7:  "SpaceSize",
	8:  "IsDel",
	9:  "Zone",
	10: "SubZone",
	11: "Description",
	12: "CreateAt",
	13: "UpdateAt",
	14: "Labels",
	15: "Author",
	16: "FileCount",
	17: "FileRelation",
}

var fieldIDToName_Zone = map[int32]string{
	1: "Id",
	2: "FatherId",
	3: "Value",
}

var fieldIDToName_ShareFile = map[int32]string{
	1: "Code",
	2: "UserId",
	3: "Name",
	4: "EffectiveTime",
	5: "BrowseNumber",
	6: "CreateAt",
	7: "FileList",
}

var fieldIDToName_ShareFileInfo = map[int32]string{
	1: "Code",
	2: "UserId",
	3: "Name",
	4: "Status",
	5: "EffectiveTime",
	6: "BrowseNumber",
	7: "CreateAt",
	8: "FileList",
}

var fieldIDToName_ShareCode = map[int32]string{
	1: "Code",
	2: "Name",
	3: "Status",
	4: "BrowseNumber",
	5: "CreateAt",
	6: "Key",
}

var fieldIDToName_SearchField = map[int32]string{
	1: "Name",
	2: "Id",
	3: "Tag",
	4: "Text",
	5: "Title",
	6: "Description",
	7: "ProductName",
}

var fieldIDToName_SearchOptions = map[int32]string{
	1: "AllFieldsKey",
	2: "MultiFieldsKey",
}

var fieldIDToName_FileFilterOptions = map[int32]string{
	1: "OnlyUserId",
	2: "OnlyFileId",
	3: "OnlyFatherId",
	4: "OnlyIsDel",
	5: "OnlyZone",
	6: "OnlySubZone",
	7: "OnlyDocumentType",
	8: "OnlyLabels",
	9: "OnlyType",
}

var fieldIDToName_ShareFileFilterOptions = map[int32]string{
	1: "OnlyCode",
	2: "OnlyUserId",
}

var fieldIDToName_UserDetailInfo = map[int32]string{
	1: "UserId",
	2: "Name",
	3: "Sex",
	4: "FullName",
	5: "IdCard",
	6: "Description",
	7: "Url",
}

var fieldIDToName_UserInfo = map[int32]string{
	1: "UserId",
	2: "Name",
	3: "Sex",
}

var fieldIDToName_PostCount = map[int32]string{
	1: "ViewCount",
	2: "LikeCount",
	3: "CommentCount",
	4: "ShareCount",
	5: "CollectCount",
}

var fieldIDToName_PostRelation = map[int32]string{
	1: "Liked",
	2: "Collected",
}

var fieldIDToName_CommentRelation = map[int32]string{
	1: "Liked",
	2: "Hated",
}

var fieldIDToName_Post = map[int32]string{
	1: "PostId",
	2: "Title",
	3: "Text",
	4: "Url",
	5: "Tags",
	6: "LikeCount",
	7: "CommentCount",
	8: "Liked",
	9: "UserName",
}

var fieldIDToName_Notification = map[int32]string{
	1: "FromName",
	2: "FromId",
	3: "ToName",
	4: "ToId",
	5: "ToType",
	6: "Type",
	7: "CreateTime",
}

var fieldIDToName_Comment = map[int32]string{
	1:  "Id",
	2:  "SubjectId",
	3:  "RootId",
	4:  "FatherId",
	5:  "Count",
	6:  "State",
	7:  "Attrs",
	8:  "Labels",
	9:  "UserId",
	10: "AtUserId",
	11: "Content",
	12: "Meta",
}

var fieldIDToName_CommentInfo = map[int32]string{
	1:  "Id",
	2:  "SubjectId",
	3:  "RootId",
	4:  "FatherId",
	5:  "Count",
	6:  "State",
	7:  "Attrs",
	8:  "Labels",
	9:  "UserId",
	10: "AtUserId",
	11: "Content",
	12: "Meta",
	13: "CreateTime",
	14: "Like",
	15: "Author",
	16: "CommentRelation",
}

var fieldIDToName_CommentFilterOptions = map[int32]string{
	1: "OnlyUserId",
	2: "OnlyAtUserId",
	3: "OnlyCommentId",
	4: "OnlySubjectId",
	5: "OnlyRootId",
	6: "OnlyFatherId",
	7: "OnlyState",
	8: "OnlyAttrs",
}

var fieldIDToName_SubjectFilterOptions = map[int32]string{
	1: "OnlyUserId",
	2: "OnlySubjectId",
	3: "OnlyState",
	4: "OnlyAttrs",
}

var fieldIDToName_Subject = map[int32]string{
	1: "Id",
	2: "UserId",
	3: "TopCommentId",
	4: "RootCount",
	5: "AllCount",
	6: "State",
	7: "Attrs",
}

var fieldIDToName_SubjectDetails = map[int32]string{
	1: "Id",
	2: "UserId",
	3: "TopCommentId",
	4: "RootCount",
	5: "AllCount",
	6: "State",
	7: "Attrs",
}

var fieldIDToName_SubjectInfo = map[int32]string{
	1: "Id",
	2: "UserId",
	3: "Attrs",
}

var fieldIDToName_Label = map[int32]string{
	1: "LabelId",
	2: "Value",
}

var fieldIDToName_Recommends = map[int32]string{
	1: "Users",
	2: "Posts",
}

var fieldIDToName_Product = map[int32]string{
	1:  "ProductId",
	2:  "Name",
	3:  "Description",
	4:  "Url",
	5:  "Tags",
	6:  "Type",
	7:  "Price",
	8:  "ProductSize",
	9:  "User",
	10: "CollectCount",
	11: "PurchaseCount",
	12: "CreateTime",
}

var _ = sts.File_cloudmind_sts_common_proto
var _ = content.File_cloudmind_content_common_proto
var _ = comment.File_platform_comment_common_proto
var _ = basic.File_basic_pagination_proto
var _ = http.File_http_http_proto
