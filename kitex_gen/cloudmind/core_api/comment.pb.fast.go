// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package core_api

import (
	fmt "fmt"
	basic "github.com/CloudStriver/service-idl-gen-go/kitex_gen/basic"
	http "github.com/CloudStriver/service-idl-gen-go/kitex_gen/http"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *CreateCommentReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateCommentReq[number], err)
}

func (x *CreateCommentReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Comment
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Comment = &v
	return offset, nil
}

func (x *CreateCommentResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateCommentResp[number], err)
}

func (x *CreateCommentResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CommentId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetCommentReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetCommentReq[number], err)
}

func (x *GetCommentReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CommentId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetCommentResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetCommentResp[number], err)
}

func (x *GetCommentResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v CommentInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Comment = &v
	return offset, nil
}

func (x *GetCommentsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetCommentsReq[number], err)
}

func (x *GetCommentsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyUserId = &tmp
	return offset, err
}

func (x *GetCommentsReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyAtUserId = &tmp
	return offset, err
}

func (x *GetCommentsReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyCommentId = &tmp
	return offset, err
}

func (x *GetCommentsReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlySubjectId = &tmp
	return offset, err
}

func (x *GetCommentsReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyRootId = &tmp
	return offset, err
}

func (x *GetCommentsReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyFatherId = &tmp
	return offset, err
}

func (x *GetCommentsReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.OnlyState = &tmp
	return offset, err
}

func (x *GetCommentsReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.OnlyAttrs = &tmp
	return offset, err
}

func (x *GetCommentsReq) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Limit = &tmp
	return offset, err
}

func (x *GetCommentsReq) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.LastToken = &tmp
	return offset, err
}

func (x *GetCommentsReq) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadBool(buf, _type)
	x.Backward = &tmp
	return offset, err
}

func (x *GetCommentsReq) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Offset = &tmp
	return offset, err
}

func (x *GetCommentsResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetCommentsResp[number], err)
}

func (x *GetCommentsResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v CommentInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Comments = append(x.Comments, &v)
	return offset, nil
}

func (x *GetCommentsResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetCommentsResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateCommentReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateCommentReq[number], err)
}

func (x *UpdateCommentReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Comment
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Comment = &v
	return offset, nil
}

func (x *UpdateCommentResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeleteCommentReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteCommentReq[number], err)
}

func (x *DeleteCommentReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CommentId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteCommentResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *SetCommentAttrsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SetCommentAttrsReq[number], err)
}

func (x *SetCommentAttrsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CommentId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SetCommentAttrsReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SetCommentAttrsReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Attrs = Attrs(v)
	return offset, nil
}

func (x *SetCommentAttrsReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.SubjectId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SetCommentAttrsReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.SortTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SetCommentAttrsResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetCommentSubjectReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetCommentSubjectReq[number], err)
}

func (x *GetCommentSubjectReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.SubjectId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetCommentSubjectResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetCommentSubjectResp[number], err)
}

func (x *GetCommentSubjectResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v SubjectDetails
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Subject = &v
	return offset, nil
}

func (x *UpdateCommentSubjectReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateCommentSubjectReq[number], err)
}

func (x *UpdateCommentSubjectReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Subject
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Subject = &v
	return offset, nil
}

func (x *UpdateCommentSubjectResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeleteCommentSubjectReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteCommentSubjectReq[number], err)
}

func (x *DeleteCommentSubjectReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteCommentSubjectResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *CreateLabelReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateLabelReq[number], err)
}

func (x *CreateLabelReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Label
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Label = &v
	return offset, nil
}

func (x *CreateLabelResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateLabelResp[number], err)
}

func (x *CreateLabelResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.LabelId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteLabelReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteLabelReq[number], err)
}

func (x *DeleteLabelReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.LabelId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteLabelResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetLabelReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetLabelReq[number], err)
}

func (x *GetLabelReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.LabelId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetLabelResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetLabelResp[number], err)
}

func (x *GetLabelResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Label
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Label = &v
	return offset, nil
}

func (x *UpdateLabelReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateLabelReq[number], err)
}

func (x *UpdateLabelReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Label
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Label = &v
	return offset, nil
}

func (x *UpdateLabelResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetLabelsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetLabelsReq[number], err)
}

func (x *GetLabelsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Key, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetLabelsReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Limit = &tmp
	return offset, err
}

func (x *GetLabelsReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.LastToken = &tmp
	return offset, err
}

func (x *GetLabelsReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadBool(buf, _type)
	x.Backward = &tmp
	return offset, err
}

func (x *GetLabelsReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Offset = &tmp
	return offset, err
}

func (x *GetLabelsResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetLabelsResp[number], err)
}

func (x *GetLabelsResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Label
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Labels = append(x.Labels, &v)
	return offset, nil
}

func (x *GetLabelsResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetLabelsResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetLabelsInBatchReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetLabelsInBatchReq[number], err)
}

func (x *GetLabelsInBatchReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.LabelIds = append(x.LabelIds, v)
	return offset, err
}

func (x *GetLabelsInBatchResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetLabelsInBatchResp[number], err)
}

func (x *GetLabelsInBatchResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Label
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Labels = append(x.Labels, &v)
	return offset, nil
}

func (x *CreateCommentReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateCommentReq) fastWriteField1(buf []byte) (offset int) {
	if x.Comment == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetComment())
	return offset
}

func (x *CreateCommentResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateCommentResp) fastWriteField1(buf []byte) (offset int) {
	if x.CommentId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCommentId())
	return offset
}

func (x *GetCommentReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetCommentReq) fastWriteField1(buf []byte) (offset int) {
	if x.CommentId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCommentId())
	return offset
}

func (x *GetCommentResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetCommentResp) fastWriteField1(buf []byte) (offset int) {
	if x.Comment == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetComment())
	return offset
}

func (x *GetCommentsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	return offset
}

func (x *GetCommentsReq) fastWriteField1(buf []byte) (offset int) {
	if x.OnlyUserId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOnlyUserId())
	return offset
}

func (x *GetCommentsReq) fastWriteField2(buf []byte) (offset int) {
	if x.OnlyAtUserId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOnlyAtUserId())
	return offset
}

func (x *GetCommentsReq) fastWriteField3(buf []byte) (offset int) {
	if x.OnlyCommentId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetOnlyCommentId())
	return offset
}

func (x *GetCommentsReq) fastWriteField4(buf []byte) (offset int) {
	if x.OnlySubjectId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetOnlySubjectId())
	return offset
}

func (x *GetCommentsReq) fastWriteField5(buf []byte) (offset int) {
	if x.OnlyRootId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetOnlyRootId())
	return offset
}

func (x *GetCommentsReq) fastWriteField6(buf []byte) (offset int) {
	if x.OnlyFatherId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetOnlyFatherId())
	return offset
}

func (x *GetCommentsReq) fastWriteField7(buf []byte) (offset int) {
	if x.OnlyState == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetOnlyState())
	return offset
}

func (x *GetCommentsReq) fastWriteField8(buf []byte) (offset int) {
	if x.OnlyAttrs == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetOnlyAttrs())
	return offset
}

func (x *GetCommentsReq) fastWriteField9(buf []byte) (offset int) {
	if x.Limit == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetLimit())
	return offset
}

func (x *GetCommentsReq) fastWriteField10(buf []byte) (offset int) {
	if x.LastToken == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetLastToken())
	return offset
}

func (x *GetCommentsReq) fastWriteField11(buf []byte) (offset int) {
	if x.Backward == nil {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 11, x.GetBackward())
	return offset
}

func (x *GetCommentsReq) fastWriteField12(buf []byte) (offset int) {
	if x.Offset == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 12, x.GetOffset())
	return offset
}

func (x *GetCommentsResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetCommentsResp) fastWriteField1(buf []byte) (offset int) {
	if x.Comments == nil {
		return offset
	}
	for i := range x.GetComments() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetComments()[i])
	}
	return offset
}

func (x *GetCommentsResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *GetCommentsResp) fastWriteField3(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetToken())
	return offset
}

func (x *UpdateCommentReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateCommentReq) fastWriteField1(buf []byte) (offset int) {
	if x.Comment == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetComment())
	return offset
}

func (x *UpdateCommentResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeleteCommentReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteCommentReq) fastWriteField1(buf []byte) (offset int) {
	if x.CommentId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCommentId())
	return offset
}

func (x *DeleteCommentResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *SetCommentAttrsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *SetCommentAttrsReq) fastWriteField1(buf []byte) (offset int) {
	if x.CommentId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCommentId())
	return offset
}

func (x *SetCommentAttrsReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *SetCommentAttrsReq) fastWriteField3(buf []byte) (offset int) {
	if x.Attrs == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetAttrs()))
	return offset
}

func (x *SetCommentAttrsReq) fastWriteField4(buf []byte) (offset int) {
	if x.SubjectId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetSubjectId())
	return offset
}

func (x *SetCommentAttrsReq) fastWriteField5(buf []byte) (offset int) {
	if x.SortTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetSortTime())
	return offset
}

func (x *SetCommentAttrsResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetCommentSubjectReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetCommentSubjectReq) fastWriteField1(buf []byte) (offset int) {
	if x.SubjectId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetSubjectId())
	return offset
}

func (x *GetCommentSubjectResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetCommentSubjectResp) fastWriteField1(buf []byte) (offset int) {
	if x.Subject == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetSubject())
	return offset
}

func (x *UpdateCommentSubjectReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateCommentSubjectReq) fastWriteField1(buf []byte) (offset int) {
	if x.Subject == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetSubject())
	return offset
}

func (x *UpdateCommentSubjectResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeleteCommentSubjectReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteCommentSubjectReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeleteCommentSubjectResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *CreateLabelReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateLabelReq) fastWriteField1(buf []byte) (offset int) {
	if x.Label == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLabel())
	return offset
}

func (x *CreateLabelResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateLabelResp) fastWriteField1(buf []byte) (offset int) {
	if x.LabelId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetLabelId())
	return offset
}

func (x *DeleteLabelReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteLabelReq) fastWriteField1(buf []byte) (offset int) {
	if x.LabelId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetLabelId())
	return offset
}

func (x *DeleteLabelResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetLabelReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetLabelReq) fastWriteField1(buf []byte) (offset int) {
	if x.LabelId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetLabelId())
	return offset
}

func (x *GetLabelResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetLabelResp) fastWriteField1(buf []byte) (offset int) {
	if x.Label == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLabel())
	return offset
}

func (x *UpdateLabelReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateLabelReq) fastWriteField1(buf []byte) (offset int) {
	if x.Label == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLabel())
	return offset
}

func (x *UpdateLabelResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetLabelsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *GetLabelsReq) fastWriteField1(buf []byte) (offset int) {
	if x.Key == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetKey())
	return offset
}

func (x *GetLabelsReq) fastWriteField2(buf []byte) (offset int) {
	if x.Limit == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetLimit())
	return offset
}

func (x *GetLabelsReq) fastWriteField3(buf []byte) (offset int) {
	if x.LastToken == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetLastToken())
	return offset
}

func (x *GetLabelsReq) fastWriteField4(buf []byte) (offset int) {
	if x.Backward == nil {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 4, x.GetBackward())
	return offset
}

func (x *GetLabelsReq) fastWriteField5(buf []byte) (offset int) {
	if x.Offset == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetOffset())
	return offset
}

func (x *GetLabelsResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetLabelsResp) fastWriteField1(buf []byte) (offset int) {
	if x.Labels == nil {
		return offset
	}
	for i := range x.GetLabels() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLabels()[i])
	}
	return offset
}

func (x *GetLabelsResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *GetLabelsResp) fastWriteField3(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetToken())
	return offset
}

func (x *GetLabelsInBatchReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetLabelsInBatchReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.LabelIds) == 0 {
		return offset
	}
	for i := range x.GetLabelIds() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetLabelIds()[i])
	}
	return offset
}

func (x *GetLabelsInBatchResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetLabelsInBatchResp) fastWriteField1(buf []byte) (offset int) {
	if x.Labels == nil {
		return offset
	}
	for i := range x.GetLabels() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLabels()[i])
	}
	return offset
}

func (x *CreateCommentReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateCommentReq) sizeField1() (n int) {
	if x.Comment == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetComment())
	return n
}

func (x *CreateCommentResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateCommentResp) sizeField1() (n int) {
	if x.CommentId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCommentId())
	return n
}

func (x *GetCommentReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetCommentReq) sizeField1() (n int) {
	if x.CommentId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCommentId())
	return n
}

func (x *GetCommentResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetCommentResp) sizeField1() (n int) {
	if x.Comment == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetComment())
	return n
}

func (x *GetCommentsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	return n
}

func (x *GetCommentsReq) sizeField1() (n int) {
	if x.OnlyUserId == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetOnlyUserId())
	return n
}

func (x *GetCommentsReq) sizeField2() (n int) {
	if x.OnlyAtUserId == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetOnlyAtUserId())
	return n
}

func (x *GetCommentsReq) sizeField3() (n int) {
	if x.OnlyCommentId == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetOnlyCommentId())
	return n
}

func (x *GetCommentsReq) sizeField4() (n int) {
	if x.OnlySubjectId == nil {
		return n
	}
	n += fastpb.SizeString(4, x.GetOnlySubjectId())
	return n
}

func (x *GetCommentsReq) sizeField5() (n int) {
	if x.OnlyRootId == nil {
		return n
	}
	n += fastpb.SizeString(5, x.GetOnlyRootId())
	return n
}

func (x *GetCommentsReq) sizeField6() (n int) {
	if x.OnlyFatherId == nil {
		return n
	}
	n += fastpb.SizeString(6, x.GetOnlyFatherId())
	return n
}

func (x *GetCommentsReq) sizeField7() (n int) {
	if x.OnlyState == nil {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetOnlyState())
	return n
}

func (x *GetCommentsReq) sizeField8() (n int) {
	if x.OnlyAttrs == nil {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetOnlyAttrs())
	return n
}

func (x *GetCommentsReq) sizeField9() (n int) {
	if x.Limit == nil {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetLimit())
	return n
}

func (x *GetCommentsReq) sizeField10() (n int) {
	if x.LastToken == nil {
		return n
	}
	n += fastpb.SizeString(10, x.GetLastToken())
	return n
}

func (x *GetCommentsReq) sizeField11() (n int) {
	if x.Backward == nil {
		return n
	}
	n += fastpb.SizeBool(11, x.GetBackward())
	return n
}

func (x *GetCommentsReq) sizeField12() (n int) {
	if x.Offset == nil {
		return n
	}
	n += fastpb.SizeInt64(12, x.GetOffset())
	return n
}

func (x *GetCommentsResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetCommentsResp) sizeField1() (n int) {
	if x.Comments == nil {
		return n
	}
	for i := range x.GetComments() {
		n += fastpb.SizeMessage(1, x.GetComments()[i])
	}
	return n
}

func (x *GetCommentsResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *GetCommentsResp) sizeField3() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetToken())
	return n
}

func (x *UpdateCommentReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateCommentReq) sizeField1() (n int) {
	if x.Comment == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetComment())
	return n
}

func (x *UpdateCommentResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeleteCommentReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteCommentReq) sizeField1() (n int) {
	if x.CommentId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCommentId())
	return n
}

func (x *DeleteCommentResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *SetCommentAttrsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *SetCommentAttrsReq) sizeField1() (n int) {
	if x.CommentId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCommentId())
	return n
}

func (x *SetCommentAttrsReq) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *SetCommentAttrsReq) sizeField3() (n int) {
	if x.Attrs == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetAttrs()))
	return n
}

func (x *SetCommentAttrsReq) sizeField4() (n int) {
	if x.SubjectId == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetSubjectId())
	return n
}

func (x *SetCommentAttrsReq) sizeField5() (n int) {
	if x.SortTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetSortTime())
	return n
}

func (x *SetCommentAttrsResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetCommentSubjectReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetCommentSubjectReq) sizeField1() (n int) {
	if x.SubjectId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetSubjectId())
	return n
}

func (x *GetCommentSubjectResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetCommentSubjectResp) sizeField1() (n int) {
	if x.Subject == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetSubject())
	return n
}

func (x *UpdateCommentSubjectReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateCommentSubjectReq) sizeField1() (n int) {
	if x.Subject == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetSubject())
	return n
}

func (x *UpdateCommentSubjectResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeleteCommentSubjectReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteCommentSubjectReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *DeleteCommentSubjectResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *CreateLabelReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateLabelReq) sizeField1() (n int) {
	if x.Label == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetLabel())
	return n
}

func (x *CreateLabelResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateLabelResp) sizeField1() (n int) {
	if x.LabelId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetLabelId())
	return n
}

func (x *DeleteLabelReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteLabelReq) sizeField1() (n int) {
	if x.LabelId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetLabelId())
	return n
}

func (x *DeleteLabelResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetLabelReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetLabelReq) sizeField1() (n int) {
	if x.LabelId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetLabelId())
	return n
}

func (x *GetLabelResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetLabelResp) sizeField1() (n int) {
	if x.Label == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetLabel())
	return n
}

func (x *UpdateLabelReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateLabelReq) sizeField1() (n int) {
	if x.Label == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetLabel())
	return n
}

func (x *UpdateLabelResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetLabelsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *GetLabelsReq) sizeField1() (n int) {
	if x.Key == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetKey())
	return n
}

func (x *GetLabelsReq) sizeField2() (n int) {
	if x.Limit == nil {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetLimit())
	return n
}

func (x *GetLabelsReq) sizeField3() (n int) {
	if x.LastToken == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetLastToken())
	return n
}

func (x *GetLabelsReq) sizeField4() (n int) {
	if x.Backward == nil {
		return n
	}
	n += fastpb.SizeBool(4, x.GetBackward())
	return n
}

func (x *GetLabelsReq) sizeField5() (n int) {
	if x.Offset == nil {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetOffset())
	return n
}

func (x *GetLabelsResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetLabelsResp) sizeField1() (n int) {
	if x.Labels == nil {
		return n
	}
	for i := range x.GetLabels() {
		n += fastpb.SizeMessage(1, x.GetLabels()[i])
	}
	return n
}

func (x *GetLabelsResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *GetLabelsResp) sizeField3() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetToken())
	return n
}

func (x *GetLabelsInBatchReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetLabelsInBatchReq) sizeField1() (n int) {
	if len(x.LabelIds) == 0 {
		return n
	}
	for i := range x.GetLabelIds() {
		n += fastpb.SizeString(1, x.GetLabelIds()[i])
	}
	return n
}

func (x *GetLabelsInBatchResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetLabelsInBatchResp) sizeField1() (n int) {
	if x.Labels == nil {
		return n
	}
	for i := range x.GetLabels() {
		n += fastpb.SizeMessage(1, x.GetLabels()[i])
	}
	return n
}

var fieldIDToName_CreateCommentReq = map[int32]string{
	1: "Comment",
}

var fieldIDToName_CreateCommentResp = map[int32]string{
	1: "CommentId",
}

var fieldIDToName_GetCommentReq = map[int32]string{
	1: "CommentId",
}

var fieldIDToName_GetCommentResp = map[int32]string{
	1: "Comment",
}

var fieldIDToName_GetCommentsReq = map[int32]string{
	1:  "OnlyUserId",
	2:  "OnlyAtUserId",
	3:  "OnlyCommentId",
	4:  "OnlySubjectId",
	5:  "OnlyRootId",
	6:  "OnlyFatherId",
	7:  "OnlyState",
	8:  "OnlyAttrs",
	9:  "Limit",
	10: "LastToken",
	11: "Backward",
	12: "Offset",
}

var fieldIDToName_GetCommentsResp = map[int32]string{
	1: "Comments",
	2: "Total",
	3: "Token",
}

var fieldIDToName_UpdateCommentReq = map[int32]string{
	1: "Comment",
}

var fieldIDToName_UpdateCommentResp = map[int32]string{}

var fieldIDToName_DeleteCommentReq = map[int32]string{
	1: "CommentId",
}

var fieldIDToName_DeleteCommentResp = map[int32]string{}

var fieldIDToName_SetCommentAttrsReq = map[int32]string{
	1: "CommentId",
	2: "UserId",
	3: "Attrs",
	4: "SubjectId",
	5: "SortTime",
}

var fieldIDToName_SetCommentAttrsResp = map[int32]string{}

var fieldIDToName_GetCommentSubjectReq = map[int32]string{
	1: "SubjectId",
}

var fieldIDToName_GetCommentSubjectResp = map[int32]string{
	1: "Subject",
}

var fieldIDToName_UpdateCommentSubjectReq = map[int32]string{
	1: "Subject",
}

var fieldIDToName_UpdateCommentSubjectResp = map[int32]string{}

var fieldIDToName_DeleteCommentSubjectReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeleteCommentSubjectResp = map[int32]string{}

var fieldIDToName_CreateLabelReq = map[int32]string{
	1: "Label",
}

var fieldIDToName_CreateLabelResp = map[int32]string{
	1: "LabelId",
}

var fieldIDToName_DeleteLabelReq = map[int32]string{
	1: "LabelId",
}

var fieldIDToName_DeleteLabelResp = map[int32]string{}

var fieldIDToName_GetLabelReq = map[int32]string{
	1: "LabelId",
}

var fieldIDToName_GetLabelResp = map[int32]string{
	1: "Label",
}

var fieldIDToName_UpdateLabelReq = map[int32]string{
	1: "Label",
}

var fieldIDToName_UpdateLabelResp = map[int32]string{}

var fieldIDToName_GetLabelsReq = map[int32]string{
	1: "Key",
	2: "Limit",
	3: "LastToken",
	4: "Backward",
	5: "Offset",
}

var fieldIDToName_GetLabelsResp = map[int32]string{
	1: "Labels",
	2: "Total",
	3: "Token",
}

var fieldIDToName_GetLabelsInBatchReq = map[int32]string{
	1: "LabelIds",
}

var fieldIDToName_GetLabelsInBatchResp = map[int32]string{
	1: "Labels",
}

var _ = basic.File_basic_pagination_proto
var _ = http.File_http_http_proto
