// Code generated by Kitex v0.8.0. DO NOT EDIT.

package hotrank

import (
	"context"
	core_api "github.com/CloudStriver/service-idl-gen-go/kitex_gen/cloudmind/core_api"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return hotRankServiceInfo
}

var hotRankServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "hotRank"
	handlerType := (*core_api.HotRank)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetHotRanks": kitex.NewMethodInfo(getHotRanksHandler, newGetHotRanksArgs, newGetHotRanksResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "cloudmind.core_api",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func getHotRanksHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetHotRanksReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.HotRank).GetHotRanks(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetHotRanksArgs:
		success, err := handler.(core_api.HotRank).GetHotRanks(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetHotRanksResult)
		realResult.Success = success
	}
	return nil
}
func newGetHotRanksArgs() interface{} {
	return &GetHotRanksArgs{}
}

func newGetHotRanksResult() interface{} {
	return &GetHotRanksResult{}
}

type GetHotRanksArgs struct {
	Req *core_api.GetHotRanksReq
}

func (p *GetHotRanksArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetHotRanksReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetHotRanksArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetHotRanksArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetHotRanksArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetHotRanksArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetHotRanksReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetHotRanksArgs_Req_DEFAULT *core_api.GetHotRanksReq

func (p *GetHotRanksArgs) GetReq() *core_api.GetHotRanksReq {
	if !p.IsSetReq() {
		return GetHotRanksArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetHotRanksArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetHotRanksArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetHotRanksResult struct {
	Success *core_api.GetHotRanksResp
}

var GetHotRanksResult_Success_DEFAULT *core_api.GetHotRanksResp

func (p *GetHotRanksResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetHotRanksResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetHotRanksResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetHotRanksResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetHotRanksResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetHotRanksResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetHotRanksResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetHotRanksResult) GetSuccess() *core_api.GetHotRanksResp {
	if !p.IsSetSuccess() {
		return GetHotRanksResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetHotRanksResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetHotRanksResp)
}

func (p *GetHotRanksResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetHotRanksResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetHotRanks(ctx context.Context, Req *core_api.GetHotRanksReq) (r *core_api.GetHotRanksResp, err error) {
	var _args GetHotRanksArgs
	_args.Req = Req
	var _result GetHotRanksResult
	if err = p.c.Call(ctx, "GetHotRanks", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
