// Code generated by Kitex v0.8.0. DO NOT EDIT.

package content

import (
	"context"
	core_api "github.com/CloudStriver/service-idl-gen-go/kitex_gen/cloudmind/core_api"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return contentServiceInfo
}

var contentServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "content"
	handlerType := (*core_api.Content)(nil)
	methods := map[string]kitex.MethodInfo{
		"UpdateUser":             kitex.NewMethodInfo(updateUserHandler, newUpdateUserArgs, newUpdateUserResult, false),
		"SearchUser":             kitex.NewMethodInfo(searchUserHandler, newSearchUserArgs, newSearchUserResult, false),
		"GetUser":                kitex.NewMethodInfo(getUserHandler, newGetUserArgs, newGetUserResult, false),
		"GetUserDetail":          kitex.NewMethodInfo(getUserDetailHandler, newGetUserDetailArgs, newGetUserDetailResult, false),
		"AskUploadAvatar":        kitex.NewMethodInfo(askUploadAvatarHandler, newAskUploadAvatarArgs, newAskUploadAvatarResult, false),
		"GetPublicFile":          kitex.NewMethodInfo(getPublicFileHandler, newGetPublicFileArgs, newGetPublicFileResult, false),
		"GetPrivateFile":         kitex.NewMethodInfo(getPrivateFileHandler, newGetPrivateFileArgs, newGetPrivateFileResult, false),
		"GetPrivateFiles":        kitex.NewMethodInfo(getPrivateFilesHandler, newGetPrivateFilesArgs, newGetPrivateFilesResult, false),
		"GetPublicFiles":         kitex.NewMethodInfo(getPublicFilesHandler, newGetPublicFilesArgs, newGetPublicFilesResult, false),
		"GetRecycleBinFiles":     kitex.NewMethodInfo(getRecycleBinFilesHandler, newGetRecycleBinFilesArgs, newGetRecycleBinFilesResult, false),
		"GetFileBySharingCode":   kitex.NewMethodInfo(getFileBySharingCodeHandler, newGetFileBySharingCodeArgs, newGetFileBySharingCodeResult, false),
		"CreateFile":             kitex.NewMethodInfo(createFileHandler, newCreateFileArgs, newCreateFileResult, false),
		"UpdateFile":             kitex.NewMethodInfo(updateFileHandler, newUpdateFileArgs, newUpdateFileResult, false),
		"MoveFile":               kitex.NewMethodInfo(moveFileHandler, newMoveFileArgs, newMoveFileResult, false),
		"SaveFileToPrivateSpace": kitex.NewMethodInfo(saveFileToPrivateSpaceHandler, newSaveFileToPrivateSpaceArgs, newSaveFileToPrivateSpaceResult, false),
		"AddFileToPublicSpace":   kitex.NewMethodInfo(addFileToPublicSpaceHandler, newAddFileToPublicSpaceArgs, newAddFileToPublicSpaceResult, false),
		"CompletelyRemoveFile":   kitex.NewMethodInfo(completelyRemoveFileHandler, newCompletelyRemoveFileArgs, newCompletelyRemoveFileResult, false),
		"DeleteFile":             kitex.NewMethodInfo(deleteFileHandler, newDeleteFileArgs, newDeleteFileResult, false),
		"RecoverRecycleBinFile":  kitex.NewMethodInfo(recoverRecycleBinFileHandler, newRecoverRecycleBinFileArgs, newRecoverRecycleBinFileResult, false),
		"CreateZone":             kitex.NewMethodInfo(createZoneHandler, newCreateZoneArgs, newCreateZoneResult, false),
		"UpdateZone":             kitex.NewMethodInfo(updateZoneHandler, newUpdateZoneArgs, newUpdateZoneResult, false),
		"GetZone":                kitex.NewMethodInfo(getZoneHandler, newGetZoneArgs, newGetZoneResult, false),
		"DeleteZone":             kitex.NewMethodInfo(deleteZoneHandler, newDeleteZoneArgs, newDeleteZoneResult, false),
		"CreateShareCode":        kitex.NewMethodInfo(createShareCodeHandler, newCreateShareCodeArgs, newCreateShareCodeResult, false),
		"GetShareList":           kitex.NewMethodInfo(getShareListHandler, newGetShareListArgs, newGetShareListResult, false),
		"DeleteShareCode":        kitex.NewMethodInfo(deleteShareCodeHandler, newDeleteShareCodeArgs, newDeleteShareCodeResult, false),
		"ParsingShareCode":       kitex.NewMethodInfo(parsingShareCodeHandler, newParsingShareCodeArgs, newParsingShareCodeResult, false),
		"AskUploadFile":          kitex.NewMethodInfo(askUploadFileHandler, newAskUploadFileArgs, newAskUploadFileResult, false),
		"AskDownloadFile":        kitex.NewMethodInfo(askDownloadFileHandler, newAskDownloadFileArgs, newAskDownloadFileResult, false),
		"CreatePost":             kitex.NewMethodInfo(createPostHandler, newCreatePostArgs, newCreatePostResult, false),
		"DeletePost":             kitex.NewMethodInfo(deletePostHandler, newDeletePostArgs, newDeletePostResult, false),
		"UpdatePost":             kitex.NewMethodInfo(updatePostHandler, newUpdatePostArgs, newUpdatePostResult, false),
		"GetPosts":               kitex.NewMethodInfo(getPostsHandler, newGetPostsArgs, newGetPostsResult, false),
		"GetPost":                kitex.NewMethodInfo(getPostHandler, newGetPostArgs, newGetPostResult, false),
		"GetRecommendByUser":     kitex.NewMethodInfo(getRecommendByUserHandler, newGetRecommendByUserArgs, newGetRecommendByUserResult, false),
		"GetRecommendByItem":     kitex.NewMethodInfo(getRecommendByItemHandler, newGetRecommendByItemArgs, newGetRecommendByItemResult, false),
		"CreateFeedBack":         kitex.NewMethodInfo(createFeedBackHandler, newCreateFeedBackArgs, newCreateFeedBackResult, false),
		"GetPopularRecommend":    kitex.NewMethodInfo(getPopularRecommendHandler, newGetPopularRecommendArgs, newGetPopularRecommendResult, false),
		"GetLatestRecommend":     kitex.NewMethodInfo(getLatestRecommendHandler, newGetLatestRecommendArgs, newGetLatestRecommendResult, false),
		"CreateProduct":          kitex.NewMethodInfo(createProductHandler, newCreateProductArgs, newCreateProductResult, false),
		"GetProduct":             kitex.NewMethodInfo(getProductHandler, newGetProductArgs, newGetProductResult, false),
		"GetProducts":            kitex.NewMethodInfo(getProductsHandler, newGetProductsArgs, newGetProductsResult, false),
		"UpdateProduct":          kitex.NewMethodInfo(updateProductHandler, newUpdateProductArgs, newUpdateProductResult, false),
		"DeleteProduct":          kitex.NewMethodInfo(deleteProductHandler, newDeleteProductArgs, newDeleteProductResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "cloudmind.core_api",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func updateUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).UpdateUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateUserArgs:
		success, err := handler.(core_api.Content).UpdateUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateUserResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateUserArgs() interface{} {
	return &UpdateUserArgs{}
}

func newUpdateUserResult() interface{} {
	return &UpdateUserResult{}
}

type UpdateUserArgs struct {
	Req *core_api.UpdateUserReq
}

func (p *UpdateUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateUserReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateUserArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateUserArgs_Req_DEFAULT *core_api.UpdateUserReq

func (p *UpdateUserArgs) GetReq() *core_api.UpdateUserReq {
	if !p.IsSetReq() {
		return UpdateUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateUserResult struct {
	Success *core_api.UpdateUserResp
}

var UpdateUserResult_Success_DEFAULT *core_api.UpdateUserResp

func (p *UpdateUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.UpdateUserResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateUserResult) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateUserResult) GetSuccess() *core_api.UpdateUserResp {
	if !p.IsSetSuccess() {
		return UpdateUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.UpdateUserResp)
}

func (p *UpdateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateUserResult) GetResult() interface{} {
	return p.Success
}

func searchUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SearchUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).SearchUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SearchUserArgs:
		success, err := handler.(core_api.Content).SearchUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SearchUserResult)
		realResult.Success = success
	}
	return nil
}
func newSearchUserArgs() interface{} {
	return &SearchUserArgs{}
}

func newSearchUserResult() interface{} {
	return &SearchUserResult{}
}

type SearchUserArgs struct {
	Req *core_api.SearchUserReq
}

func (p *SearchUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SearchUserReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SearchUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SearchUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SearchUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SearchUserArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SearchUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SearchUserArgs_Req_DEFAULT *core_api.SearchUserReq

func (p *SearchUserArgs) GetReq() *core_api.SearchUserReq {
	if !p.IsSetReq() {
		return SearchUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SearchUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SearchUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SearchUserResult struct {
	Success *core_api.SearchUserResp
}

var SearchUserResult_Success_DEFAULT *core_api.SearchUserResp

func (p *SearchUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.SearchUserResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SearchUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SearchUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SearchUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SearchUserResult) Unmarshal(in []byte) error {
	msg := new(core_api.SearchUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SearchUserResult) GetSuccess() *core_api.SearchUserResp {
	if !p.IsSetSuccess() {
		return SearchUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SearchUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SearchUserResp)
}

func (p *SearchUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SearchUserResult) GetResult() interface{} {
	return p.Success
}

func getUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).GetUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserArgs:
		success, err := handler.(core_api.Content).GetUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserArgs() interface{} {
	return &GetUserArgs{}
}

func newGetUserResult() interface{} {
	return &GetUserResult{}
}

type GetUserArgs struct {
	Req *core_api.GetUserReq
}

func (p *GetUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetUserReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserArgs_Req_DEFAULT *core_api.GetUserReq

func (p *GetUserArgs) GetReq() *core_api.GetUserReq {
	if !p.IsSetReq() {
		return GetUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserResult struct {
	Success *core_api.GetUserResp
}

var GetUserResult_Success_DEFAULT *core_api.GetUserResp

func (p *GetUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetUserResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserResult) GetSuccess() *core_api.GetUserResp {
	if !p.IsSetSuccess() {
		return GetUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetUserResp)
}

func (p *GetUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserResult) GetResult() interface{} {
	return p.Success
}

func getUserDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetUserDetailReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).GetUserDetail(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserDetailArgs:
		success, err := handler.(core_api.Content).GetUserDetail(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserDetailResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserDetailArgs() interface{} {
	return &GetUserDetailArgs{}
}

func newGetUserDetailResult() interface{} {
	return &GetUserDetailResult{}
}

type GetUserDetailArgs struct {
	Req *core_api.GetUserDetailReq
}

func (p *GetUserDetailArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetUserDetailReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserDetailArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserDetailArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserDetailArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserDetailArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetUserDetailReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserDetailArgs_Req_DEFAULT *core_api.GetUserDetailReq

func (p *GetUserDetailArgs) GetReq() *core_api.GetUserDetailReq {
	if !p.IsSetReq() {
		return GetUserDetailArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserDetailArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserDetailResult struct {
	Success *core_api.GetUserDetailResp
}

var GetUserDetailResult_Success_DEFAULT *core_api.GetUserDetailResp

func (p *GetUserDetailResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetUserDetailResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserDetailResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserDetailResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserDetailResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserDetailResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetUserDetailResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserDetailResult) GetSuccess() *core_api.GetUserDetailResp {
	if !p.IsSetSuccess() {
		return GetUserDetailResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetUserDetailResp)
}

func (p *GetUserDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserDetailResult) GetResult() interface{} {
	return p.Success
}

func askUploadAvatarHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.AskUploadAvatarReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).AskUploadAvatar(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AskUploadAvatarArgs:
		success, err := handler.(core_api.Content).AskUploadAvatar(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AskUploadAvatarResult)
		realResult.Success = success
	}
	return nil
}
func newAskUploadAvatarArgs() interface{} {
	return &AskUploadAvatarArgs{}
}

func newAskUploadAvatarResult() interface{} {
	return &AskUploadAvatarResult{}
}

type AskUploadAvatarArgs struct {
	Req *core_api.AskUploadAvatarReq
}

func (p *AskUploadAvatarArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.AskUploadAvatarReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AskUploadAvatarArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AskUploadAvatarArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AskUploadAvatarArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AskUploadAvatarArgs) Unmarshal(in []byte) error {
	msg := new(core_api.AskUploadAvatarReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AskUploadAvatarArgs_Req_DEFAULT *core_api.AskUploadAvatarReq

func (p *AskUploadAvatarArgs) GetReq() *core_api.AskUploadAvatarReq {
	if !p.IsSetReq() {
		return AskUploadAvatarArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AskUploadAvatarArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AskUploadAvatarArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AskUploadAvatarResult struct {
	Success *core_api.AskUploadAvatarResp
}

var AskUploadAvatarResult_Success_DEFAULT *core_api.AskUploadAvatarResp

func (p *AskUploadAvatarResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.AskUploadAvatarResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AskUploadAvatarResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AskUploadAvatarResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AskUploadAvatarResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AskUploadAvatarResult) Unmarshal(in []byte) error {
	msg := new(core_api.AskUploadAvatarResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AskUploadAvatarResult) GetSuccess() *core_api.AskUploadAvatarResp {
	if !p.IsSetSuccess() {
		return AskUploadAvatarResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AskUploadAvatarResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.AskUploadAvatarResp)
}

func (p *AskUploadAvatarResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AskUploadAvatarResult) GetResult() interface{} {
	return p.Success
}

func getPublicFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetPublicFilesReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).GetPublicFile(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetPublicFileArgs:
		success, err := handler.(core_api.Content).GetPublicFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetPublicFileResult)
		realResult.Success = success
	}
	return nil
}
func newGetPublicFileArgs() interface{} {
	return &GetPublicFileArgs{}
}

func newGetPublicFileResult() interface{} {
	return &GetPublicFileResult{}
}

type GetPublicFileArgs struct {
	Req *core_api.GetPublicFilesReq
}

func (p *GetPublicFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetPublicFilesReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetPublicFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetPublicFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetPublicFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetPublicFileArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetPublicFilesReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetPublicFileArgs_Req_DEFAULT *core_api.GetPublicFilesReq

func (p *GetPublicFileArgs) GetReq() *core_api.GetPublicFilesReq {
	if !p.IsSetReq() {
		return GetPublicFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetPublicFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetPublicFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetPublicFileResult struct {
	Success *core_api.GetPublicFilesResp
}

var GetPublicFileResult_Success_DEFAULT *core_api.GetPublicFilesResp

func (p *GetPublicFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetPublicFilesResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetPublicFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetPublicFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetPublicFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetPublicFileResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetPublicFilesResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetPublicFileResult) GetSuccess() *core_api.GetPublicFilesResp {
	if !p.IsSetSuccess() {
		return GetPublicFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetPublicFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetPublicFilesResp)
}

func (p *GetPublicFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPublicFileResult) GetResult() interface{} {
	return p.Success
}

func getPrivateFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetPrivateFileReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).GetPrivateFile(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetPrivateFileArgs:
		success, err := handler.(core_api.Content).GetPrivateFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetPrivateFileResult)
		realResult.Success = success
	}
	return nil
}
func newGetPrivateFileArgs() interface{} {
	return &GetPrivateFileArgs{}
}

func newGetPrivateFileResult() interface{} {
	return &GetPrivateFileResult{}
}

type GetPrivateFileArgs struct {
	Req *core_api.GetPrivateFileReq
}

func (p *GetPrivateFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetPrivateFileReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetPrivateFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetPrivateFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetPrivateFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetPrivateFileArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetPrivateFileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetPrivateFileArgs_Req_DEFAULT *core_api.GetPrivateFileReq

func (p *GetPrivateFileArgs) GetReq() *core_api.GetPrivateFileReq {
	if !p.IsSetReq() {
		return GetPrivateFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetPrivateFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetPrivateFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetPrivateFileResult struct {
	Success *core_api.GetPrivateFileResp
}

var GetPrivateFileResult_Success_DEFAULT *core_api.GetPrivateFileResp

func (p *GetPrivateFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetPrivateFileResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetPrivateFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetPrivateFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetPrivateFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetPrivateFileResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetPrivateFileResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetPrivateFileResult) GetSuccess() *core_api.GetPrivateFileResp {
	if !p.IsSetSuccess() {
		return GetPrivateFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetPrivateFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetPrivateFileResp)
}

func (p *GetPrivateFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPrivateFileResult) GetResult() interface{} {
	return p.Success
}

func getPrivateFilesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetPrivateFilesReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).GetPrivateFiles(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetPrivateFilesArgs:
		success, err := handler.(core_api.Content).GetPrivateFiles(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetPrivateFilesResult)
		realResult.Success = success
	}
	return nil
}
func newGetPrivateFilesArgs() interface{} {
	return &GetPrivateFilesArgs{}
}

func newGetPrivateFilesResult() interface{} {
	return &GetPrivateFilesResult{}
}

type GetPrivateFilesArgs struct {
	Req *core_api.GetPrivateFilesReq
}

func (p *GetPrivateFilesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetPrivateFilesReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetPrivateFilesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetPrivateFilesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetPrivateFilesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetPrivateFilesArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetPrivateFilesReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetPrivateFilesArgs_Req_DEFAULT *core_api.GetPrivateFilesReq

func (p *GetPrivateFilesArgs) GetReq() *core_api.GetPrivateFilesReq {
	if !p.IsSetReq() {
		return GetPrivateFilesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetPrivateFilesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetPrivateFilesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetPrivateFilesResult struct {
	Success *core_api.GetPrivateFilesResp
}

var GetPrivateFilesResult_Success_DEFAULT *core_api.GetPrivateFilesResp

func (p *GetPrivateFilesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetPrivateFilesResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetPrivateFilesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetPrivateFilesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetPrivateFilesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetPrivateFilesResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetPrivateFilesResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetPrivateFilesResult) GetSuccess() *core_api.GetPrivateFilesResp {
	if !p.IsSetSuccess() {
		return GetPrivateFilesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetPrivateFilesResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetPrivateFilesResp)
}

func (p *GetPrivateFilesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPrivateFilesResult) GetResult() interface{} {
	return p.Success
}

func getPublicFilesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetPublicFilesReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).GetPublicFiles(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetPublicFilesArgs:
		success, err := handler.(core_api.Content).GetPublicFiles(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetPublicFilesResult)
		realResult.Success = success
	}
	return nil
}
func newGetPublicFilesArgs() interface{} {
	return &GetPublicFilesArgs{}
}

func newGetPublicFilesResult() interface{} {
	return &GetPublicFilesResult{}
}

type GetPublicFilesArgs struct {
	Req *core_api.GetPublicFilesReq
}

func (p *GetPublicFilesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetPublicFilesReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetPublicFilesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetPublicFilesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetPublicFilesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetPublicFilesArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetPublicFilesReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetPublicFilesArgs_Req_DEFAULT *core_api.GetPublicFilesReq

func (p *GetPublicFilesArgs) GetReq() *core_api.GetPublicFilesReq {
	if !p.IsSetReq() {
		return GetPublicFilesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetPublicFilesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetPublicFilesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetPublicFilesResult struct {
	Success *core_api.GetPublicFilesResp
}

var GetPublicFilesResult_Success_DEFAULT *core_api.GetPublicFilesResp

func (p *GetPublicFilesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetPublicFilesResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetPublicFilesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetPublicFilesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetPublicFilesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetPublicFilesResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetPublicFilesResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetPublicFilesResult) GetSuccess() *core_api.GetPublicFilesResp {
	if !p.IsSetSuccess() {
		return GetPublicFilesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetPublicFilesResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetPublicFilesResp)
}

func (p *GetPublicFilesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPublicFilesResult) GetResult() interface{} {
	return p.Success
}

func getRecycleBinFilesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetRecycleBinFilesReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).GetRecycleBinFiles(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetRecycleBinFilesArgs:
		success, err := handler.(core_api.Content).GetRecycleBinFiles(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetRecycleBinFilesResult)
		realResult.Success = success
	}
	return nil
}
func newGetRecycleBinFilesArgs() interface{} {
	return &GetRecycleBinFilesArgs{}
}

func newGetRecycleBinFilesResult() interface{} {
	return &GetRecycleBinFilesResult{}
}

type GetRecycleBinFilesArgs struct {
	Req *core_api.GetRecycleBinFilesReq
}

func (p *GetRecycleBinFilesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetRecycleBinFilesReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetRecycleBinFilesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetRecycleBinFilesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetRecycleBinFilesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetRecycleBinFilesArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetRecycleBinFilesReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetRecycleBinFilesArgs_Req_DEFAULT *core_api.GetRecycleBinFilesReq

func (p *GetRecycleBinFilesArgs) GetReq() *core_api.GetRecycleBinFilesReq {
	if !p.IsSetReq() {
		return GetRecycleBinFilesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetRecycleBinFilesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetRecycleBinFilesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetRecycleBinFilesResult struct {
	Success *core_api.GetRecycleBinFilesResp
}

var GetRecycleBinFilesResult_Success_DEFAULT *core_api.GetRecycleBinFilesResp

func (p *GetRecycleBinFilesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetRecycleBinFilesResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetRecycleBinFilesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetRecycleBinFilesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetRecycleBinFilesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetRecycleBinFilesResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetRecycleBinFilesResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetRecycleBinFilesResult) GetSuccess() *core_api.GetRecycleBinFilesResp {
	if !p.IsSetSuccess() {
		return GetRecycleBinFilesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetRecycleBinFilesResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetRecycleBinFilesResp)
}

func (p *GetRecycleBinFilesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetRecycleBinFilesResult) GetResult() interface{} {
	return p.Success
}

func getFileBySharingCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetFileBySharingCodeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).GetFileBySharingCode(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFileBySharingCodeArgs:
		success, err := handler.(core_api.Content).GetFileBySharingCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFileBySharingCodeResult)
		realResult.Success = success
	}
	return nil
}
func newGetFileBySharingCodeArgs() interface{} {
	return &GetFileBySharingCodeArgs{}
}

func newGetFileBySharingCodeResult() interface{} {
	return &GetFileBySharingCodeResult{}
}

type GetFileBySharingCodeArgs struct {
	Req *core_api.GetFileBySharingCodeReq
}

func (p *GetFileBySharingCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetFileBySharingCodeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFileBySharingCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFileBySharingCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFileBySharingCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFileBySharingCodeArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetFileBySharingCodeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFileBySharingCodeArgs_Req_DEFAULT *core_api.GetFileBySharingCodeReq

func (p *GetFileBySharingCodeArgs) GetReq() *core_api.GetFileBySharingCodeReq {
	if !p.IsSetReq() {
		return GetFileBySharingCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFileBySharingCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFileBySharingCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFileBySharingCodeResult struct {
	Success *core_api.GetFileBySharingCodeResp
}

var GetFileBySharingCodeResult_Success_DEFAULT *core_api.GetFileBySharingCodeResp

func (p *GetFileBySharingCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetFileBySharingCodeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFileBySharingCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFileBySharingCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFileBySharingCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFileBySharingCodeResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetFileBySharingCodeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFileBySharingCodeResult) GetSuccess() *core_api.GetFileBySharingCodeResp {
	if !p.IsSetSuccess() {
		return GetFileBySharingCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFileBySharingCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetFileBySharingCodeResp)
}

func (p *GetFileBySharingCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFileBySharingCodeResult) GetResult() interface{} {
	return p.Success
}

func createFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreateFileReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).CreateFile(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateFileArgs:
		success, err := handler.(core_api.Content).CreateFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateFileResult)
		realResult.Success = success
	}
	return nil
}
func newCreateFileArgs() interface{} {
	return &CreateFileArgs{}
}

func newCreateFileResult() interface{} {
	return &CreateFileResult{}
}

type CreateFileArgs struct {
	Req *core_api.CreateFileReq
}

func (p *CreateFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CreateFileReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateFileArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreateFileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateFileArgs_Req_DEFAULT *core_api.CreateFileReq

func (p *CreateFileArgs) GetReq() *core_api.CreateFileReq {
	if !p.IsSetReq() {
		return CreateFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateFileResult struct {
	Success *core_api.CreateFileResp
}

var CreateFileResult_Success_DEFAULT *core_api.CreateFileResp

func (p *CreateFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.CreateFileResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateFileResult) Unmarshal(in []byte) error {
	msg := new(core_api.CreateFileResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateFileResult) GetSuccess() *core_api.CreateFileResp {
	if !p.IsSetSuccess() {
		return CreateFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.CreateFileResp)
}

func (p *CreateFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateFileResult) GetResult() interface{} {
	return p.Success
}

func updateFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateFileReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).UpdateFile(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateFileArgs:
		success, err := handler.(core_api.Content).UpdateFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateFileResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateFileArgs() interface{} {
	return &UpdateFileArgs{}
}

func newUpdateFileResult() interface{} {
	return &UpdateFileResult{}
}

type UpdateFileArgs struct {
	Req *core_api.UpdateFileReq
}

func (p *UpdateFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateFileReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateFileArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateFileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateFileArgs_Req_DEFAULT *core_api.UpdateFileReq

func (p *UpdateFileArgs) GetReq() *core_api.UpdateFileReq {
	if !p.IsSetReq() {
		return UpdateFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateFileResult struct {
	Success *core_api.UpdateFileResp
}

var UpdateFileResult_Success_DEFAULT *core_api.UpdateFileResp

func (p *UpdateFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.UpdateFileResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateFileResult) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateFileResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateFileResult) GetSuccess() *core_api.UpdateFileResp {
	if !p.IsSetSuccess() {
		return UpdateFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.UpdateFileResp)
}

func (p *UpdateFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateFileResult) GetResult() interface{} {
	return p.Success
}

func moveFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MoveFileReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).MoveFile(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *MoveFileArgs:
		success, err := handler.(core_api.Content).MoveFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MoveFileResult)
		realResult.Success = success
	}
	return nil
}
func newMoveFileArgs() interface{} {
	return &MoveFileArgs{}
}

func newMoveFileResult() interface{} {
	return &MoveFileResult{}
}

type MoveFileArgs struct {
	Req *core_api.MoveFileReq
}

func (p *MoveFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MoveFileReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MoveFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MoveFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MoveFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MoveFileArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MoveFileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MoveFileArgs_Req_DEFAULT *core_api.MoveFileReq

func (p *MoveFileArgs) GetReq() *core_api.MoveFileReq {
	if !p.IsSetReq() {
		return MoveFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MoveFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MoveFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MoveFileResult struct {
	Success *core_api.MoveFileResp
}

var MoveFileResult_Success_DEFAULT *core_api.MoveFileResp

func (p *MoveFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.MoveFileResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MoveFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MoveFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MoveFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MoveFileResult) Unmarshal(in []byte) error {
	msg := new(core_api.MoveFileResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MoveFileResult) GetSuccess() *core_api.MoveFileResp {
	if !p.IsSetSuccess() {
		return MoveFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MoveFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.MoveFileResp)
}

func (p *MoveFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MoveFileResult) GetResult() interface{} {
	return p.Success
}

func saveFileToPrivateSpaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SaveFileToPrivateSpaceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).SaveFileToPrivateSpace(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SaveFileToPrivateSpaceArgs:
		success, err := handler.(core_api.Content).SaveFileToPrivateSpace(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SaveFileToPrivateSpaceResult)
		realResult.Success = success
	}
	return nil
}
func newSaveFileToPrivateSpaceArgs() interface{} {
	return &SaveFileToPrivateSpaceArgs{}
}

func newSaveFileToPrivateSpaceResult() interface{} {
	return &SaveFileToPrivateSpaceResult{}
}

type SaveFileToPrivateSpaceArgs struct {
	Req *core_api.SaveFileToPrivateSpaceReq
}

func (p *SaveFileToPrivateSpaceArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SaveFileToPrivateSpaceReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SaveFileToPrivateSpaceArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SaveFileToPrivateSpaceArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SaveFileToPrivateSpaceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SaveFileToPrivateSpaceArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SaveFileToPrivateSpaceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SaveFileToPrivateSpaceArgs_Req_DEFAULT *core_api.SaveFileToPrivateSpaceReq

func (p *SaveFileToPrivateSpaceArgs) GetReq() *core_api.SaveFileToPrivateSpaceReq {
	if !p.IsSetReq() {
		return SaveFileToPrivateSpaceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SaveFileToPrivateSpaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SaveFileToPrivateSpaceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SaveFileToPrivateSpaceResult struct {
	Success *core_api.SaveFileToPrivateSpaceResp
}

var SaveFileToPrivateSpaceResult_Success_DEFAULT *core_api.SaveFileToPrivateSpaceResp

func (p *SaveFileToPrivateSpaceResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.SaveFileToPrivateSpaceResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SaveFileToPrivateSpaceResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SaveFileToPrivateSpaceResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SaveFileToPrivateSpaceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SaveFileToPrivateSpaceResult) Unmarshal(in []byte) error {
	msg := new(core_api.SaveFileToPrivateSpaceResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SaveFileToPrivateSpaceResult) GetSuccess() *core_api.SaveFileToPrivateSpaceResp {
	if !p.IsSetSuccess() {
		return SaveFileToPrivateSpaceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SaveFileToPrivateSpaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SaveFileToPrivateSpaceResp)
}

func (p *SaveFileToPrivateSpaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SaveFileToPrivateSpaceResult) GetResult() interface{} {
	return p.Success
}

func addFileToPublicSpaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.AddFileToPublicSpaceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).AddFileToPublicSpace(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddFileToPublicSpaceArgs:
		success, err := handler.(core_api.Content).AddFileToPublicSpace(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddFileToPublicSpaceResult)
		realResult.Success = success
	}
	return nil
}
func newAddFileToPublicSpaceArgs() interface{} {
	return &AddFileToPublicSpaceArgs{}
}

func newAddFileToPublicSpaceResult() interface{} {
	return &AddFileToPublicSpaceResult{}
}

type AddFileToPublicSpaceArgs struct {
	Req *core_api.AddFileToPublicSpaceReq
}

func (p *AddFileToPublicSpaceArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.AddFileToPublicSpaceReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddFileToPublicSpaceArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddFileToPublicSpaceArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddFileToPublicSpaceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AddFileToPublicSpaceArgs) Unmarshal(in []byte) error {
	msg := new(core_api.AddFileToPublicSpaceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddFileToPublicSpaceArgs_Req_DEFAULT *core_api.AddFileToPublicSpaceReq

func (p *AddFileToPublicSpaceArgs) GetReq() *core_api.AddFileToPublicSpaceReq {
	if !p.IsSetReq() {
		return AddFileToPublicSpaceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddFileToPublicSpaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddFileToPublicSpaceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddFileToPublicSpaceResult struct {
	Success *core_api.AddFileToPublicSpaceResp
}

var AddFileToPublicSpaceResult_Success_DEFAULT *core_api.AddFileToPublicSpaceResp

func (p *AddFileToPublicSpaceResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.AddFileToPublicSpaceResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddFileToPublicSpaceResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddFileToPublicSpaceResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddFileToPublicSpaceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AddFileToPublicSpaceResult) Unmarshal(in []byte) error {
	msg := new(core_api.AddFileToPublicSpaceResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddFileToPublicSpaceResult) GetSuccess() *core_api.AddFileToPublicSpaceResp {
	if !p.IsSetSuccess() {
		return AddFileToPublicSpaceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddFileToPublicSpaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.AddFileToPublicSpaceResp)
}

func (p *AddFileToPublicSpaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddFileToPublicSpaceResult) GetResult() interface{} {
	return p.Success
}

func completelyRemoveFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CompletelyRemoveFileReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).CompletelyRemoveFile(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CompletelyRemoveFileArgs:
		success, err := handler.(core_api.Content).CompletelyRemoveFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CompletelyRemoveFileResult)
		realResult.Success = success
	}
	return nil
}
func newCompletelyRemoveFileArgs() interface{} {
	return &CompletelyRemoveFileArgs{}
}

func newCompletelyRemoveFileResult() interface{} {
	return &CompletelyRemoveFileResult{}
}

type CompletelyRemoveFileArgs struct {
	Req *core_api.CompletelyRemoveFileReq
}

func (p *CompletelyRemoveFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CompletelyRemoveFileReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CompletelyRemoveFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CompletelyRemoveFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CompletelyRemoveFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CompletelyRemoveFileArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CompletelyRemoveFileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CompletelyRemoveFileArgs_Req_DEFAULT *core_api.CompletelyRemoveFileReq

func (p *CompletelyRemoveFileArgs) GetReq() *core_api.CompletelyRemoveFileReq {
	if !p.IsSetReq() {
		return CompletelyRemoveFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CompletelyRemoveFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CompletelyRemoveFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CompletelyRemoveFileResult struct {
	Success *core_api.CompletelyRemoveFileReq
}

var CompletelyRemoveFileResult_Success_DEFAULT *core_api.CompletelyRemoveFileReq

func (p *CompletelyRemoveFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.CompletelyRemoveFileReq)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CompletelyRemoveFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CompletelyRemoveFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CompletelyRemoveFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CompletelyRemoveFileResult) Unmarshal(in []byte) error {
	msg := new(core_api.CompletelyRemoveFileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CompletelyRemoveFileResult) GetSuccess() *core_api.CompletelyRemoveFileReq {
	if !p.IsSetSuccess() {
		return CompletelyRemoveFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CompletelyRemoveFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.CompletelyRemoveFileReq)
}

func (p *CompletelyRemoveFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CompletelyRemoveFileResult) GetResult() interface{} {
	return p.Success
}

func deleteFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteFileReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).DeleteFile(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteFileArgs:
		success, err := handler.(core_api.Content).DeleteFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteFileResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteFileArgs() interface{} {
	return &DeleteFileArgs{}
}

func newDeleteFileResult() interface{} {
	return &DeleteFileResult{}
}

type DeleteFileArgs struct {
	Req *core_api.DeleteFileReq
}

func (p *DeleteFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeleteFileReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteFileArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteFileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteFileArgs_Req_DEFAULT *core_api.DeleteFileReq

func (p *DeleteFileArgs) GetReq() *core_api.DeleteFileReq {
	if !p.IsSetReq() {
		return DeleteFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteFileResult struct {
	Success *core_api.DeleteFileResp
}

var DeleteFileResult_Success_DEFAULT *core_api.DeleteFileResp

func (p *DeleteFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.DeleteFileResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteFileResult) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteFileResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteFileResult) GetSuccess() *core_api.DeleteFileResp {
	if !p.IsSetSuccess() {
		return DeleteFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.DeleteFileResp)
}

func (p *DeleteFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteFileResult) GetResult() interface{} {
	return p.Success
}

func recoverRecycleBinFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.RecoverRecycleBinFileReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).RecoverRecycleBinFile(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RecoverRecycleBinFileArgs:
		success, err := handler.(core_api.Content).RecoverRecycleBinFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RecoverRecycleBinFileResult)
		realResult.Success = success
	}
	return nil
}
func newRecoverRecycleBinFileArgs() interface{} {
	return &RecoverRecycleBinFileArgs{}
}

func newRecoverRecycleBinFileResult() interface{} {
	return &RecoverRecycleBinFileResult{}
}

type RecoverRecycleBinFileArgs struct {
	Req *core_api.RecoverRecycleBinFileReq
}

func (p *RecoverRecycleBinFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.RecoverRecycleBinFileReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RecoverRecycleBinFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RecoverRecycleBinFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RecoverRecycleBinFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RecoverRecycleBinFileArgs) Unmarshal(in []byte) error {
	msg := new(core_api.RecoverRecycleBinFileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RecoverRecycleBinFileArgs_Req_DEFAULT *core_api.RecoverRecycleBinFileReq

func (p *RecoverRecycleBinFileArgs) GetReq() *core_api.RecoverRecycleBinFileReq {
	if !p.IsSetReq() {
		return RecoverRecycleBinFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RecoverRecycleBinFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RecoverRecycleBinFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RecoverRecycleBinFileResult struct {
	Success *core_api.RecoverRecycleBinFileResp
}

var RecoverRecycleBinFileResult_Success_DEFAULT *core_api.RecoverRecycleBinFileResp

func (p *RecoverRecycleBinFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.RecoverRecycleBinFileResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RecoverRecycleBinFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RecoverRecycleBinFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RecoverRecycleBinFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RecoverRecycleBinFileResult) Unmarshal(in []byte) error {
	msg := new(core_api.RecoverRecycleBinFileResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RecoverRecycleBinFileResult) GetSuccess() *core_api.RecoverRecycleBinFileResp {
	if !p.IsSetSuccess() {
		return RecoverRecycleBinFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RecoverRecycleBinFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.RecoverRecycleBinFileResp)
}

func (p *RecoverRecycleBinFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RecoverRecycleBinFileResult) GetResult() interface{} {
	return p.Success
}

func createZoneHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreateZoneReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).CreateZone(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateZoneArgs:
		success, err := handler.(core_api.Content).CreateZone(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateZoneResult)
		realResult.Success = success
	}
	return nil
}
func newCreateZoneArgs() interface{} {
	return &CreateZoneArgs{}
}

func newCreateZoneResult() interface{} {
	return &CreateZoneResult{}
}

type CreateZoneArgs struct {
	Req *core_api.CreateZoneReq
}

func (p *CreateZoneArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CreateZoneReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateZoneArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateZoneArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateZoneArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateZoneArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreateZoneReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateZoneArgs_Req_DEFAULT *core_api.CreateZoneReq

func (p *CreateZoneArgs) GetReq() *core_api.CreateZoneReq {
	if !p.IsSetReq() {
		return CreateZoneArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateZoneArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateZoneArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateZoneResult struct {
	Success *core_api.CreateZoneResp
}

var CreateZoneResult_Success_DEFAULT *core_api.CreateZoneResp

func (p *CreateZoneResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.CreateZoneResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateZoneResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateZoneResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateZoneResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateZoneResult) Unmarshal(in []byte) error {
	msg := new(core_api.CreateZoneResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateZoneResult) GetSuccess() *core_api.CreateZoneResp {
	if !p.IsSetSuccess() {
		return CreateZoneResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateZoneResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.CreateZoneResp)
}

func (p *CreateZoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateZoneResult) GetResult() interface{} {
	return p.Success
}

func updateZoneHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateZoneReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).UpdateZone(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateZoneArgs:
		success, err := handler.(core_api.Content).UpdateZone(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateZoneResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateZoneArgs() interface{} {
	return &UpdateZoneArgs{}
}

func newUpdateZoneResult() interface{} {
	return &UpdateZoneResult{}
}

type UpdateZoneArgs struct {
	Req *core_api.UpdateZoneReq
}

func (p *UpdateZoneArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateZoneReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateZoneArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateZoneArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateZoneArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateZoneArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateZoneReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateZoneArgs_Req_DEFAULT *core_api.UpdateZoneReq

func (p *UpdateZoneArgs) GetReq() *core_api.UpdateZoneReq {
	if !p.IsSetReq() {
		return UpdateZoneArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateZoneArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateZoneArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateZoneResult struct {
	Success *core_api.UpdateZoneResp
}

var UpdateZoneResult_Success_DEFAULT *core_api.UpdateZoneResp

func (p *UpdateZoneResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.UpdateZoneResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateZoneResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateZoneResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateZoneResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateZoneResult) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateZoneResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateZoneResult) GetSuccess() *core_api.UpdateZoneResp {
	if !p.IsSetSuccess() {
		return UpdateZoneResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateZoneResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.UpdateZoneResp)
}

func (p *UpdateZoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateZoneResult) GetResult() interface{} {
	return p.Success
}

func getZoneHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetZoneReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).GetZone(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetZoneArgs:
		success, err := handler.(core_api.Content).GetZone(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetZoneResult)
		realResult.Success = success
	}
	return nil
}
func newGetZoneArgs() interface{} {
	return &GetZoneArgs{}
}

func newGetZoneResult() interface{} {
	return &GetZoneResult{}
}

type GetZoneArgs struct {
	Req *core_api.GetZoneReq
}

func (p *GetZoneArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetZoneReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetZoneArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetZoneArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetZoneArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetZoneArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetZoneReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetZoneArgs_Req_DEFAULT *core_api.GetZoneReq

func (p *GetZoneArgs) GetReq() *core_api.GetZoneReq {
	if !p.IsSetReq() {
		return GetZoneArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetZoneArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetZoneArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetZoneResult struct {
	Success *core_api.GetZoneResp
}

var GetZoneResult_Success_DEFAULT *core_api.GetZoneResp

func (p *GetZoneResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetZoneResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetZoneResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetZoneResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetZoneResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetZoneResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetZoneResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetZoneResult) GetSuccess() *core_api.GetZoneResp {
	if !p.IsSetSuccess() {
		return GetZoneResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetZoneResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetZoneResp)
}

func (p *GetZoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetZoneResult) GetResult() interface{} {
	return p.Success
}

func deleteZoneHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteZoneReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).DeleteZone(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteZoneArgs:
		success, err := handler.(core_api.Content).DeleteZone(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteZoneResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteZoneArgs() interface{} {
	return &DeleteZoneArgs{}
}

func newDeleteZoneResult() interface{} {
	return &DeleteZoneResult{}
}

type DeleteZoneArgs struct {
	Req *core_api.DeleteZoneReq
}

func (p *DeleteZoneArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeleteZoneReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteZoneArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteZoneArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteZoneArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteZoneArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteZoneReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteZoneArgs_Req_DEFAULT *core_api.DeleteZoneReq

func (p *DeleteZoneArgs) GetReq() *core_api.DeleteZoneReq {
	if !p.IsSetReq() {
		return DeleteZoneArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteZoneArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteZoneArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteZoneResult struct {
	Success *core_api.DeleteZoneResp
}

var DeleteZoneResult_Success_DEFAULT *core_api.DeleteZoneResp

func (p *DeleteZoneResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.DeleteZoneResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteZoneResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteZoneResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteZoneResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteZoneResult) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteZoneResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteZoneResult) GetSuccess() *core_api.DeleteZoneResp {
	if !p.IsSetSuccess() {
		return DeleteZoneResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteZoneResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.DeleteZoneResp)
}

func (p *DeleteZoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteZoneResult) GetResult() interface{} {
	return p.Success
}

func createShareCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreateShareCodeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).CreateShareCode(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateShareCodeArgs:
		success, err := handler.(core_api.Content).CreateShareCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateShareCodeResult)
		realResult.Success = success
	}
	return nil
}
func newCreateShareCodeArgs() interface{} {
	return &CreateShareCodeArgs{}
}

func newCreateShareCodeResult() interface{} {
	return &CreateShareCodeResult{}
}

type CreateShareCodeArgs struct {
	Req *core_api.CreateShareCodeReq
}

func (p *CreateShareCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CreateShareCodeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateShareCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateShareCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateShareCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateShareCodeArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreateShareCodeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateShareCodeArgs_Req_DEFAULT *core_api.CreateShareCodeReq

func (p *CreateShareCodeArgs) GetReq() *core_api.CreateShareCodeReq {
	if !p.IsSetReq() {
		return CreateShareCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateShareCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateShareCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateShareCodeResult struct {
	Success *core_api.CreateShareCodeResp
}

var CreateShareCodeResult_Success_DEFAULT *core_api.CreateShareCodeResp

func (p *CreateShareCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.CreateShareCodeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateShareCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateShareCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateShareCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateShareCodeResult) Unmarshal(in []byte) error {
	msg := new(core_api.CreateShareCodeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateShareCodeResult) GetSuccess() *core_api.CreateShareCodeResp {
	if !p.IsSetSuccess() {
		return CreateShareCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateShareCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.CreateShareCodeResp)
}

func (p *CreateShareCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateShareCodeResult) GetResult() interface{} {
	return p.Success
}

func getShareListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetShareListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).GetShareList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetShareListArgs:
		success, err := handler.(core_api.Content).GetShareList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetShareListResult)
		realResult.Success = success
	}
	return nil
}
func newGetShareListArgs() interface{} {
	return &GetShareListArgs{}
}

func newGetShareListResult() interface{} {
	return &GetShareListResult{}
}

type GetShareListArgs struct {
	Req *core_api.GetShareListReq
}

func (p *GetShareListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetShareListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetShareListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetShareListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetShareListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetShareListArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetShareListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetShareListArgs_Req_DEFAULT *core_api.GetShareListReq

func (p *GetShareListArgs) GetReq() *core_api.GetShareListReq {
	if !p.IsSetReq() {
		return GetShareListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetShareListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetShareListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetShareListResult struct {
	Success *core_api.GetShareListResp
}

var GetShareListResult_Success_DEFAULT *core_api.GetShareListResp

func (p *GetShareListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetShareListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetShareListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetShareListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetShareListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetShareListResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetShareListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetShareListResult) GetSuccess() *core_api.GetShareListResp {
	if !p.IsSetSuccess() {
		return GetShareListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetShareListResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetShareListResp)
}

func (p *GetShareListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetShareListResult) GetResult() interface{} {
	return p.Success
}

func deleteShareCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteShareCodeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).DeleteShareCode(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteShareCodeArgs:
		success, err := handler.(core_api.Content).DeleteShareCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteShareCodeResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteShareCodeArgs() interface{} {
	return &DeleteShareCodeArgs{}
}

func newDeleteShareCodeResult() interface{} {
	return &DeleteShareCodeResult{}
}

type DeleteShareCodeArgs struct {
	Req *core_api.DeleteShareCodeReq
}

func (p *DeleteShareCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeleteShareCodeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteShareCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteShareCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteShareCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteShareCodeArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteShareCodeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteShareCodeArgs_Req_DEFAULT *core_api.DeleteShareCodeReq

func (p *DeleteShareCodeArgs) GetReq() *core_api.DeleteShareCodeReq {
	if !p.IsSetReq() {
		return DeleteShareCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteShareCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteShareCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteShareCodeResult struct {
	Success *core_api.DeleteShareCodeResp
}

var DeleteShareCodeResult_Success_DEFAULT *core_api.DeleteShareCodeResp

func (p *DeleteShareCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.DeleteShareCodeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteShareCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteShareCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteShareCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteShareCodeResult) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteShareCodeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteShareCodeResult) GetSuccess() *core_api.DeleteShareCodeResp {
	if !p.IsSetSuccess() {
		return DeleteShareCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteShareCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.DeleteShareCodeResp)
}

func (p *DeleteShareCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteShareCodeResult) GetResult() interface{} {
	return p.Success
}

func parsingShareCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ParsingShareCodeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).ParsingShareCode(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ParsingShareCodeArgs:
		success, err := handler.(core_api.Content).ParsingShareCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ParsingShareCodeResult)
		realResult.Success = success
	}
	return nil
}
func newParsingShareCodeArgs() interface{} {
	return &ParsingShareCodeArgs{}
}

func newParsingShareCodeResult() interface{} {
	return &ParsingShareCodeResult{}
}

type ParsingShareCodeArgs struct {
	Req *core_api.ParsingShareCodeReq
}

func (p *ParsingShareCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.ParsingShareCodeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ParsingShareCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ParsingShareCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ParsingShareCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ParsingShareCodeArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ParsingShareCodeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ParsingShareCodeArgs_Req_DEFAULT *core_api.ParsingShareCodeReq

func (p *ParsingShareCodeArgs) GetReq() *core_api.ParsingShareCodeReq {
	if !p.IsSetReq() {
		return ParsingShareCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ParsingShareCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ParsingShareCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ParsingShareCodeResult struct {
	Success *core_api.ParsingShareCodeResp
}

var ParsingShareCodeResult_Success_DEFAULT *core_api.ParsingShareCodeResp

func (p *ParsingShareCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.ParsingShareCodeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ParsingShareCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ParsingShareCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ParsingShareCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ParsingShareCodeResult) Unmarshal(in []byte) error {
	msg := new(core_api.ParsingShareCodeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ParsingShareCodeResult) GetSuccess() *core_api.ParsingShareCodeResp {
	if !p.IsSetSuccess() {
		return ParsingShareCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ParsingShareCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ParsingShareCodeResp)
}

func (p *ParsingShareCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ParsingShareCodeResult) GetResult() interface{} {
	return p.Success
}

func askUploadFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.AskUploadFileReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).AskUploadFile(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AskUploadFileArgs:
		success, err := handler.(core_api.Content).AskUploadFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AskUploadFileResult)
		realResult.Success = success
	}
	return nil
}
func newAskUploadFileArgs() interface{} {
	return &AskUploadFileArgs{}
}

func newAskUploadFileResult() interface{} {
	return &AskUploadFileResult{}
}

type AskUploadFileArgs struct {
	Req *core_api.AskUploadFileReq
}

func (p *AskUploadFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.AskUploadFileReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AskUploadFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AskUploadFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AskUploadFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AskUploadFileArgs) Unmarshal(in []byte) error {
	msg := new(core_api.AskUploadFileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AskUploadFileArgs_Req_DEFAULT *core_api.AskUploadFileReq

func (p *AskUploadFileArgs) GetReq() *core_api.AskUploadFileReq {
	if !p.IsSetReq() {
		return AskUploadFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AskUploadFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AskUploadFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AskUploadFileResult struct {
	Success *core_api.AskUploadFileResp
}

var AskUploadFileResult_Success_DEFAULT *core_api.AskUploadFileResp

func (p *AskUploadFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.AskUploadFileResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AskUploadFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AskUploadFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AskUploadFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AskUploadFileResult) Unmarshal(in []byte) error {
	msg := new(core_api.AskUploadFileResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AskUploadFileResult) GetSuccess() *core_api.AskUploadFileResp {
	if !p.IsSetSuccess() {
		return AskUploadFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AskUploadFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.AskUploadFileResp)
}

func (p *AskUploadFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AskUploadFileResult) GetResult() interface{} {
	return p.Success
}

func askDownloadFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.AskDownloadFileReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).AskDownloadFile(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AskDownloadFileArgs:
		success, err := handler.(core_api.Content).AskDownloadFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AskDownloadFileResult)
		realResult.Success = success
	}
	return nil
}
func newAskDownloadFileArgs() interface{} {
	return &AskDownloadFileArgs{}
}

func newAskDownloadFileResult() interface{} {
	return &AskDownloadFileResult{}
}

type AskDownloadFileArgs struct {
	Req *core_api.AskDownloadFileReq
}

func (p *AskDownloadFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.AskDownloadFileReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AskDownloadFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AskDownloadFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AskDownloadFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AskDownloadFileArgs) Unmarshal(in []byte) error {
	msg := new(core_api.AskDownloadFileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AskDownloadFileArgs_Req_DEFAULT *core_api.AskDownloadFileReq

func (p *AskDownloadFileArgs) GetReq() *core_api.AskDownloadFileReq {
	if !p.IsSetReq() {
		return AskDownloadFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AskDownloadFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AskDownloadFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AskDownloadFileResult struct {
	Success *core_api.AskDownloadFileResp
}

var AskDownloadFileResult_Success_DEFAULT *core_api.AskDownloadFileResp

func (p *AskDownloadFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.AskDownloadFileResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AskDownloadFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AskDownloadFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AskDownloadFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AskDownloadFileResult) Unmarshal(in []byte) error {
	msg := new(core_api.AskDownloadFileResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AskDownloadFileResult) GetSuccess() *core_api.AskDownloadFileResp {
	if !p.IsSetSuccess() {
		return AskDownloadFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AskDownloadFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.AskDownloadFileResp)
}

func (p *AskDownloadFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AskDownloadFileResult) GetResult() interface{} {
	return p.Success
}

func createPostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreatePostReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).CreatePost(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreatePostArgs:
		success, err := handler.(core_api.Content).CreatePost(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreatePostResult)
		realResult.Success = success
	}
	return nil
}
func newCreatePostArgs() interface{} {
	return &CreatePostArgs{}
}

func newCreatePostResult() interface{} {
	return &CreatePostResult{}
}

type CreatePostArgs struct {
	Req *core_api.CreatePostReq
}

func (p *CreatePostArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CreatePostReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreatePostArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreatePostArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreatePostArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreatePostArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreatePostReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreatePostArgs_Req_DEFAULT *core_api.CreatePostReq

func (p *CreatePostArgs) GetReq() *core_api.CreatePostReq {
	if !p.IsSetReq() {
		return CreatePostArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreatePostArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreatePostArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreatePostResult struct {
	Success *core_api.CreatePostResp
}

var CreatePostResult_Success_DEFAULT *core_api.CreatePostResp

func (p *CreatePostResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.CreatePostResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreatePostResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreatePostResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreatePostResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreatePostResult) Unmarshal(in []byte) error {
	msg := new(core_api.CreatePostResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreatePostResult) GetSuccess() *core_api.CreatePostResp {
	if !p.IsSetSuccess() {
		return CreatePostResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreatePostResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.CreatePostResp)
}

func (p *CreatePostResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreatePostResult) GetResult() interface{} {
	return p.Success
}

func deletePostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeletePostReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).DeletePost(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeletePostArgs:
		success, err := handler.(core_api.Content).DeletePost(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeletePostResult)
		realResult.Success = success
	}
	return nil
}
func newDeletePostArgs() interface{} {
	return &DeletePostArgs{}
}

func newDeletePostResult() interface{} {
	return &DeletePostResult{}
}

type DeletePostArgs struct {
	Req *core_api.DeletePostReq
}

func (p *DeletePostArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeletePostReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeletePostArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeletePostArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeletePostArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeletePostArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeletePostReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeletePostArgs_Req_DEFAULT *core_api.DeletePostReq

func (p *DeletePostArgs) GetReq() *core_api.DeletePostReq {
	if !p.IsSetReq() {
		return DeletePostArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeletePostArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeletePostArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeletePostResult struct {
	Success *core_api.DeletePostResp
}

var DeletePostResult_Success_DEFAULT *core_api.DeletePostResp

func (p *DeletePostResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.DeletePostResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeletePostResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeletePostResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeletePostResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeletePostResult) Unmarshal(in []byte) error {
	msg := new(core_api.DeletePostResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeletePostResult) GetSuccess() *core_api.DeletePostResp {
	if !p.IsSetSuccess() {
		return DeletePostResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeletePostResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.DeletePostResp)
}

func (p *DeletePostResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeletePostResult) GetResult() interface{} {
	return p.Success
}

func updatePostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdatePostReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).UpdatePost(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdatePostArgs:
		success, err := handler.(core_api.Content).UpdatePost(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdatePostResult)
		realResult.Success = success
	}
	return nil
}
func newUpdatePostArgs() interface{} {
	return &UpdatePostArgs{}
}

func newUpdatePostResult() interface{} {
	return &UpdatePostResult{}
}

type UpdatePostArgs struct {
	Req *core_api.UpdatePostReq
}

func (p *UpdatePostArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdatePostReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdatePostArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdatePostArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdatePostArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdatePostArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdatePostReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdatePostArgs_Req_DEFAULT *core_api.UpdatePostReq

func (p *UpdatePostArgs) GetReq() *core_api.UpdatePostReq {
	if !p.IsSetReq() {
		return UpdatePostArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdatePostArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdatePostArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdatePostResult struct {
	Success *core_api.UpdatePostResp
}

var UpdatePostResult_Success_DEFAULT *core_api.UpdatePostResp

func (p *UpdatePostResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.UpdatePostResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdatePostResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdatePostResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdatePostResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdatePostResult) Unmarshal(in []byte) error {
	msg := new(core_api.UpdatePostResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdatePostResult) GetSuccess() *core_api.UpdatePostResp {
	if !p.IsSetSuccess() {
		return UpdatePostResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdatePostResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.UpdatePostResp)
}

func (p *UpdatePostResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdatePostResult) GetResult() interface{} {
	return p.Success
}

func getPostsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetPostsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).GetPosts(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetPostsArgs:
		success, err := handler.(core_api.Content).GetPosts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetPostsResult)
		realResult.Success = success
	}
	return nil
}
func newGetPostsArgs() interface{} {
	return &GetPostsArgs{}
}

func newGetPostsResult() interface{} {
	return &GetPostsResult{}
}

type GetPostsArgs struct {
	Req *core_api.GetPostsReq
}

func (p *GetPostsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetPostsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetPostsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetPostsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetPostsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetPostsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetPostsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetPostsArgs_Req_DEFAULT *core_api.GetPostsReq

func (p *GetPostsArgs) GetReq() *core_api.GetPostsReq {
	if !p.IsSetReq() {
		return GetPostsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetPostsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetPostsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetPostsResult struct {
	Success *core_api.GetPostsResp
}

var GetPostsResult_Success_DEFAULT *core_api.GetPostsResp

func (p *GetPostsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetPostsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetPostsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetPostsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetPostsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetPostsResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetPostsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetPostsResult) GetSuccess() *core_api.GetPostsResp {
	if !p.IsSetSuccess() {
		return GetPostsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetPostsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetPostsResp)
}

func (p *GetPostsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPostsResult) GetResult() interface{} {
	return p.Success
}

func getPostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetPostReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).GetPost(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetPostArgs:
		success, err := handler.(core_api.Content).GetPost(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetPostResult)
		realResult.Success = success
	}
	return nil
}
func newGetPostArgs() interface{} {
	return &GetPostArgs{}
}

func newGetPostResult() interface{} {
	return &GetPostResult{}
}

type GetPostArgs struct {
	Req *core_api.GetPostReq
}

func (p *GetPostArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetPostReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetPostArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetPostArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetPostArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetPostArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetPostReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetPostArgs_Req_DEFAULT *core_api.GetPostReq

func (p *GetPostArgs) GetReq() *core_api.GetPostReq {
	if !p.IsSetReq() {
		return GetPostArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetPostArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetPostArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetPostResult struct {
	Success *core_api.GetPostResp
}

var GetPostResult_Success_DEFAULT *core_api.GetPostResp

func (p *GetPostResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetPostResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetPostResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetPostResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetPostResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetPostResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetPostResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetPostResult) GetSuccess() *core_api.GetPostResp {
	if !p.IsSetSuccess() {
		return GetPostResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetPostResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetPostResp)
}

func (p *GetPostResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPostResult) GetResult() interface{} {
	return p.Success
}

func getRecommendByUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetRecommendByUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).GetRecommendByUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetRecommendByUserArgs:
		success, err := handler.(core_api.Content).GetRecommendByUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetRecommendByUserResult)
		realResult.Success = success
	}
	return nil
}
func newGetRecommendByUserArgs() interface{} {
	return &GetRecommendByUserArgs{}
}

func newGetRecommendByUserResult() interface{} {
	return &GetRecommendByUserResult{}
}

type GetRecommendByUserArgs struct {
	Req *core_api.GetRecommendByUserReq
}

func (p *GetRecommendByUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetRecommendByUserReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetRecommendByUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetRecommendByUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetRecommendByUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetRecommendByUserArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetRecommendByUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetRecommendByUserArgs_Req_DEFAULT *core_api.GetRecommendByUserReq

func (p *GetRecommendByUserArgs) GetReq() *core_api.GetRecommendByUserReq {
	if !p.IsSetReq() {
		return GetRecommendByUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetRecommendByUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetRecommendByUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetRecommendByUserResult struct {
	Success *core_api.GetRecommendByUserResp
}

var GetRecommendByUserResult_Success_DEFAULT *core_api.GetRecommendByUserResp

func (p *GetRecommendByUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetRecommendByUserResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetRecommendByUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetRecommendByUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetRecommendByUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetRecommendByUserResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetRecommendByUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetRecommendByUserResult) GetSuccess() *core_api.GetRecommendByUserResp {
	if !p.IsSetSuccess() {
		return GetRecommendByUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetRecommendByUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetRecommendByUserResp)
}

func (p *GetRecommendByUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetRecommendByUserResult) GetResult() interface{} {
	return p.Success
}

func getRecommendByItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetRecommendByItemReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).GetRecommendByItem(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetRecommendByItemArgs:
		success, err := handler.(core_api.Content).GetRecommendByItem(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetRecommendByItemResult)
		realResult.Success = success
	}
	return nil
}
func newGetRecommendByItemArgs() interface{} {
	return &GetRecommendByItemArgs{}
}

func newGetRecommendByItemResult() interface{} {
	return &GetRecommendByItemResult{}
}

type GetRecommendByItemArgs struct {
	Req *core_api.GetRecommendByItemReq
}

func (p *GetRecommendByItemArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetRecommendByItemReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetRecommendByItemArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetRecommendByItemArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetRecommendByItemArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetRecommendByItemArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetRecommendByItemReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetRecommendByItemArgs_Req_DEFAULT *core_api.GetRecommendByItemReq

func (p *GetRecommendByItemArgs) GetReq() *core_api.GetRecommendByItemReq {
	if !p.IsSetReq() {
		return GetRecommendByItemArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetRecommendByItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetRecommendByItemArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetRecommendByItemResult struct {
	Success *core_api.GetRecommendByItemResp
}

var GetRecommendByItemResult_Success_DEFAULT *core_api.GetRecommendByItemResp

func (p *GetRecommendByItemResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetRecommendByItemResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetRecommendByItemResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetRecommendByItemResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetRecommendByItemResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetRecommendByItemResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetRecommendByItemResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetRecommendByItemResult) GetSuccess() *core_api.GetRecommendByItemResp {
	if !p.IsSetSuccess() {
		return GetRecommendByItemResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetRecommendByItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetRecommendByItemResp)
}

func (p *GetRecommendByItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetRecommendByItemResult) GetResult() interface{} {
	return p.Success
}

func createFeedBackHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreateFeedBackReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).CreateFeedBack(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateFeedBackArgs:
		success, err := handler.(core_api.Content).CreateFeedBack(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateFeedBackResult)
		realResult.Success = success
	}
	return nil
}
func newCreateFeedBackArgs() interface{} {
	return &CreateFeedBackArgs{}
}

func newCreateFeedBackResult() interface{} {
	return &CreateFeedBackResult{}
}

type CreateFeedBackArgs struct {
	Req *core_api.CreateFeedBackReq
}

func (p *CreateFeedBackArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CreateFeedBackReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateFeedBackArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateFeedBackArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateFeedBackArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateFeedBackArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreateFeedBackReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateFeedBackArgs_Req_DEFAULT *core_api.CreateFeedBackReq

func (p *CreateFeedBackArgs) GetReq() *core_api.CreateFeedBackReq {
	if !p.IsSetReq() {
		return CreateFeedBackArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateFeedBackArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateFeedBackArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateFeedBackResult struct {
	Success *core_api.CreateFeedBackResp
}

var CreateFeedBackResult_Success_DEFAULT *core_api.CreateFeedBackResp

func (p *CreateFeedBackResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.CreateFeedBackResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateFeedBackResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateFeedBackResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateFeedBackResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateFeedBackResult) Unmarshal(in []byte) error {
	msg := new(core_api.CreateFeedBackResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateFeedBackResult) GetSuccess() *core_api.CreateFeedBackResp {
	if !p.IsSetSuccess() {
		return CreateFeedBackResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateFeedBackResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.CreateFeedBackResp)
}

func (p *CreateFeedBackResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateFeedBackResult) GetResult() interface{} {
	return p.Success
}

func getPopularRecommendHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetPopularRecommendReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).GetPopularRecommend(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetPopularRecommendArgs:
		success, err := handler.(core_api.Content).GetPopularRecommend(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetPopularRecommendResult)
		realResult.Success = success
	}
	return nil
}
func newGetPopularRecommendArgs() interface{} {
	return &GetPopularRecommendArgs{}
}

func newGetPopularRecommendResult() interface{} {
	return &GetPopularRecommendResult{}
}

type GetPopularRecommendArgs struct {
	Req *core_api.GetPopularRecommendReq
}

func (p *GetPopularRecommendArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetPopularRecommendReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetPopularRecommendArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetPopularRecommendArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetPopularRecommendArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetPopularRecommendArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetPopularRecommendReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetPopularRecommendArgs_Req_DEFAULT *core_api.GetPopularRecommendReq

func (p *GetPopularRecommendArgs) GetReq() *core_api.GetPopularRecommendReq {
	if !p.IsSetReq() {
		return GetPopularRecommendArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetPopularRecommendArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetPopularRecommendArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetPopularRecommendResult struct {
	Success *core_api.GetPopularRecommendResp
}

var GetPopularRecommendResult_Success_DEFAULT *core_api.GetPopularRecommendResp

func (p *GetPopularRecommendResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetPopularRecommendResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetPopularRecommendResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetPopularRecommendResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetPopularRecommendResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetPopularRecommendResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetPopularRecommendResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetPopularRecommendResult) GetSuccess() *core_api.GetPopularRecommendResp {
	if !p.IsSetSuccess() {
		return GetPopularRecommendResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetPopularRecommendResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetPopularRecommendResp)
}

func (p *GetPopularRecommendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPopularRecommendResult) GetResult() interface{} {
	return p.Success
}

func getLatestRecommendHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetLatestRecommendReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).GetLatestRecommend(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetLatestRecommendArgs:
		success, err := handler.(core_api.Content).GetLatestRecommend(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetLatestRecommendResult)
		realResult.Success = success
	}
	return nil
}
func newGetLatestRecommendArgs() interface{} {
	return &GetLatestRecommendArgs{}
}

func newGetLatestRecommendResult() interface{} {
	return &GetLatestRecommendResult{}
}

type GetLatestRecommendArgs struct {
	Req *core_api.GetLatestRecommendReq
}

func (p *GetLatestRecommendArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetLatestRecommendReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetLatestRecommendArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetLatestRecommendArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetLatestRecommendArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetLatestRecommendArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetLatestRecommendReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetLatestRecommendArgs_Req_DEFAULT *core_api.GetLatestRecommendReq

func (p *GetLatestRecommendArgs) GetReq() *core_api.GetLatestRecommendReq {
	if !p.IsSetReq() {
		return GetLatestRecommendArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetLatestRecommendArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetLatestRecommendArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetLatestRecommendResult struct {
	Success *core_api.GetLatestRecommendResp
}

var GetLatestRecommendResult_Success_DEFAULT *core_api.GetLatestRecommendResp

func (p *GetLatestRecommendResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetLatestRecommendResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetLatestRecommendResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetLatestRecommendResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetLatestRecommendResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetLatestRecommendResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetLatestRecommendResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetLatestRecommendResult) GetSuccess() *core_api.GetLatestRecommendResp {
	if !p.IsSetSuccess() {
		return GetLatestRecommendResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetLatestRecommendResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetLatestRecommendResp)
}

func (p *GetLatestRecommendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetLatestRecommendResult) GetResult() interface{} {
	return p.Success
}

func createProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreateProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).CreateProduct(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateProductArgs:
		success, err := handler.(core_api.Content).CreateProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateProductResult)
		realResult.Success = success
	}
	return nil
}
func newCreateProductArgs() interface{} {
	return &CreateProductArgs{}
}

func newCreateProductResult() interface{} {
	return &CreateProductResult{}
}

type CreateProductArgs struct {
	Req *core_api.CreateProductReq
}

func (p *CreateProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CreateProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateProductArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreateProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateProductArgs_Req_DEFAULT *core_api.CreateProductReq

func (p *CreateProductArgs) GetReq() *core_api.CreateProductReq {
	if !p.IsSetReq() {
		return CreateProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateProductResult struct {
	Success *core_api.CreateProductResp
}

var CreateProductResult_Success_DEFAULT *core_api.CreateProductResp

func (p *CreateProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.CreateProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateProductResult) Unmarshal(in []byte) error {
	msg := new(core_api.CreateProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateProductResult) GetSuccess() *core_api.CreateProductResp {
	if !p.IsSetSuccess() {
		return CreateProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.CreateProductResp)
}

func (p *CreateProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateProductResult) GetResult() interface{} {
	return p.Success
}

func getProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).GetProduct(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetProductArgs:
		success, err := handler.(core_api.Content).GetProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetProductResult)
		realResult.Success = success
	}
	return nil
}
func newGetProductArgs() interface{} {
	return &GetProductArgs{}
}

func newGetProductResult() interface{} {
	return &GetProductResult{}
}

type GetProductArgs struct {
	Req *core_api.GetProductReq
}

func (p *GetProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetProductArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetProductArgs_Req_DEFAULT *core_api.GetProductReq

func (p *GetProductArgs) GetReq() *core_api.GetProductReq {
	if !p.IsSetReq() {
		return GetProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetProductResult struct {
	Success *core_api.GetProductResp
}

var GetProductResult_Success_DEFAULT *core_api.GetProductResp

func (p *GetProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetProductResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetProductResult) GetSuccess() *core_api.GetProductResp {
	if !p.IsSetSuccess() {
		return GetProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetProductResp)
}

func (p *GetProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetProductResult) GetResult() interface{} {
	return p.Success
}

func getProductsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetProductsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).GetProducts(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetProductsArgs:
		success, err := handler.(core_api.Content).GetProducts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetProductsResult)
		realResult.Success = success
	}
	return nil
}
func newGetProductsArgs() interface{} {
	return &GetProductsArgs{}
}

func newGetProductsResult() interface{} {
	return &GetProductsResult{}
}

type GetProductsArgs struct {
	Req *core_api.GetProductsReq
}

func (p *GetProductsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetProductsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetProductsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetProductsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetProductsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetProductsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetProductsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetProductsArgs_Req_DEFAULT *core_api.GetProductsReq

func (p *GetProductsArgs) GetReq() *core_api.GetProductsReq {
	if !p.IsSetReq() {
		return GetProductsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetProductsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetProductsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetProductsResult struct {
	Success *core_api.GetProductsResp
}

var GetProductsResult_Success_DEFAULT *core_api.GetProductsResp

func (p *GetProductsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetProductsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetProductsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetProductsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetProductsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetProductsResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetProductsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetProductsResult) GetSuccess() *core_api.GetProductsResp {
	if !p.IsSetSuccess() {
		return GetProductsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetProductsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetProductsResp)
}

func (p *GetProductsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetProductsResult) GetResult() interface{} {
	return p.Success
}

func updateProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).UpdateProduct(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateProductArgs:
		success, err := handler.(core_api.Content).UpdateProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateProductResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateProductArgs() interface{} {
	return &UpdateProductArgs{}
}

func newUpdateProductResult() interface{} {
	return &UpdateProductResult{}
}

type UpdateProductArgs struct {
	Req *core_api.UpdateProductReq
}

func (p *UpdateProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateProductArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateProductArgs_Req_DEFAULT *core_api.UpdateProductReq

func (p *UpdateProductArgs) GetReq() *core_api.UpdateProductReq {
	if !p.IsSetReq() {
		return UpdateProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateProductResult struct {
	Success *core_api.UpdateProductResp
}

var UpdateProductResult_Success_DEFAULT *core_api.UpdateProductResp

func (p *UpdateProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.UpdateProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateProductResult) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateProductResult) GetSuccess() *core_api.UpdateProductResp {
	if !p.IsSetSuccess() {
		return UpdateProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.UpdateProductResp)
}

func (p *UpdateProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateProductResult) GetResult() interface{} {
	return p.Success
}

func deleteProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Content).DeleteProduct(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteProductArgs:
		success, err := handler.(core_api.Content).DeleteProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteProductResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteProductArgs() interface{} {
	return &DeleteProductArgs{}
}

func newDeleteProductResult() interface{} {
	return &DeleteProductResult{}
}

type DeleteProductArgs struct {
	Req *core_api.DeleteProductReq
}

func (p *DeleteProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeleteProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteProductArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteProductArgs_Req_DEFAULT *core_api.DeleteProductReq

func (p *DeleteProductArgs) GetReq() *core_api.DeleteProductReq {
	if !p.IsSetReq() {
		return DeleteProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteProductResult struct {
	Success *core_api.DeleteProductResp
}

var DeleteProductResult_Success_DEFAULT *core_api.DeleteProductResp

func (p *DeleteProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.DeleteProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteProductResult) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteProductResult) GetSuccess() *core_api.DeleteProductResp {
	if !p.IsSetSuccess() {
		return DeleteProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.DeleteProductResp)
}

func (p *DeleteProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteProductResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UpdateUser(ctx context.Context, Req *core_api.UpdateUserReq) (r *core_api.UpdateUserResp, err error) {
	var _args UpdateUserArgs
	_args.Req = Req
	var _result UpdateUserResult
	if err = p.c.Call(ctx, "UpdateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchUser(ctx context.Context, Req *core_api.SearchUserReq) (r *core_api.SearchUserResp, err error) {
	var _args SearchUserArgs
	_args.Req = Req
	var _result SearchUserResult
	if err = p.c.Call(ctx, "SearchUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUser(ctx context.Context, Req *core_api.GetUserReq) (r *core_api.GetUserResp, err error) {
	var _args GetUserArgs
	_args.Req = Req
	var _result GetUserResult
	if err = p.c.Call(ctx, "GetUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserDetail(ctx context.Context, Req *core_api.GetUserDetailReq) (r *core_api.GetUserDetailResp, err error) {
	var _args GetUserDetailArgs
	_args.Req = Req
	var _result GetUserDetailResult
	if err = p.c.Call(ctx, "GetUserDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AskUploadAvatar(ctx context.Context, Req *core_api.AskUploadAvatarReq) (r *core_api.AskUploadAvatarResp, err error) {
	var _args AskUploadAvatarArgs
	_args.Req = Req
	var _result AskUploadAvatarResult
	if err = p.c.Call(ctx, "AskUploadAvatar", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPublicFile(ctx context.Context, Req *core_api.GetPublicFilesReq) (r *core_api.GetPublicFilesResp, err error) {
	var _args GetPublicFileArgs
	_args.Req = Req
	var _result GetPublicFileResult
	if err = p.c.Call(ctx, "GetPublicFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPrivateFile(ctx context.Context, Req *core_api.GetPrivateFileReq) (r *core_api.GetPrivateFileResp, err error) {
	var _args GetPrivateFileArgs
	_args.Req = Req
	var _result GetPrivateFileResult
	if err = p.c.Call(ctx, "GetPrivateFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPrivateFiles(ctx context.Context, Req *core_api.GetPrivateFilesReq) (r *core_api.GetPrivateFilesResp, err error) {
	var _args GetPrivateFilesArgs
	_args.Req = Req
	var _result GetPrivateFilesResult
	if err = p.c.Call(ctx, "GetPrivateFiles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPublicFiles(ctx context.Context, Req *core_api.GetPublicFilesReq) (r *core_api.GetPublicFilesResp, err error) {
	var _args GetPublicFilesArgs
	_args.Req = Req
	var _result GetPublicFilesResult
	if err = p.c.Call(ctx, "GetPublicFiles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRecycleBinFiles(ctx context.Context, Req *core_api.GetRecycleBinFilesReq) (r *core_api.GetRecycleBinFilesResp, err error) {
	var _args GetRecycleBinFilesArgs
	_args.Req = Req
	var _result GetRecycleBinFilesResult
	if err = p.c.Call(ctx, "GetRecycleBinFiles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFileBySharingCode(ctx context.Context, Req *core_api.GetFileBySharingCodeReq) (r *core_api.GetFileBySharingCodeResp, err error) {
	var _args GetFileBySharingCodeArgs
	_args.Req = Req
	var _result GetFileBySharingCodeResult
	if err = p.c.Call(ctx, "GetFileBySharingCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateFile(ctx context.Context, Req *core_api.CreateFileReq) (r *core_api.CreateFileResp, err error) {
	var _args CreateFileArgs
	_args.Req = Req
	var _result CreateFileResult
	if err = p.c.Call(ctx, "CreateFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateFile(ctx context.Context, Req *core_api.UpdateFileReq) (r *core_api.UpdateFileResp, err error) {
	var _args UpdateFileArgs
	_args.Req = Req
	var _result UpdateFileResult
	if err = p.c.Call(ctx, "UpdateFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MoveFile(ctx context.Context, Req *core_api.MoveFileReq) (r *core_api.MoveFileResp, err error) {
	var _args MoveFileArgs
	_args.Req = Req
	var _result MoveFileResult
	if err = p.c.Call(ctx, "MoveFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SaveFileToPrivateSpace(ctx context.Context, Req *core_api.SaveFileToPrivateSpaceReq) (r *core_api.SaveFileToPrivateSpaceResp, err error) {
	var _args SaveFileToPrivateSpaceArgs
	_args.Req = Req
	var _result SaveFileToPrivateSpaceResult
	if err = p.c.Call(ctx, "SaveFileToPrivateSpace", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddFileToPublicSpace(ctx context.Context, Req *core_api.AddFileToPublicSpaceReq) (r *core_api.AddFileToPublicSpaceResp, err error) {
	var _args AddFileToPublicSpaceArgs
	_args.Req = Req
	var _result AddFileToPublicSpaceResult
	if err = p.c.Call(ctx, "AddFileToPublicSpace", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CompletelyRemoveFile(ctx context.Context, Req *core_api.CompletelyRemoveFileReq) (r *core_api.CompletelyRemoveFileReq, err error) {
	var _args CompletelyRemoveFileArgs
	_args.Req = Req
	var _result CompletelyRemoveFileResult
	if err = p.c.Call(ctx, "CompletelyRemoveFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteFile(ctx context.Context, Req *core_api.DeleteFileReq) (r *core_api.DeleteFileResp, err error) {
	var _args DeleteFileArgs
	_args.Req = Req
	var _result DeleteFileResult
	if err = p.c.Call(ctx, "DeleteFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RecoverRecycleBinFile(ctx context.Context, Req *core_api.RecoverRecycleBinFileReq) (r *core_api.RecoverRecycleBinFileResp, err error) {
	var _args RecoverRecycleBinFileArgs
	_args.Req = Req
	var _result RecoverRecycleBinFileResult
	if err = p.c.Call(ctx, "RecoverRecycleBinFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateZone(ctx context.Context, Req *core_api.CreateZoneReq) (r *core_api.CreateZoneResp, err error) {
	var _args CreateZoneArgs
	_args.Req = Req
	var _result CreateZoneResult
	if err = p.c.Call(ctx, "CreateZone", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateZone(ctx context.Context, Req *core_api.UpdateZoneReq) (r *core_api.UpdateZoneResp, err error) {
	var _args UpdateZoneArgs
	_args.Req = Req
	var _result UpdateZoneResult
	if err = p.c.Call(ctx, "UpdateZone", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetZone(ctx context.Context, Req *core_api.GetZoneReq) (r *core_api.GetZoneResp, err error) {
	var _args GetZoneArgs
	_args.Req = Req
	var _result GetZoneResult
	if err = p.c.Call(ctx, "GetZone", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteZone(ctx context.Context, Req *core_api.DeleteZoneReq) (r *core_api.DeleteZoneResp, err error) {
	var _args DeleteZoneArgs
	_args.Req = Req
	var _result DeleteZoneResult
	if err = p.c.Call(ctx, "DeleteZone", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateShareCode(ctx context.Context, Req *core_api.CreateShareCodeReq) (r *core_api.CreateShareCodeResp, err error) {
	var _args CreateShareCodeArgs
	_args.Req = Req
	var _result CreateShareCodeResult
	if err = p.c.Call(ctx, "CreateShareCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetShareList(ctx context.Context, Req *core_api.GetShareListReq) (r *core_api.GetShareListResp, err error) {
	var _args GetShareListArgs
	_args.Req = Req
	var _result GetShareListResult
	if err = p.c.Call(ctx, "GetShareList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteShareCode(ctx context.Context, Req *core_api.DeleteShareCodeReq) (r *core_api.DeleteShareCodeResp, err error) {
	var _args DeleteShareCodeArgs
	_args.Req = Req
	var _result DeleteShareCodeResult
	if err = p.c.Call(ctx, "DeleteShareCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ParsingShareCode(ctx context.Context, Req *core_api.ParsingShareCodeReq) (r *core_api.ParsingShareCodeResp, err error) {
	var _args ParsingShareCodeArgs
	_args.Req = Req
	var _result ParsingShareCodeResult
	if err = p.c.Call(ctx, "ParsingShareCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AskUploadFile(ctx context.Context, Req *core_api.AskUploadFileReq) (r *core_api.AskUploadFileResp, err error) {
	var _args AskUploadFileArgs
	_args.Req = Req
	var _result AskUploadFileResult
	if err = p.c.Call(ctx, "AskUploadFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AskDownloadFile(ctx context.Context, Req *core_api.AskDownloadFileReq) (r *core_api.AskDownloadFileResp, err error) {
	var _args AskDownloadFileArgs
	_args.Req = Req
	var _result AskDownloadFileResult
	if err = p.c.Call(ctx, "AskDownloadFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreatePost(ctx context.Context, Req *core_api.CreatePostReq) (r *core_api.CreatePostResp, err error) {
	var _args CreatePostArgs
	_args.Req = Req
	var _result CreatePostResult
	if err = p.c.Call(ctx, "CreatePost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeletePost(ctx context.Context, Req *core_api.DeletePostReq) (r *core_api.DeletePostResp, err error) {
	var _args DeletePostArgs
	_args.Req = Req
	var _result DeletePostResult
	if err = p.c.Call(ctx, "DeletePost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdatePost(ctx context.Context, Req *core_api.UpdatePostReq) (r *core_api.UpdatePostResp, err error) {
	var _args UpdatePostArgs
	_args.Req = Req
	var _result UpdatePostResult
	if err = p.c.Call(ctx, "UpdatePost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPosts(ctx context.Context, Req *core_api.GetPostsReq) (r *core_api.GetPostsResp, err error) {
	var _args GetPostsArgs
	_args.Req = Req
	var _result GetPostsResult
	if err = p.c.Call(ctx, "GetPosts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPost(ctx context.Context, Req *core_api.GetPostReq) (r *core_api.GetPostResp, err error) {
	var _args GetPostArgs
	_args.Req = Req
	var _result GetPostResult
	if err = p.c.Call(ctx, "GetPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRecommendByUser(ctx context.Context, Req *core_api.GetRecommendByUserReq) (r *core_api.GetRecommendByUserResp, err error) {
	var _args GetRecommendByUserArgs
	_args.Req = Req
	var _result GetRecommendByUserResult
	if err = p.c.Call(ctx, "GetRecommendByUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRecommendByItem(ctx context.Context, Req *core_api.GetRecommendByItemReq) (r *core_api.GetRecommendByItemResp, err error) {
	var _args GetRecommendByItemArgs
	_args.Req = Req
	var _result GetRecommendByItemResult
	if err = p.c.Call(ctx, "GetRecommendByItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateFeedBack(ctx context.Context, Req *core_api.CreateFeedBackReq) (r *core_api.CreateFeedBackResp, err error) {
	var _args CreateFeedBackArgs
	_args.Req = Req
	var _result CreateFeedBackResult
	if err = p.c.Call(ctx, "CreateFeedBack", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPopularRecommend(ctx context.Context, Req *core_api.GetPopularRecommendReq) (r *core_api.GetPopularRecommendResp, err error) {
	var _args GetPopularRecommendArgs
	_args.Req = Req
	var _result GetPopularRecommendResult
	if err = p.c.Call(ctx, "GetPopularRecommend", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLatestRecommend(ctx context.Context, Req *core_api.GetLatestRecommendReq) (r *core_api.GetLatestRecommendResp, err error) {
	var _args GetLatestRecommendArgs
	_args.Req = Req
	var _result GetLatestRecommendResult
	if err = p.c.Call(ctx, "GetLatestRecommend", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateProduct(ctx context.Context, Req *core_api.CreateProductReq) (r *core_api.CreateProductResp, err error) {
	var _args CreateProductArgs
	_args.Req = Req
	var _result CreateProductResult
	if err = p.c.Call(ctx, "CreateProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProduct(ctx context.Context, Req *core_api.GetProductReq) (r *core_api.GetProductResp, err error) {
	var _args GetProductArgs
	_args.Req = Req
	var _result GetProductResult
	if err = p.c.Call(ctx, "GetProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProducts(ctx context.Context, Req *core_api.GetProductsReq) (r *core_api.GetProductsResp, err error) {
	var _args GetProductsArgs
	_args.Req = Req
	var _result GetProductsResult
	if err = p.c.Call(ctx, "GetProducts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateProduct(ctx context.Context, Req *core_api.UpdateProductReq) (r *core_api.UpdateProductResp, err error) {
	var _args UpdateProductArgs
	_args.Req = Req
	var _result UpdateProductResult
	if err = p.c.Call(ctx, "UpdateProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteProduct(ctx context.Context, Req *core_api.DeleteProductReq) (r *core_api.DeleteProductResp, err error) {
	var _args DeleteProductArgs
	_args.Req = Req
	var _result DeleteProductResult
	if err = p.c.Call(ctx, "DeleteProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
