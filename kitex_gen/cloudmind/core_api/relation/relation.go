// Code generated by Kitex v0.9.0. DO NOT EDIT.

package relation

import (
	"context"
	"errors"
	core_api "github.com/CloudStriver/service-idl-gen-go/kitex_gen/cloudmind/core_api"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateRelation": kitex.NewMethodInfo(
		createRelationHandler,
		newCreateRelationArgs,
		newCreateRelationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetFromRelations": kitex.NewMethodInfo(
		getFromRelationsHandler,
		newGetFromRelationsArgs,
		newGetFromRelationsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetToRelations": kitex.NewMethodInfo(
		getToRelationsHandler,
		newGetToRelationsArgs,
		newGetToRelationsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetRelation": kitex.NewMethodInfo(
		getRelationHandler,
		newGetRelationArgs,
		newGetRelationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteRelation": kitex.NewMethodInfo(
		deleteRelationHandler,
		newDeleteRelationArgs,
		newDeleteRelationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	relationServiceInfo                = NewServiceInfo()
	relationServiceInfoForClient       = NewServiceInfoForClient()
	relationServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return relationServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return relationServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return relationServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "relation"
	handlerType := (*core_api.Relation)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "cloudmind.core_api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.0",
		Extra:           extra,
	}
	return svcInfo
}

func createRelationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreateRelationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Relation).CreateRelation(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateRelationArgs:
		success, err := handler.(core_api.Relation).CreateRelation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateRelationResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateRelationArgs() interface{} {
	return &CreateRelationArgs{}
}

func newCreateRelationResult() interface{} {
	return &CreateRelationResult{}
}

type CreateRelationArgs struct {
	Req *core_api.CreateRelationReq
}

func (p *CreateRelationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CreateRelationReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateRelationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateRelationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateRelationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateRelationArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreateRelationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateRelationArgs_Req_DEFAULT *core_api.CreateRelationReq

func (p *CreateRelationArgs) GetReq() *core_api.CreateRelationReq {
	if !p.IsSetReq() {
		return CreateRelationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateRelationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateRelationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateRelationResult struct {
	Success *core_api.CreateRelationResp
}

var CreateRelationResult_Success_DEFAULT *core_api.CreateRelationResp

func (p *CreateRelationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.CreateRelationResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateRelationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateRelationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateRelationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateRelationResult) Unmarshal(in []byte) error {
	msg := new(core_api.CreateRelationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateRelationResult) GetSuccess() *core_api.CreateRelationResp {
	if !p.IsSetSuccess() {
		return CreateRelationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateRelationResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.CreateRelationResp)
}

func (p *CreateRelationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateRelationResult) GetResult() interface{} {
	return p.Success
}

func getFromRelationsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetFromRelationsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Relation).GetFromRelations(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetFromRelationsArgs:
		success, err := handler.(core_api.Relation).GetFromRelations(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFromRelationsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetFromRelationsArgs() interface{} {
	return &GetFromRelationsArgs{}
}

func newGetFromRelationsResult() interface{} {
	return &GetFromRelationsResult{}
}

type GetFromRelationsArgs struct {
	Req *core_api.GetFromRelationsReq
}

func (p *GetFromRelationsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetFromRelationsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFromRelationsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFromRelationsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFromRelationsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFromRelationsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetFromRelationsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFromRelationsArgs_Req_DEFAULT *core_api.GetFromRelationsReq

func (p *GetFromRelationsArgs) GetReq() *core_api.GetFromRelationsReq {
	if !p.IsSetReq() {
		return GetFromRelationsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFromRelationsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFromRelationsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFromRelationsResult struct {
	Success *core_api.GetFromRelationsResp
}

var GetFromRelationsResult_Success_DEFAULT *core_api.GetFromRelationsResp

func (p *GetFromRelationsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetFromRelationsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFromRelationsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFromRelationsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFromRelationsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFromRelationsResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetFromRelationsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFromRelationsResult) GetSuccess() *core_api.GetFromRelationsResp {
	if !p.IsSetSuccess() {
		return GetFromRelationsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFromRelationsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetFromRelationsResp)
}

func (p *GetFromRelationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFromRelationsResult) GetResult() interface{} {
	return p.Success
}

func getToRelationsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetToRelationsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Relation).GetToRelations(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetToRelationsArgs:
		success, err := handler.(core_api.Relation).GetToRelations(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetToRelationsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetToRelationsArgs() interface{} {
	return &GetToRelationsArgs{}
}

func newGetToRelationsResult() interface{} {
	return &GetToRelationsResult{}
}

type GetToRelationsArgs struct {
	Req *core_api.GetToRelationsReq
}

func (p *GetToRelationsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetToRelationsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetToRelationsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetToRelationsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetToRelationsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetToRelationsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetToRelationsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetToRelationsArgs_Req_DEFAULT *core_api.GetToRelationsReq

func (p *GetToRelationsArgs) GetReq() *core_api.GetToRelationsReq {
	if !p.IsSetReq() {
		return GetToRelationsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetToRelationsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetToRelationsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetToRelationsResult struct {
	Success *core_api.GetToRelationsResp
}

var GetToRelationsResult_Success_DEFAULT *core_api.GetToRelationsResp

func (p *GetToRelationsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetToRelationsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetToRelationsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetToRelationsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetToRelationsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetToRelationsResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetToRelationsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetToRelationsResult) GetSuccess() *core_api.GetToRelationsResp {
	if !p.IsSetSuccess() {
		return GetToRelationsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetToRelationsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetToRelationsResp)
}

func (p *GetToRelationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetToRelationsResult) GetResult() interface{} {
	return p.Success
}

func getRelationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetRelationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Relation).GetRelation(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetRelationArgs:
		success, err := handler.(core_api.Relation).GetRelation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetRelationResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetRelationArgs() interface{} {
	return &GetRelationArgs{}
}

func newGetRelationResult() interface{} {
	return &GetRelationResult{}
}

type GetRelationArgs struct {
	Req *core_api.GetRelationReq
}

func (p *GetRelationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetRelationReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetRelationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetRelationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetRelationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetRelationArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetRelationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetRelationArgs_Req_DEFAULT *core_api.GetRelationReq

func (p *GetRelationArgs) GetReq() *core_api.GetRelationReq {
	if !p.IsSetReq() {
		return GetRelationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetRelationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetRelationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetRelationResult struct {
	Success *core_api.GetRelationResp
}

var GetRelationResult_Success_DEFAULT *core_api.GetRelationResp

func (p *GetRelationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetRelationResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetRelationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetRelationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetRelationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetRelationResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetRelationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetRelationResult) GetSuccess() *core_api.GetRelationResp {
	if !p.IsSetSuccess() {
		return GetRelationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetRelationResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetRelationResp)
}

func (p *GetRelationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetRelationResult) GetResult() interface{} {
	return p.Success
}

func deleteRelationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteRelationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Relation).DeleteRelation(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteRelationArgs:
		success, err := handler.(core_api.Relation).DeleteRelation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteRelationResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteRelationArgs() interface{} {
	return &DeleteRelationArgs{}
}

func newDeleteRelationResult() interface{} {
	return &DeleteRelationResult{}
}

type DeleteRelationArgs struct {
	Req *core_api.DeleteRelationReq
}

func (p *DeleteRelationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeleteRelationReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteRelationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteRelationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteRelationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteRelationArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteRelationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteRelationArgs_Req_DEFAULT *core_api.DeleteRelationReq

func (p *DeleteRelationArgs) GetReq() *core_api.DeleteRelationReq {
	if !p.IsSetReq() {
		return DeleteRelationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteRelationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteRelationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteRelationResult struct {
	Success *core_api.DeleteRelationResp
}

var DeleteRelationResult_Success_DEFAULT *core_api.DeleteRelationResp

func (p *DeleteRelationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.DeleteRelationResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteRelationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteRelationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteRelationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteRelationResult) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteRelationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteRelationResult) GetSuccess() *core_api.DeleteRelationResp {
	if !p.IsSetSuccess() {
		return DeleteRelationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteRelationResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.DeleteRelationResp)
}

func (p *DeleteRelationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteRelationResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateRelation(ctx context.Context, Req *core_api.CreateRelationReq) (r *core_api.CreateRelationResp, err error) {
	var _args CreateRelationArgs
	_args.Req = Req
	var _result CreateRelationResult
	if err = p.c.Call(ctx, "CreateRelation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFromRelations(ctx context.Context, Req *core_api.GetFromRelationsReq) (r *core_api.GetFromRelationsResp, err error) {
	var _args GetFromRelationsArgs
	_args.Req = Req
	var _result GetFromRelationsResult
	if err = p.c.Call(ctx, "GetFromRelations", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetToRelations(ctx context.Context, Req *core_api.GetToRelationsReq) (r *core_api.GetToRelationsResp, err error) {
	var _args GetToRelationsArgs
	_args.Req = Req
	var _result GetToRelationsResult
	if err = p.c.Call(ctx, "GetToRelations", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRelation(ctx context.Context, Req *core_api.GetRelationReq) (r *core_api.GetRelationResp, err error) {
	var _args GetRelationArgs
	_args.Req = Req
	var _result GetRelationResult
	if err = p.c.Call(ctx, "GetRelation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteRelation(ctx context.Context, Req *core_api.DeleteRelationReq) (r *core_api.DeleteRelationResp, err error) {
	var _args DeleteRelationArgs
	_args.Req = Req
	var _result DeleteRelationResult
	if err = p.c.Call(ctx, "DeleteRelation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
