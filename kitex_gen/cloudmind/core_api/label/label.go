// Code generated by Kitex v0.8.0. DO NOT EDIT.

package label

import (
	"context"
	core_api "github.com/CloudStriver/service-idl-gen-go/kitex_gen/cloudmind/core_api"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return labelServiceInfo
}

var labelServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "label"
	handlerType := (*core_api.Label)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateLabel":      kitex.NewMethodInfo(createLabelHandler, newCreateLabelArgs, newCreateLabelResult, false),
		"DeleteLabel":      kitex.NewMethodInfo(deleteLabelHandler, newDeleteLabelArgs, newDeleteLabelResult, false),
		"UpdateLabel":      kitex.NewMethodInfo(updateLabelHandler, newUpdateLabelArgs, newUpdateLabelResult, false),
		"GetLabels":        kitex.NewMethodInfo(getLabelsHandler, newGetLabelsArgs, newGetLabelsResult, false),
		"GetLabel":         kitex.NewMethodInfo(getLabelHandler, newGetLabelArgs, newGetLabelResult, false),
		"GetLabelsInBatch": kitex.NewMethodInfo(getLabelsInBatchHandler, newGetLabelsInBatchArgs, newGetLabelsInBatchResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "cloudmind.core_api",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func createLabelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreateLabelReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Label).CreateLabel(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateLabelArgs:
		success, err := handler.(core_api.Label).CreateLabel(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateLabelResult)
		realResult.Success = success
	}
	return nil
}
func newCreateLabelArgs() interface{} {
	return &CreateLabelArgs{}
}

func newCreateLabelResult() interface{} {
	return &CreateLabelResult{}
}

type CreateLabelArgs struct {
	Req *core_api.CreateLabelReq
}

func (p *CreateLabelArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CreateLabelReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateLabelArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateLabelArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateLabelArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateLabelArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreateLabelReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateLabelArgs_Req_DEFAULT *core_api.CreateLabelReq

func (p *CreateLabelArgs) GetReq() *core_api.CreateLabelReq {
	if !p.IsSetReq() {
		return CreateLabelArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateLabelArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateLabelArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateLabelResult struct {
	Success *core_api.CreateLabelResp
}

var CreateLabelResult_Success_DEFAULT *core_api.CreateLabelResp

func (p *CreateLabelResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.CreateLabelResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateLabelResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateLabelResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateLabelResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateLabelResult) Unmarshal(in []byte) error {
	msg := new(core_api.CreateLabelResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateLabelResult) GetSuccess() *core_api.CreateLabelResp {
	if !p.IsSetSuccess() {
		return CreateLabelResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateLabelResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.CreateLabelResp)
}

func (p *CreateLabelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateLabelResult) GetResult() interface{} {
	return p.Success
}

func deleteLabelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteLabelReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Label).DeleteLabel(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteLabelArgs:
		success, err := handler.(core_api.Label).DeleteLabel(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteLabelResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteLabelArgs() interface{} {
	return &DeleteLabelArgs{}
}

func newDeleteLabelResult() interface{} {
	return &DeleteLabelResult{}
}

type DeleteLabelArgs struct {
	Req *core_api.DeleteLabelReq
}

func (p *DeleteLabelArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeleteLabelReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteLabelArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteLabelArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteLabelArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteLabelArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteLabelReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteLabelArgs_Req_DEFAULT *core_api.DeleteLabelReq

func (p *DeleteLabelArgs) GetReq() *core_api.DeleteLabelReq {
	if !p.IsSetReq() {
		return DeleteLabelArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteLabelArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteLabelArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteLabelResult struct {
	Success *core_api.DeleteLabelResp
}

var DeleteLabelResult_Success_DEFAULT *core_api.DeleteLabelResp

func (p *DeleteLabelResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.DeleteLabelResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteLabelResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteLabelResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteLabelResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteLabelResult) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteLabelResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteLabelResult) GetSuccess() *core_api.DeleteLabelResp {
	if !p.IsSetSuccess() {
		return DeleteLabelResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteLabelResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.DeleteLabelResp)
}

func (p *DeleteLabelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteLabelResult) GetResult() interface{} {
	return p.Success
}

func updateLabelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateLabelReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Label).UpdateLabel(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateLabelArgs:
		success, err := handler.(core_api.Label).UpdateLabel(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateLabelResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateLabelArgs() interface{} {
	return &UpdateLabelArgs{}
}

func newUpdateLabelResult() interface{} {
	return &UpdateLabelResult{}
}

type UpdateLabelArgs struct {
	Req *core_api.UpdateLabelReq
}

func (p *UpdateLabelArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateLabelReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateLabelArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateLabelArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateLabelArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateLabelArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateLabelReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateLabelArgs_Req_DEFAULT *core_api.UpdateLabelReq

func (p *UpdateLabelArgs) GetReq() *core_api.UpdateLabelReq {
	if !p.IsSetReq() {
		return UpdateLabelArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateLabelArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateLabelArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateLabelResult struct {
	Success *core_api.UpdateLabelResp
}

var UpdateLabelResult_Success_DEFAULT *core_api.UpdateLabelResp

func (p *UpdateLabelResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.UpdateLabelResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateLabelResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateLabelResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateLabelResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateLabelResult) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateLabelResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateLabelResult) GetSuccess() *core_api.UpdateLabelResp {
	if !p.IsSetSuccess() {
		return UpdateLabelResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateLabelResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.UpdateLabelResp)
}

func (p *UpdateLabelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateLabelResult) GetResult() interface{} {
	return p.Success
}

func getLabelsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetLabelsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Label).GetLabels(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetLabelsArgs:
		success, err := handler.(core_api.Label).GetLabels(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetLabelsResult)
		realResult.Success = success
	}
	return nil
}
func newGetLabelsArgs() interface{} {
	return &GetLabelsArgs{}
}

func newGetLabelsResult() interface{} {
	return &GetLabelsResult{}
}

type GetLabelsArgs struct {
	Req *core_api.GetLabelsReq
}

func (p *GetLabelsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetLabelsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetLabelsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetLabelsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetLabelsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetLabelsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetLabelsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetLabelsArgs_Req_DEFAULT *core_api.GetLabelsReq

func (p *GetLabelsArgs) GetReq() *core_api.GetLabelsReq {
	if !p.IsSetReq() {
		return GetLabelsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetLabelsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetLabelsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetLabelsResult struct {
	Success *core_api.GetLabelsResp
}

var GetLabelsResult_Success_DEFAULT *core_api.GetLabelsResp

func (p *GetLabelsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetLabelsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetLabelsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetLabelsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetLabelsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetLabelsResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetLabelsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetLabelsResult) GetSuccess() *core_api.GetLabelsResp {
	if !p.IsSetSuccess() {
		return GetLabelsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetLabelsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetLabelsResp)
}

func (p *GetLabelsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetLabelsResult) GetResult() interface{} {
	return p.Success
}

func getLabelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetLabelReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Label).GetLabel(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetLabelArgs:
		success, err := handler.(core_api.Label).GetLabel(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetLabelResult)
		realResult.Success = success
	}
	return nil
}
func newGetLabelArgs() interface{} {
	return &GetLabelArgs{}
}

func newGetLabelResult() interface{} {
	return &GetLabelResult{}
}

type GetLabelArgs struct {
	Req *core_api.GetLabelReq
}

func (p *GetLabelArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetLabelReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetLabelArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetLabelArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetLabelArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetLabelArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetLabelReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetLabelArgs_Req_DEFAULT *core_api.GetLabelReq

func (p *GetLabelArgs) GetReq() *core_api.GetLabelReq {
	if !p.IsSetReq() {
		return GetLabelArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetLabelArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetLabelArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetLabelResult struct {
	Success *core_api.GetLabelResp
}

var GetLabelResult_Success_DEFAULT *core_api.GetLabelResp

func (p *GetLabelResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetLabelResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetLabelResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetLabelResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetLabelResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetLabelResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetLabelResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetLabelResult) GetSuccess() *core_api.GetLabelResp {
	if !p.IsSetSuccess() {
		return GetLabelResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetLabelResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetLabelResp)
}

func (p *GetLabelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetLabelResult) GetResult() interface{} {
	return p.Success
}

func getLabelsInBatchHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetLabelsInBatchReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Label).GetLabelsInBatch(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetLabelsInBatchArgs:
		success, err := handler.(core_api.Label).GetLabelsInBatch(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetLabelsInBatchResult)
		realResult.Success = success
	}
	return nil
}
func newGetLabelsInBatchArgs() interface{} {
	return &GetLabelsInBatchArgs{}
}

func newGetLabelsInBatchResult() interface{} {
	return &GetLabelsInBatchResult{}
}

type GetLabelsInBatchArgs struct {
	Req *core_api.GetLabelsInBatchReq
}

func (p *GetLabelsInBatchArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetLabelsInBatchReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetLabelsInBatchArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetLabelsInBatchArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetLabelsInBatchArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetLabelsInBatchArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetLabelsInBatchReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetLabelsInBatchArgs_Req_DEFAULT *core_api.GetLabelsInBatchReq

func (p *GetLabelsInBatchArgs) GetReq() *core_api.GetLabelsInBatchReq {
	if !p.IsSetReq() {
		return GetLabelsInBatchArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetLabelsInBatchArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetLabelsInBatchArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetLabelsInBatchResult struct {
	Success *core_api.GetLabelsInBatchResp
}

var GetLabelsInBatchResult_Success_DEFAULT *core_api.GetLabelsInBatchResp

func (p *GetLabelsInBatchResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetLabelsInBatchResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetLabelsInBatchResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetLabelsInBatchResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetLabelsInBatchResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetLabelsInBatchResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetLabelsInBatchResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetLabelsInBatchResult) GetSuccess() *core_api.GetLabelsInBatchResp {
	if !p.IsSetSuccess() {
		return GetLabelsInBatchResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetLabelsInBatchResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetLabelsInBatchResp)
}

func (p *GetLabelsInBatchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetLabelsInBatchResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateLabel(ctx context.Context, Req *core_api.CreateLabelReq) (r *core_api.CreateLabelResp, err error) {
	var _args CreateLabelArgs
	_args.Req = Req
	var _result CreateLabelResult
	if err = p.c.Call(ctx, "CreateLabel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteLabel(ctx context.Context, Req *core_api.DeleteLabelReq) (r *core_api.DeleteLabelResp, err error) {
	var _args DeleteLabelArgs
	_args.Req = Req
	var _result DeleteLabelResult
	if err = p.c.Call(ctx, "DeleteLabel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateLabel(ctx context.Context, Req *core_api.UpdateLabelReq) (r *core_api.UpdateLabelResp, err error) {
	var _args UpdateLabelArgs
	_args.Req = Req
	var _result UpdateLabelResult
	if err = p.c.Call(ctx, "UpdateLabel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLabels(ctx context.Context, Req *core_api.GetLabelsReq) (r *core_api.GetLabelsResp, err error) {
	var _args GetLabelsArgs
	_args.Req = Req
	var _result GetLabelsResult
	if err = p.c.Call(ctx, "GetLabels", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLabel(ctx context.Context, Req *core_api.GetLabelReq) (r *core_api.GetLabelResp, err error) {
	var _args GetLabelArgs
	_args.Req = Req
	var _result GetLabelResult
	if err = p.c.Call(ctx, "GetLabel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLabelsInBatch(ctx context.Context, Req *core_api.GetLabelsInBatchReq) (r *core_api.GetLabelsInBatchResp, err error) {
	var _args GetLabelsInBatchArgs
	_args.Req = Req
	var _result GetLabelsInBatchResult
	if err = p.c.Call(ctx, "GetLabelsInBatch", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
