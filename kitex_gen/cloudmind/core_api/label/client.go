// Code generated by Kitex v0.8.0. DO NOT EDIT.

package label

import (
	"context"
	core_api "github.com/CloudStriver/service-idl-gen-go/kitex_gen/cloudmind/core_api"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateLabel(ctx context.Context, Req *core_api.CreateLabelReq, callOptions ...callopt.Option) (r *core_api.CreateLabelResp, err error)
	DeleteLabel(ctx context.Context, Req *core_api.DeleteLabelReq, callOptions ...callopt.Option) (r *core_api.DeleteLabelResp, err error)
	UpdateLabel(ctx context.Context, Req *core_api.UpdateLabelReq, callOptions ...callopt.Option) (r *core_api.UpdateLabelResp, err error)
	GetLabels(ctx context.Context, Req *core_api.GetLabelsReq, callOptions ...callopt.Option) (r *core_api.GetLabelsResp, err error)
	GetLabel(ctx context.Context, Req *core_api.GetLabelReq, callOptions ...callopt.Option) (r *core_api.GetLabelResp, err error)
	GetLabelsInBatch(ctx context.Context, Req *core_api.GetLabelsInBatchReq, callOptions ...callopt.Option) (r *core_api.GetLabelsInBatchResp, err error)
	CreateObject(ctx context.Context, Req *core_api.CreateObjectReq, callOptions ...callopt.Option) (r *core_api.CreateObjectResp, err error)
	CreateObjects(ctx context.Context, Req *core_api.CreateObjectsReq, callOptions ...callopt.Option) (r *core_api.CreateObjectsResp, err error)
	DeleteObject(ctx context.Context, Req *core_api.DeleteObjectReq, callOptions ...callopt.Option) (r *core_api.DeleteObjectResp, err error)
	GetObjects(ctx context.Context, Req *core_api.GetObjectsReq, callOptions ...callopt.Option) (r *core_api.GetObjectsResp, err error)
	UpdateObject(ctx context.Context, Req *core_api.UpdateObjectReq, callOptions ...callopt.Option) (r *core_api.UpdateObjectResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kLabelClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kLabelClient struct {
	*kClient
}

func (p *kLabelClient) CreateLabel(ctx context.Context, Req *core_api.CreateLabelReq, callOptions ...callopt.Option) (r *core_api.CreateLabelResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateLabel(ctx, Req)
}

func (p *kLabelClient) DeleteLabel(ctx context.Context, Req *core_api.DeleteLabelReq, callOptions ...callopt.Option) (r *core_api.DeleteLabelResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteLabel(ctx, Req)
}

func (p *kLabelClient) UpdateLabel(ctx context.Context, Req *core_api.UpdateLabelReq, callOptions ...callopt.Option) (r *core_api.UpdateLabelResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateLabel(ctx, Req)
}

func (p *kLabelClient) GetLabels(ctx context.Context, Req *core_api.GetLabelsReq, callOptions ...callopt.Option) (r *core_api.GetLabelsResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetLabels(ctx, Req)
}

func (p *kLabelClient) GetLabel(ctx context.Context, Req *core_api.GetLabelReq, callOptions ...callopt.Option) (r *core_api.GetLabelResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetLabel(ctx, Req)
}

func (p *kLabelClient) GetLabelsInBatch(ctx context.Context, Req *core_api.GetLabelsInBatchReq, callOptions ...callopt.Option) (r *core_api.GetLabelsInBatchResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetLabelsInBatch(ctx, Req)
}

func (p *kLabelClient) CreateObject(ctx context.Context, Req *core_api.CreateObjectReq, callOptions ...callopt.Option) (r *core_api.CreateObjectResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateObject(ctx, Req)
}

func (p *kLabelClient) CreateObjects(ctx context.Context, Req *core_api.CreateObjectsReq, callOptions ...callopt.Option) (r *core_api.CreateObjectsResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateObjects(ctx, Req)
}

func (p *kLabelClient) DeleteObject(ctx context.Context, Req *core_api.DeleteObjectReq, callOptions ...callopt.Option) (r *core_api.DeleteObjectResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteObject(ctx, Req)
}

func (p *kLabelClient) GetObjects(ctx context.Context, Req *core_api.GetObjectsReq, callOptions ...callopt.Option) (r *core_api.GetObjectsResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetObjects(ctx, Req)
}

func (p *kLabelClient) UpdateObject(ctx context.Context, Req *core_api.UpdateObjectReq, callOptions ...callopt.Option) (r *core_api.UpdateObjectResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateObject(ctx, Req)
}
