// Code generated by Kitex v0.9.0. DO NOT EDIT.

package system

import (
	"context"
	"errors"
	core_api "github.com/CloudStriver/service-idl-gen-go/kitex_gen/cloudmind/core_api"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetNotifications": kitex.NewMethodInfo(
		getNotificationsHandler,
		newGetNotificationsArgs,
		newGetNotificationsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetNotificationCount": kitex.NewMethodInfo(
		getNotificationCountHandler,
		newGetNotificationCountArgs,
		newGetNotificationCountResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ReadNotifications": kitex.NewMethodInfo(
		readNotificationsHandler,
		newReadNotificationsArgs,
		newReadNotificationsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	systemServiceInfo                = NewServiceInfo()
	systemServiceInfoForClient       = NewServiceInfoForClient()
	systemServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return systemServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return systemServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return systemServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "system"
	handlerType := (*core_api.System)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "cloudmind.core_api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.0",
		Extra:           extra,
	}
	return svcInfo
}

func getNotificationsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetNotificationsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).GetNotifications(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetNotificationsArgs:
		success, err := handler.(core_api.System).GetNotifications(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetNotificationsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetNotificationsArgs() interface{} {
	return &GetNotificationsArgs{}
}

func newGetNotificationsResult() interface{} {
	return &GetNotificationsResult{}
}

type GetNotificationsArgs struct {
	Req *core_api.GetNotificationsReq
}

func (p *GetNotificationsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetNotificationsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetNotificationsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetNotificationsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetNotificationsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetNotificationsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetNotificationsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetNotificationsArgs_Req_DEFAULT *core_api.GetNotificationsReq

func (p *GetNotificationsArgs) GetReq() *core_api.GetNotificationsReq {
	if !p.IsSetReq() {
		return GetNotificationsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetNotificationsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetNotificationsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetNotificationsResult struct {
	Success *core_api.GetNotificationsResp
}

var GetNotificationsResult_Success_DEFAULT *core_api.GetNotificationsResp

func (p *GetNotificationsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetNotificationsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetNotificationsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetNotificationsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetNotificationsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetNotificationsResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetNotificationsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetNotificationsResult) GetSuccess() *core_api.GetNotificationsResp {
	if !p.IsSetSuccess() {
		return GetNotificationsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetNotificationsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetNotificationsResp)
}

func (p *GetNotificationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetNotificationsResult) GetResult() interface{} {
	return p.Success
}

func getNotificationCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetNotificationCountReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).GetNotificationCount(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetNotificationCountArgs:
		success, err := handler.(core_api.System).GetNotificationCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetNotificationCountResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetNotificationCountArgs() interface{} {
	return &GetNotificationCountArgs{}
}

func newGetNotificationCountResult() interface{} {
	return &GetNotificationCountResult{}
}

type GetNotificationCountArgs struct {
	Req *core_api.GetNotificationCountReq
}

func (p *GetNotificationCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetNotificationCountReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetNotificationCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetNotificationCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetNotificationCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetNotificationCountArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetNotificationCountReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetNotificationCountArgs_Req_DEFAULT *core_api.GetNotificationCountReq

func (p *GetNotificationCountArgs) GetReq() *core_api.GetNotificationCountReq {
	if !p.IsSetReq() {
		return GetNotificationCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetNotificationCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetNotificationCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetNotificationCountResult struct {
	Success *core_api.GetNotificationCountResp
}

var GetNotificationCountResult_Success_DEFAULT *core_api.GetNotificationCountResp

func (p *GetNotificationCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetNotificationCountResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetNotificationCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetNotificationCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetNotificationCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetNotificationCountResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetNotificationCountResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetNotificationCountResult) GetSuccess() *core_api.GetNotificationCountResp {
	if !p.IsSetSuccess() {
		return GetNotificationCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetNotificationCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetNotificationCountResp)
}

func (p *GetNotificationCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetNotificationCountResult) GetResult() interface{} {
	return p.Success
}

func readNotificationsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ReadNotificationsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).ReadNotifications(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ReadNotificationsArgs:
		success, err := handler.(core_api.System).ReadNotifications(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ReadNotificationsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newReadNotificationsArgs() interface{} {
	return &ReadNotificationsArgs{}
}

func newReadNotificationsResult() interface{} {
	return &ReadNotificationsResult{}
}

type ReadNotificationsArgs struct {
	Req *core_api.ReadNotificationsReq
}

func (p *ReadNotificationsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.ReadNotificationsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ReadNotificationsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ReadNotificationsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ReadNotificationsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ReadNotificationsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ReadNotificationsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ReadNotificationsArgs_Req_DEFAULT *core_api.ReadNotificationsReq

func (p *ReadNotificationsArgs) GetReq() *core_api.ReadNotificationsReq {
	if !p.IsSetReq() {
		return ReadNotificationsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ReadNotificationsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ReadNotificationsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ReadNotificationsResult struct {
	Success *core_api.ReadNotificationsResp
}

var ReadNotificationsResult_Success_DEFAULT *core_api.ReadNotificationsResp

func (p *ReadNotificationsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.ReadNotificationsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ReadNotificationsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ReadNotificationsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ReadNotificationsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ReadNotificationsResult) Unmarshal(in []byte) error {
	msg := new(core_api.ReadNotificationsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ReadNotificationsResult) GetSuccess() *core_api.ReadNotificationsResp {
	if !p.IsSetSuccess() {
		return ReadNotificationsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ReadNotificationsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ReadNotificationsResp)
}

func (p *ReadNotificationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ReadNotificationsResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetNotifications(ctx context.Context, Req *core_api.GetNotificationsReq) (r *core_api.GetNotificationsResp, err error) {
	var _args GetNotificationsArgs
	_args.Req = Req
	var _result GetNotificationsResult
	if err = p.c.Call(ctx, "GetNotifications", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetNotificationCount(ctx context.Context, Req *core_api.GetNotificationCountReq) (r *core_api.GetNotificationCountResp, err error) {
	var _args GetNotificationCountArgs
	_args.Req = Req
	var _result GetNotificationCountResult
	if err = p.c.Call(ctx, "GetNotificationCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ReadNotifications(ctx context.Context, Req *core_api.ReadNotificationsReq) (r *core_api.ReadNotificationsResp, err error) {
	var _args ReadNotificationsArgs
	_args.Req = Req
	var _result ReadNotificationsResult
	if err = p.c.Call(ctx, "ReadNotifications", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
