// Code generated by Kitex v0.8.0. DO NOT EDIT.

package zone

import (
	"context"
	core_api "github.com/CloudStriver/service-idl-gen-go/kitex_gen/cloudmind/core_api"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return zoneServiceInfo
}

var zoneServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "zone"
	handlerType := (*core_api.Zone)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateZone": kitex.NewMethodInfo(createZoneHandler, newCreateZoneArgs, newCreateZoneResult, false),
		"UpdateZone": kitex.NewMethodInfo(updateZoneHandler, newUpdateZoneArgs, newUpdateZoneResult, false),
		"GetZone":    kitex.NewMethodInfo(getZoneHandler, newGetZoneArgs, newGetZoneResult, false),
		"DeleteZone": kitex.NewMethodInfo(deleteZoneHandler, newDeleteZoneArgs, newDeleteZoneResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "cloudmind.core_api",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func createZoneHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreateZoneReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Zone).CreateZone(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateZoneArgs:
		success, err := handler.(core_api.Zone).CreateZone(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateZoneResult)
		realResult.Success = success
	}
	return nil
}
func newCreateZoneArgs() interface{} {
	return &CreateZoneArgs{}
}

func newCreateZoneResult() interface{} {
	return &CreateZoneResult{}
}

type CreateZoneArgs struct {
	Req *core_api.CreateZoneReq
}

func (p *CreateZoneArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CreateZoneReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateZoneArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateZoneArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateZoneArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateZoneArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreateZoneReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateZoneArgs_Req_DEFAULT *core_api.CreateZoneReq

func (p *CreateZoneArgs) GetReq() *core_api.CreateZoneReq {
	if !p.IsSetReq() {
		return CreateZoneArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateZoneArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateZoneArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateZoneResult struct {
	Success *core_api.CreateZoneResp
}

var CreateZoneResult_Success_DEFAULT *core_api.CreateZoneResp

func (p *CreateZoneResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.CreateZoneResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateZoneResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateZoneResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateZoneResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateZoneResult) Unmarshal(in []byte) error {
	msg := new(core_api.CreateZoneResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateZoneResult) GetSuccess() *core_api.CreateZoneResp {
	if !p.IsSetSuccess() {
		return CreateZoneResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateZoneResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.CreateZoneResp)
}

func (p *CreateZoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateZoneResult) GetResult() interface{} {
	return p.Success
}

func updateZoneHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateZoneReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Zone).UpdateZone(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateZoneArgs:
		success, err := handler.(core_api.Zone).UpdateZone(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateZoneResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateZoneArgs() interface{} {
	return &UpdateZoneArgs{}
}

func newUpdateZoneResult() interface{} {
	return &UpdateZoneResult{}
}

type UpdateZoneArgs struct {
	Req *core_api.UpdateZoneReq
}

func (p *UpdateZoneArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateZoneReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateZoneArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateZoneArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateZoneArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateZoneArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateZoneReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateZoneArgs_Req_DEFAULT *core_api.UpdateZoneReq

func (p *UpdateZoneArgs) GetReq() *core_api.UpdateZoneReq {
	if !p.IsSetReq() {
		return UpdateZoneArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateZoneArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateZoneArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateZoneResult struct {
	Success *core_api.UpdateZoneResp
}

var UpdateZoneResult_Success_DEFAULT *core_api.UpdateZoneResp

func (p *UpdateZoneResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.UpdateZoneResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateZoneResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateZoneResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateZoneResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateZoneResult) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateZoneResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateZoneResult) GetSuccess() *core_api.UpdateZoneResp {
	if !p.IsSetSuccess() {
		return UpdateZoneResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateZoneResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.UpdateZoneResp)
}

func (p *UpdateZoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateZoneResult) GetResult() interface{} {
	return p.Success
}

func getZoneHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetZoneReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Zone).GetZone(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetZoneArgs:
		success, err := handler.(core_api.Zone).GetZone(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetZoneResult)
		realResult.Success = success
	}
	return nil
}
func newGetZoneArgs() interface{} {
	return &GetZoneArgs{}
}

func newGetZoneResult() interface{} {
	return &GetZoneResult{}
}

type GetZoneArgs struct {
	Req *core_api.GetZoneReq
}

func (p *GetZoneArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetZoneReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetZoneArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetZoneArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetZoneArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetZoneArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetZoneReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetZoneArgs_Req_DEFAULT *core_api.GetZoneReq

func (p *GetZoneArgs) GetReq() *core_api.GetZoneReq {
	if !p.IsSetReq() {
		return GetZoneArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetZoneArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetZoneArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetZoneResult struct {
	Success *core_api.GetZoneResp
}

var GetZoneResult_Success_DEFAULT *core_api.GetZoneResp

func (p *GetZoneResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetZoneResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetZoneResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetZoneResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetZoneResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetZoneResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetZoneResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetZoneResult) GetSuccess() *core_api.GetZoneResp {
	if !p.IsSetSuccess() {
		return GetZoneResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetZoneResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetZoneResp)
}

func (p *GetZoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetZoneResult) GetResult() interface{} {
	return p.Success
}

func deleteZoneHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteZoneReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Zone).DeleteZone(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteZoneArgs:
		success, err := handler.(core_api.Zone).DeleteZone(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteZoneResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteZoneArgs() interface{} {
	return &DeleteZoneArgs{}
}

func newDeleteZoneResult() interface{} {
	return &DeleteZoneResult{}
}

type DeleteZoneArgs struct {
	Req *core_api.DeleteZoneReq
}

func (p *DeleteZoneArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeleteZoneReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteZoneArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteZoneArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteZoneArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteZoneArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteZoneReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteZoneArgs_Req_DEFAULT *core_api.DeleteZoneReq

func (p *DeleteZoneArgs) GetReq() *core_api.DeleteZoneReq {
	if !p.IsSetReq() {
		return DeleteZoneArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteZoneArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteZoneArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteZoneResult struct {
	Success *core_api.DeleteZoneResp
}

var DeleteZoneResult_Success_DEFAULT *core_api.DeleteZoneResp

func (p *DeleteZoneResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.DeleteZoneResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteZoneResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteZoneResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteZoneResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteZoneResult) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteZoneResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteZoneResult) GetSuccess() *core_api.DeleteZoneResp {
	if !p.IsSetSuccess() {
		return DeleteZoneResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteZoneResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.DeleteZoneResp)
}

func (p *DeleteZoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteZoneResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateZone(ctx context.Context, Req *core_api.CreateZoneReq) (r *core_api.CreateZoneResp, err error) {
	var _args CreateZoneArgs
	_args.Req = Req
	var _result CreateZoneResult
	if err = p.c.Call(ctx, "CreateZone", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateZone(ctx context.Context, Req *core_api.UpdateZoneReq) (r *core_api.UpdateZoneResp, err error) {
	var _args UpdateZoneArgs
	_args.Req = Req
	var _result UpdateZoneResult
	if err = p.c.Call(ctx, "UpdateZone", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetZone(ctx context.Context, Req *core_api.GetZoneReq) (r *core_api.GetZoneResp, err error) {
	var _args GetZoneArgs
	_args.Req = Req
	var _result GetZoneResult
	if err = p.c.Call(ctx, "GetZone", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteZone(ctx context.Context, Req *core_api.DeleteZoneReq) (r *core_api.DeleteZoneResp, err error) {
	var _args DeleteZoneArgs
	_args.Req = Req
	var _result DeleteZoneResult
	if err = p.c.Call(ctx, "DeleteZone", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
