// Code generated by Kitex v0.8.0. DO NOT EDIT.

package user

import (
	"context"
	user "github.com/CloudStriver/service-idl-gen-go/kitex_gen/user"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	SendEmailCode(ctx context.Context, Req *user.SendEmailCodeReq, callOptions ...callopt.Option) (r *user.SendEmailCodeResp, err error)
	Login(ctx context.Context, Req *user.LoginReq, callOptions ...callopt.Option) (r *user.LoginResp, err error)
	UpdateUser(ctx context.Context, Req *user.UpdateUserReq, callOptions ...callopt.Option) (r *user.UpdateUserResp, err error)
	GetUser(ctx context.Context, Req *user.GetUserReq, callOptions ...callopt.Option) (r *user.GetUserResp, err error)
	Register(ctx context.Context, Req *user.RegisterReq, callOptions ...callopt.Option) (r *user.RegisterResp, err error)
	GenerateToken(ctx context.Context, Req *user.GenerateTokenReq, callOptions ...callopt.Option) (r *user.GenerateTokenResp, err error)
	RefreshToken(ctx context.Context, Req *user.RefreshTokenReq, callOptions ...callopt.Option) (r *user.RefreshTokenResp, err error)
	GetCaptcha(ctx context.Context, Req *user.GetCaptchaReq, callOptions ...callopt.Option) (r *user.GetCaptchaResp, err error)
	ConfirmCaptcha(ctx context.Context, Req *user.ConfirmCaptchaReq, callOptions ...callopt.Option) (r *user.ConfirmCaptchaResp, err error)
	ConfirmEmailCode(ctx context.Context, Req *user.ConfirmEmailCodeReq, callOptions ...callopt.Option) (r *user.ConfirmEmailCodeResp, err error)
	RetrievePassword(ctx context.Context, Req *user.RetrievePasswordReq, callOptions ...callopt.Option) (r *user.RetrievePasswordResp, err error)
	SearchUser(ctx context.Context, Req *user.SearchUserReq, callOptions ...callopt.Option) (r *user.SearchUserResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserClient struct {
	*kClient
}

func (p *kUserClient) SendEmailCode(ctx context.Context, Req *user.SendEmailCodeReq, callOptions ...callopt.Option) (r *user.SendEmailCodeResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendEmailCode(ctx, Req)
}

func (p *kUserClient) Login(ctx context.Context, Req *user.LoginReq, callOptions ...callopt.Option) (r *user.LoginResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Login(ctx, Req)
}

func (p *kUserClient) UpdateUser(ctx context.Context, Req *user.UpdateUserReq, callOptions ...callopt.Option) (r *user.UpdateUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateUser(ctx, Req)
}

func (p *kUserClient) GetUser(ctx context.Context, Req *user.GetUserReq, callOptions ...callopt.Option) (r *user.GetUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUser(ctx, Req)
}

func (p *kUserClient) Register(ctx context.Context, Req *user.RegisterReq, callOptions ...callopt.Option) (r *user.RegisterResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Register(ctx, Req)
}

func (p *kUserClient) GenerateToken(ctx context.Context, Req *user.GenerateTokenReq, callOptions ...callopt.Option) (r *user.GenerateTokenResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GenerateToken(ctx, Req)
}

func (p *kUserClient) RefreshToken(ctx context.Context, Req *user.RefreshTokenReq, callOptions ...callopt.Option) (r *user.RefreshTokenResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RefreshToken(ctx, Req)
}

func (p *kUserClient) GetCaptcha(ctx context.Context, Req *user.GetCaptchaReq, callOptions ...callopt.Option) (r *user.GetCaptchaResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCaptcha(ctx, Req)
}

func (p *kUserClient) ConfirmCaptcha(ctx context.Context, Req *user.ConfirmCaptchaReq, callOptions ...callopt.Option) (r *user.ConfirmCaptchaResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ConfirmCaptcha(ctx, Req)
}

func (p *kUserClient) ConfirmEmailCode(ctx context.Context, Req *user.ConfirmEmailCodeReq, callOptions ...callopt.Option) (r *user.ConfirmEmailCodeResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ConfirmEmailCode(ctx, Req)
}

func (p *kUserClient) RetrievePassword(ctx context.Context, Req *user.RetrievePasswordReq, callOptions ...callopt.Option) (r *user.RetrievePasswordResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RetrievePassword(ctx, Req)
}

func (p *kUserClient) SearchUser(ctx context.Context, Req *user.SearchUserReq, callOptions ...callopt.Option) (r *user.SearchUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SearchUser(ctx, Req)
}
