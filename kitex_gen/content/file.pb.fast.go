// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package content

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *File) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_File[number], err)
}

func (x *File) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *File) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *File) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Type = Type(v)
	return offset, nil
}

func (x *File) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Path, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *File) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *File) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *File) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Size, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *File) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Md5, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *File) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PublicFile) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PublicFile[number], err)
}

func (x *PublicFile) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Type = Type(v)
	return offset, nil
}

func (x *PublicFile) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Path, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Size, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Md5, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PublicFile) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CosInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CosInfo[number], err)
}

func (x *CosInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.SecretId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CosInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SecretKey, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CosInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.SessionToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CosInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.BucketName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetCosInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetCosInfoReq[number], err)
}

func (x *GetCosInfoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetCosInfoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetCosInfoResp[number], err)
}

func (x *GetCosInfoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v CosInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Cos = &v
	return offset, nil
}

func (x *GetCosInfoResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileByMd5Req) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileByMd5Req[number], err)
}

func (x *GetFileByMd5Req) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Md5, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileByMd5Resp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileByMd5Resp[number], err)
}

func (x *GetFileByMd5Resp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Ok, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetFileByMd5Resp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileInfoByFileIdReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileInfoByFileIdReq[number], err)
}

func (x *GetFileInfoByFileIdReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileInfoByFileIdResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileInfoByFileIdResp[number], err)
}

func (x *GetFileInfoByFileIdResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v File
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.File = &v
	return offset, nil
}

func (x *GetFileInfoByFileIdResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileByFileIdWithUserIdReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileByFileIdWithUserIdReq[number], err)
}

func (x *GetFileByFileIdWithUserIdReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileByFileIdWithUserIdReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileByFileIdWithUserIdResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileByFileIdWithUserIdResp[number], err)
}

func (x *GetFileByFileIdWithUserIdResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v File
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.File = &v
	return offset, nil
}

func (x *GetFileByFileIdWithUserIdResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileInfoByFileIdsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileInfoByFileIdsReq[number], err)
}

func (x *GetFileInfoByFileIdsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.FileIds = append(x.FileIds, v)
	return offset, err
}

func (x *GetFileInfoByFileIdsReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileInfoByFileIdsResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileInfoByFileIdsResp[number], err)
}

func (x *GetFileInfoByFileIdsResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v File
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *GetFileInfoByFileIdsResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileInfoByFileIdsWithUserIdReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileInfoByFileIdsWithUserIdReq[number], err)
}

func (x *GetFileInfoByFileIdsWithUserIdReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.FileIds = append(x.FileIds, v)
	return offset, err
}

func (x *GetFileInfoByFileIdsWithUserIdReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileInfoByFileIdsWithUserIdResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileInfoByFileIdsWithUserIdResp[number], err)
}

func (x *GetFileInfoByFileIdsWithUserIdResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v File
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *GetFileInfoByFileIdsWithUserIdResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFilesByFatherIdReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFilesByFatherIdReq[number], err)
}

func (x *GetFilesByFatherIdReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFilesByFatherIdResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFilesByFatherIdResp[number], err)
}

func (x *GetFilesByFatherIdResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v File
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *GetFilesByFatherIdResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFilesByFatherIdWithUserIdReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFilesByFatherIdWithUserIdReq[number], err)
}

func (x *GetFilesByFatherIdWithUserIdReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFilesByFatherIdWithUserIdReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFilesByFatherIdWithUserIdResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFilesByFatherIdWithUserIdResp[number], err)
}

func (x *GetFilesByFatherIdWithUserIdResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v File
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *GetFilesByFatherIdWithUserIdResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetAllFileByFatherIdReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAllFileByFatherIdReq[number], err)
}

func (x *GetAllFileByFatherIdReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetAllFileByFatherIdReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetAllFileByFatherIdResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAllFileByFatherIdResp[number], err)
}

func (x *GetAllFileByFatherIdResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v File
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *GetAllFileByFatherIdResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CalFileSizeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CalFileSizeReq[number], err)
}

func (x *CalFileSizeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CalFileSizeReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Size = &tmp
	return offset, err
}

func (x *CalFileSizeReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Path, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CalFileSizeReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Op, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *CalFileSizeResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CalFileSizeResp[number], err)
}

func (x *CalFileSizeResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileCountReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetFileCountResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetFileTypeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetFileTypeResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetFileInfoInPublicByFileIdReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileInfoInPublicByFileIdReq[number], err)
}

func (x *GetFileInfoInPublicByFileIdReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileInfoInPublicByFileIdResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileInfoInPublicByFileIdResp[number], err)
}

func (x *GetFileInfoInPublicByFileIdResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PublicFile
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.File = &v
	return offset, nil
}

func (x *GetFileInfoInPublicByFileIdResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPublicFileByFileIdWithUserIdReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPublicFileByFileIdWithUserIdReq[number], err)
}

func (x *GetPublicFileByFileIdWithUserIdReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPublicFileByFileIdWithUserIdReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPublicFileByFileIdWithUserIdResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPublicFileByFileIdWithUserIdResp[number], err)
}

func (x *GetPublicFileByFileIdWithUserIdResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PublicFile
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.File = &v
	return offset, nil
}

func (x *GetPublicFileByFileIdWithUserIdResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPublicByFileIdsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPublicByFileIdsReq[number], err)
}

func (x *GetPublicByFileIdsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.FileIds = append(x.FileIds, v)
	return offset, err
}

func (x *GetPublicByFileIdsReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPublicByFileIdsResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPublicByFileIdsResp[number], err)
}

func (x *GetPublicByFileIdsResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PublicFile
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FileIds = append(x.FileIds, &v)
	return offset, nil
}

func (x *GetPublicByFileIdsResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CalPublicFileSizeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CalPublicFileSizeReq[number], err)
}

func (x *CalPublicFileSizeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CalPublicFileSizeReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Size = &tmp
	return offset, err
}

func (x *CalPublicFileSizeReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Path, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CalPublicFileSizeReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Op, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *CalPublicFileSizeResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CalPublicFileSizeResp[number], err)
}

func (x *CalPublicFileSizeResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPublicFilesByUserIdReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPublicFilesByUserIdReq[number], err)
}

func (x *GetPublicFilesByUserIdReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPublicFilesByUserIdResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPublicFilesByUserIdResp[number], err)
}

func (x *GetPublicFilesByUserIdResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PublicFile
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *GetPublicFilesByFatherIdReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPublicFilesByFatherIdReq[number], err)
}

func (x *GetPublicFilesByFatherIdReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPublicFilesByFatherIdResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPublicFilesByFatherIdResp[number], err)
}

func (x *GetPublicFilesByFatherIdResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PublicFile
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *GetPublicFilesByFatherIdResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetAllPublicFileByFatherIdReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAllPublicFileByFatherIdReq[number], err)
}

func (x *GetAllPublicFileByFatherIdReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetAllPublicFileByFatherIdResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAllPublicFileByFatherIdResp[number], err)
}

func (x *GetAllPublicFileByFatherIdResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PublicFile
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *GetAllPublicFileByFatherIdResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileBySharingCodeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileBySharingCodeReq[number], err)
}

func (x *GetFileBySharingCodeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.SharingCode, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileBySharingCodeResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileBySharingCodeResp[number], err)
}

func (x *GetFileBySharingCodeResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v File
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *GetFileBySharingCodeResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteExpiredFilesReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeleteExpiredFilesResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeleteExpiredShareCodesReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeleteExpiredShareCodesResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *UploadFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UploadFileReq[number], err)
}

func (x *UploadFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v []byte
	v, offset, err = fastpb.ReadBytes(buf, _type)
	if err != nil {
		return offset, err
	}
	x.File = append(x.File, v)
	return offset, err
}

func (x *UploadFileReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Name = append(x.Name, v)
	return offset, err
}

func (x *UploadFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *AskUploadFileReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AskUploadFileReq[number], err)
}

func (x *AskUploadFileReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Size, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AskUploadFileReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AskUploadFileReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AskUploadFileReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Type = Type(v)
	return offset, nil
}

func (x *AskUploadFileReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Md5, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AskUploadFileReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.FatherId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AskUploadFileReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AskUploadFileReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Ok, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *AskUploadFileResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *File) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *File) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *File) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *File) fastWriteField3(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetType()))
	return offset
}

func (x *File) fastWriteField4(buf []byte) (offset int) {
	if x.Path == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetPath())
	return offset
}

func (x *File) fastWriteField5(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetUserId())
	return offset
}

func (x *File) fastWriteField6(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetFatherId())
	return offset
}

func (x *File) fastWriteField7(buf []byte) (offset int) {
	if x.Size == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetSize())
	return offset
}

func (x *File) fastWriteField8(buf []byte) (offset int) {
	if x.Md5 == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetMd5())
	return offset
}

func (x *File) fastWriteField9(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetUpdateTime())
	return offset
}

func (x *PublicFile) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	return offset
}

func (x *PublicFile) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *PublicFile) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *PublicFile) fastWriteField3(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetType()))
	return offset
}

func (x *PublicFile) fastWriteField4(buf []byte) (offset int) {
	if x.Path == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetPath())
	return offset
}

func (x *PublicFile) fastWriteField5(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetUserId())
	return offset
}

func (x *PublicFile) fastWriteField6(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetFatherId())
	return offset
}

func (x *PublicFile) fastWriteField7(buf []byte) (offset int) {
	if x.Size == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetSize())
	return offset
}

func (x *PublicFile) fastWriteField8(buf []byte) (offset int) {
	if x.Md5 == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetMd5())
	return offset
}

func (x *PublicFile) fastWriteField9(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetUpdateTime())
	return offset
}

func (x *PublicFile) fastWriteField10(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetDescription())
	return offset
}

func (x *CosInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *CosInfo) fastWriteField1(buf []byte) (offset int) {
	if x.SecretId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetSecretId())
	return offset
}

func (x *CosInfo) fastWriteField2(buf []byte) (offset int) {
	if x.SecretKey == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSecretKey())
	return offset
}

func (x *CosInfo) fastWriteField3(buf []byte) (offset int) {
	if x.SessionToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetSessionToken())
	return offset
}

func (x *CosInfo) fastWriteField4(buf []byte) (offset int) {
	if x.BucketName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetBucketName())
	return offset
}

func (x *GetCosInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetCosInfoReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *GetCosInfoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetCosInfoResp) fastWriteField1(buf []byte) (offset int) {
	if x.Cos == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetCos())
	return offset
}

func (x *GetCosInfoResp) fastWriteField2(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetError())
	return offset
}

func (x *GetFileByMd5Req) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetFileByMd5Req) fastWriteField1(buf []byte) (offset int) {
	if x.Md5 == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMd5())
	return offset
}

func (x *GetFileByMd5Resp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFileByMd5Resp) fastWriteField1(buf []byte) (offset int) {
	if !x.Ok {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetOk())
	return offset
}

func (x *GetFileByMd5Resp) fastWriteField2(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetError())
	return offset
}

func (x *GetFileInfoByFileIdReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetFileInfoByFileIdReq) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *GetFileInfoByFileIdResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFileInfoByFileIdResp) fastWriteField1(buf []byte) (offset int) {
	if x.File == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFile())
	return offset
}

func (x *GetFileInfoByFileIdResp) fastWriteField2(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetError())
	return offset
}

func (x *GetFileByFileIdWithUserIdReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFileByFileIdWithUserIdReq) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *GetFileByFileIdWithUserIdReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *GetFileByFileIdWithUserIdResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFileByFileIdWithUserIdResp) fastWriteField1(buf []byte) (offset int) {
	if x.File == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFile())
	return offset
}

func (x *GetFileByFileIdWithUserIdResp) fastWriteField2(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetError())
	return offset
}

func (x *GetFileInfoByFileIdsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFileInfoByFileIdsReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.FileIds) == 0 {
		return offset
	}
	for i := range x.GetFileIds() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetFileIds()[i])
	}
	return offset
}

func (x *GetFileInfoByFileIdsReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *GetFileInfoByFileIdsResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFileInfoByFileIdsResp) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *GetFileInfoByFileIdsResp) fastWriteField2(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetError())
	return offset
}

func (x *GetFileInfoByFileIdsWithUserIdReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFileInfoByFileIdsWithUserIdReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.FileIds) == 0 {
		return offset
	}
	for i := range x.GetFileIds() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetFileIds()[i])
	}
	return offset
}

func (x *GetFileInfoByFileIdsWithUserIdReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *GetFileInfoByFileIdsWithUserIdResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFileInfoByFileIdsWithUserIdResp) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *GetFileInfoByFileIdsWithUserIdResp) fastWriteField2(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetError())
	return offset
}

func (x *GetFilesByFatherIdReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetFilesByFatherIdReq) fastWriteField1(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFatherId())
	return offset
}

func (x *GetFilesByFatherIdResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFilesByFatherIdResp) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *GetFilesByFatherIdResp) fastWriteField2(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetError())
	return offset
}

func (x *GetFilesByFatherIdWithUserIdReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFilesByFatherIdWithUserIdReq) fastWriteField1(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFatherId())
	return offset
}

func (x *GetFilesByFatherIdWithUserIdReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *GetFilesByFatherIdWithUserIdResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFilesByFatherIdWithUserIdResp) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *GetFilesByFatherIdWithUserIdResp) fastWriteField2(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetError())
	return offset
}

func (x *GetAllFileByFatherIdReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetAllFileByFatherIdReq) fastWriteField1(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFatherId())
	return offset
}

func (x *GetAllFileByFatherIdReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *GetAllFileByFatherIdResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetAllFileByFatherIdResp) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *GetAllFileByFatherIdResp) fastWriteField2(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetError())
	return offset
}

func (x *CalFileSizeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *CalFileSizeReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *CalFileSizeReq) fastWriteField2(buf []byte) (offset int) {
	if x.Size == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetSize())
	return offset
}

func (x *CalFileSizeReq) fastWriteField3(buf []byte) (offset int) {
	if x.Path == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetPath())
	return offset
}

func (x *CalFileSizeReq) fastWriteField4(buf []byte) (offset int) {
	if !x.Op {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 4, x.GetOp())
	return offset
}

func (x *CalFileSizeResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CalFileSizeResp) fastWriteField1(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetError())
	return offset
}

func (x *GetFileCountReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetFileCountResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetFileTypeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetFileTypeResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetFileInfoInPublicByFileIdReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetFileInfoInPublicByFileIdReq) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *GetFileInfoInPublicByFileIdResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFileInfoInPublicByFileIdResp) fastWriteField1(buf []byte) (offset int) {
	if x.File == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFile())
	return offset
}

func (x *GetFileInfoInPublicByFileIdResp) fastWriteField2(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetError())
	return offset
}

func (x *GetPublicFileByFileIdWithUserIdReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetPublicFileByFileIdWithUserIdReq) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *GetPublicFileByFileIdWithUserIdReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *GetPublicFileByFileIdWithUserIdResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetPublicFileByFileIdWithUserIdResp) fastWriteField1(buf []byte) (offset int) {
	if x.File == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFile())
	return offset
}

func (x *GetPublicFileByFileIdWithUserIdResp) fastWriteField2(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetError())
	return offset
}

func (x *GetPublicByFileIdsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetPublicByFileIdsReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.FileIds) == 0 {
		return offset
	}
	for i := range x.GetFileIds() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetFileIds()[i])
	}
	return offset
}

func (x *GetPublicByFileIdsReq) fastWriteField2(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetError())
	return offset
}

func (x *GetPublicByFileIdsResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetPublicByFileIdsResp) fastWriteField1(buf []byte) (offset int) {
	if x.FileIds == nil {
		return offset
	}
	for i := range x.GetFileIds() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFileIds()[i])
	}
	return offset
}

func (x *GetPublicByFileIdsResp) fastWriteField2(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetError())
	return offset
}

func (x *CalPublicFileSizeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *CalPublicFileSizeReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *CalPublicFileSizeReq) fastWriteField2(buf []byte) (offset int) {
	if x.Size == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetSize())
	return offset
}

func (x *CalPublicFileSizeReq) fastWriteField3(buf []byte) (offset int) {
	if x.Path == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetPath())
	return offset
}

func (x *CalPublicFileSizeReq) fastWriteField4(buf []byte) (offset int) {
	if !x.Op {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 4, x.GetOp())
	return offset
}

func (x *CalPublicFileSizeResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CalPublicFileSizeResp) fastWriteField1(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetError())
	return offset
}

func (x *GetPublicFilesByUserIdReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPublicFilesByUserIdReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *GetPublicFilesByUserIdResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPublicFilesByUserIdResp) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *GetPublicFilesByFatherIdReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPublicFilesByFatherIdReq) fastWriteField1(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFatherId())
	return offset
}

func (x *GetPublicFilesByFatherIdResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetPublicFilesByFatherIdResp) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *GetPublicFilesByFatherIdResp) fastWriteField2(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetError())
	return offset
}

func (x *GetAllPublicFileByFatherIdReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetAllPublicFileByFatherIdReq) fastWriteField1(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFatherId())
	return offset
}

func (x *GetAllPublicFileByFatherIdResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetAllPublicFileByFatherIdResp) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *GetAllPublicFileByFatherIdResp) fastWriteField2(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetError())
	return offset
}

func (x *GetFileBySharingCodeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetFileBySharingCodeReq) fastWriteField1(buf []byte) (offset int) {
	if x.SharingCode == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetSharingCode())
	return offset
}

func (x *GetFileBySharingCodeResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFileBySharingCodeResp) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *GetFileBySharingCodeResp) fastWriteField2(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetError())
	return offset
}

func (x *DeleteExpiredFilesReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeleteExpiredFilesResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeleteExpiredShareCodesReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeleteExpiredShareCodesResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *UploadFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UploadFileReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.File) == 0 {
		return offset
	}
	for i := range x.GetFile() {
		offset += fastpb.WriteBytes(buf[offset:], 1, x.GetFile()[i])
	}
	return offset
}

func (x *UploadFileReq) fastWriteField2(buf []byte) (offset int) {
	if len(x.Name) == 0 {
		return offset
	}
	for i := range x.GetName() {
		offset += fastpb.WriteString(buf[offset:], 2, x.GetName()[i])
	}
	return offset
}

func (x *UploadFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *AskUploadFileReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *AskUploadFileReq) fastWriteField1(buf []byte) (offset int) {
	if x.Size == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetSize())
	return offset
}

func (x *AskUploadFileReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *AskUploadFileReq) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *AskUploadFileReq) fastWriteField4(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetType()))
	return offset
}

func (x *AskUploadFileReq) fastWriteField5(buf []byte) (offset int) {
	if x.Md5 == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetMd5())
	return offset
}

func (x *AskUploadFileReq) fastWriteField6(buf []byte) (offset int) {
	if x.FatherId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetFatherId())
	return offset
}

func (x *AskUploadFileReq) fastWriteField7(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetFileId())
	return offset
}

func (x *AskUploadFileReq) fastWriteField8(buf []byte) (offset int) {
	if !x.Ok {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 8, x.GetOk())
	return offset
}

func (x *AskUploadFileResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *File) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *File) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *File) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *File) sizeField3() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetType()))
	return n
}

func (x *File) sizeField4() (n int) {
	if x.Path == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetPath())
	return n
}

func (x *File) sizeField5() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetUserId())
	return n
}

func (x *File) sizeField6() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetFatherId())
	return n
}

func (x *File) sizeField7() (n int) {
	if x.Size == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetSize())
	return n
}

func (x *File) sizeField8() (n int) {
	if x.Md5 == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetMd5())
	return n
}

func (x *File) sizeField9() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetUpdateTime())
	return n
}

func (x *PublicFile) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	return n
}

func (x *PublicFile) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *PublicFile) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *PublicFile) sizeField3() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetType()))
	return n
}

func (x *PublicFile) sizeField4() (n int) {
	if x.Path == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetPath())
	return n
}

func (x *PublicFile) sizeField5() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetUserId())
	return n
}

func (x *PublicFile) sizeField6() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetFatherId())
	return n
}

func (x *PublicFile) sizeField7() (n int) {
	if x.Size == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetSize())
	return n
}

func (x *PublicFile) sizeField8() (n int) {
	if x.Md5 == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetMd5())
	return n
}

func (x *PublicFile) sizeField9() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetUpdateTime())
	return n
}

func (x *PublicFile) sizeField10() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(10, x.GetDescription())
	return n
}

func (x *CosInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *CosInfo) sizeField1() (n int) {
	if x.SecretId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetSecretId())
	return n
}

func (x *CosInfo) sizeField2() (n int) {
	if x.SecretKey == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetSecretKey())
	return n
}

func (x *CosInfo) sizeField3() (n int) {
	if x.SessionToken == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetSessionToken())
	return n
}

func (x *CosInfo) sizeField4() (n int) {
	if x.BucketName == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetBucketName())
	return n
}

func (x *GetCosInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetCosInfoReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *GetCosInfoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetCosInfoResp) sizeField1() (n int) {
	if x.Cos == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetCos())
	return n
}

func (x *GetCosInfoResp) sizeField2() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetError())
	return n
}

func (x *GetFileByMd5Req) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetFileByMd5Req) sizeField1() (n int) {
	if x.Md5 == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMd5())
	return n
}

func (x *GetFileByMd5Resp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFileByMd5Resp) sizeField1() (n int) {
	if !x.Ok {
		return n
	}
	n += fastpb.SizeBool(1, x.GetOk())
	return n
}

func (x *GetFileByMd5Resp) sizeField2() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetError())
	return n
}

func (x *GetFileInfoByFileIdReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetFileInfoByFileIdReq) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *GetFileInfoByFileIdResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFileInfoByFileIdResp) sizeField1() (n int) {
	if x.File == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFile())
	return n
}

func (x *GetFileInfoByFileIdResp) sizeField2() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetError())
	return n
}

func (x *GetFileByFileIdWithUserIdReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFileByFileIdWithUserIdReq) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *GetFileByFileIdWithUserIdReq) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *GetFileByFileIdWithUserIdResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFileByFileIdWithUserIdResp) sizeField1() (n int) {
	if x.File == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFile())
	return n
}

func (x *GetFileByFileIdWithUserIdResp) sizeField2() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetError())
	return n
}

func (x *GetFileInfoByFileIdsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFileInfoByFileIdsReq) sizeField1() (n int) {
	if len(x.FileIds) == 0 {
		return n
	}
	for i := range x.GetFileIds() {
		n += fastpb.SizeString(1, x.GetFileIds()[i])
	}
	return n
}

func (x *GetFileInfoByFileIdsReq) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *GetFileInfoByFileIdsResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFileInfoByFileIdsResp) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *GetFileInfoByFileIdsResp) sizeField2() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetError())
	return n
}

func (x *GetFileInfoByFileIdsWithUserIdReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFileInfoByFileIdsWithUserIdReq) sizeField1() (n int) {
	if len(x.FileIds) == 0 {
		return n
	}
	for i := range x.GetFileIds() {
		n += fastpb.SizeString(1, x.GetFileIds()[i])
	}
	return n
}

func (x *GetFileInfoByFileIdsWithUserIdReq) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *GetFileInfoByFileIdsWithUserIdResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFileInfoByFileIdsWithUserIdResp) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *GetFileInfoByFileIdsWithUserIdResp) sizeField2() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetError())
	return n
}

func (x *GetFilesByFatherIdReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetFilesByFatherIdReq) sizeField1() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFatherId())
	return n
}

func (x *GetFilesByFatherIdResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFilesByFatherIdResp) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *GetFilesByFatherIdResp) sizeField2() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetError())
	return n
}

func (x *GetFilesByFatherIdWithUserIdReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFilesByFatherIdWithUserIdReq) sizeField1() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFatherId())
	return n
}

func (x *GetFilesByFatherIdWithUserIdReq) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *GetFilesByFatherIdWithUserIdResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFilesByFatherIdWithUserIdResp) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *GetFilesByFatherIdWithUserIdResp) sizeField2() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetError())
	return n
}

func (x *GetAllFileByFatherIdReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetAllFileByFatherIdReq) sizeField1() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFatherId())
	return n
}

func (x *GetAllFileByFatherIdReq) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *GetAllFileByFatherIdResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetAllFileByFatherIdResp) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *GetAllFileByFatherIdResp) sizeField2() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetError())
	return n
}

func (x *CalFileSizeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *CalFileSizeReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *CalFileSizeReq) sizeField2() (n int) {
	if x.Size == nil {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetSize())
	return n
}

func (x *CalFileSizeReq) sizeField3() (n int) {
	if x.Path == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetPath())
	return n
}

func (x *CalFileSizeReq) sizeField4() (n int) {
	if !x.Op {
		return n
	}
	n += fastpb.SizeBool(4, x.GetOp())
	return n
}

func (x *CalFileSizeResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CalFileSizeResp) sizeField1() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetError())
	return n
}

func (x *GetFileCountReq) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetFileCountResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetFileTypeReq) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetFileTypeResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetFileInfoInPublicByFileIdReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetFileInfoInPublicByFileIdReq) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *GetFileInfoInPublicByFileIdResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFileInfoInPublicByFileIdResp) sizeField1() (n int) {
	if x.File == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFile())
	return n
}

func (x *GetFileInfoInPublicByFileIdResp) sizeField2() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetError())
	return n
}

func (x *GetPublicFileByFileIdWithUserIdReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetPublicFileByFileIdWithUserIdReq) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *GetPublicFileByFileIdWithUserIdReq) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *GetPublicFileByFileIdWithUserIdResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetPublicFileByFileIdWithUserIdResp) sizeField1() (n int) {
	if x.File == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFile())
	return n
}

func (x *GetPublicFileByFileIdWithUserIdResp) sizeField2() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetError())
	return n
}

func (x *GetPublicByFileIdsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetPublicByFileIdsReq) sizeField1() (n int) {
	if len(x.FileIds) == 0 {
		return n
	}
	for i := range x.GetFileIds() {
		n += fastpb.SizeString(1, x.GetFileIds()[i])
	}
	return n
}

func (x *GetPublicByFileIdsReq) sizeField2() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetError())
	return n
}

func (x *GetPublicByFileIdsResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetPublicByFileIdsResp) sizeField1() (n int) {
	if x.FileIds == nil {
		return n
	}
	for i := range x.GetFileIds() {
		n += fastpb.SizeMessage(1, x.GetFileIds()[i])
	}
	return n
}

func (x *GetPublicByFileIdsResp) sizeField2() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetError())
	return n
}

func (x *CalPublicFileSizeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *CalPublicFileSizeReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *CalPublicFileSizeReq) sizeField2() (n int) {
	if x.Size == nil {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetSize())
	return n
}

func (x *CalPublicFileSizeReq) sizeField3() (n int) {
	if x.Path == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetPath())
	return n
}

func (x *CalPublicFileSizeReq) sizeField4() (n int) {
	if !x.Op {
		return n
	}
	n += fastpb.SizeBool(4, x.GetOp())
	return n
}

func (x *CalPublicFileSizeResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CalPublicFileSizeResp) sizeField1() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetError())
	return n
}

func (x *GetPublicFilesByUserIdReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPublicFilesByUserIdReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *GetPublicFilesByUserIdResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPublicFilesByUserIdResp) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *GetPublicFilesByFatherIdReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPublicFilesByFatherIdReq) sizeField1() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFatherId())
	return n
}

func (x *GetPublicFilesByFatherIdResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetPublicFilesByFatherIdResp) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *GetPublicFilesByFatherIdResp) sizeField2() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetError())
	return n
}

func (x *GetAllPublicFileByFatherIdReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetAllPublicFileByFatherIdReq) sizeField1() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFatherId())
	return n
}

func (x *GetAllPublicFileByFatherIdResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetAllPublicFileByFatherIdResp) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *GetAllPublicFileByFatherIdResp) sizeField2() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetError())
	return n
}

func (x *GetFileBySharingCodeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetFileBySharingCodeReq) sizeField1() (n int) {
	if x.SharingCode == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetSharingCode())
	return n
}

func (x *GetFileBySharingCodeResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFileBySharingCodeResp) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *GetFileBySharingCodeResp) sizeField2() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetError())
	return n
}

func (x *DeleteExpiredFilesReq) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeleteExpiredFilesResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeleteExpiredShareCodesReq) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeleteExpiredShareCodesResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *UploadFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UploadFileReq) sizeField1() (n int) {
	if len(x.File) == 0 {
		return n
	}
	for i := range x.GetFile() {
		n += fastpb.SizeBytes(1, x.GetFile()[i])
	}
	return n
}

func (x *UploadFileReq) sizeField2() (n int) {
	if len(x.Name) == 0 {
		return n
	}
	for i := range x.GetName() {
		n += fastpb.SizeString(2, x.GetName()[i])
	}
	return n
}

func (x *UploadFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *AskUploadFileReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *AskUploadFileReq) sizeField1() (n int) {
	if x.Size == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetSize())
	return n
}

func (x *AskUploadFileReq) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *AskUploadFileReq) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *AskUploadFileReq) sizeField4() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetType()))
	return n
}

func (x *AskUploadFileReq) sizeField5() (n int) {
	if x.Md5 == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetMd5())
	return n
}

func (x *AskUploadFileReq) sizeField6() (n int) {
	if x.FatherId == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetFatherId())
	return n
}

func (x *AskUploadFileReq) sizeField7() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetFileId())
	return n
}

func (x *AskUploadFileReq) sizeField8() (n int) {
	if !x.Ok {
		return n
	}
	n += fastpb.SizeBool(8, x.GetOk())
	return n
}

func (x *AskUploadFileResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

var fieldIDToName_File = map[int32]string{
	1: "FileId",
	2: "Name",
	3: "Type",
	4: "Path",
	5: "UserId",
	6: "FatherId",
	7: "Size",
	8: "Md5",
	9: "UpdateTime",
}

var fieldIDToName_PublicFile = map[int32]string{
	1:  "FileId",
	2:  "Name",
	3:  "Type",
	4:  "Path",
	5:  "UserId",
	6:  "FatherId",
	7:  "Size",
	8:  "Md5",
	9:  "UpdateTime",
	10: "Description",
}

var fieldIDToName_CosInfo = map[int32]string{
	1: "SecretId",
	2: "SecretKey",
	3: "SessionToken",
	4: "BucketName",
}

var fieldIDToName_GetCosInfoReq = map[int32]string{
	1: "UserId",
}

var fieldIDToName_GetCosInfoResp = map[int32]string{
	1: "Cos",
	2: "Error",
}

var fieldIDToName_GetFileByMd5Req = map[int32]string{
	1: "Md5",
}

var fieldIDToName_GetFileByMd5Resp = map[int32]string{
	1: "Ok",
	2: "Error",
}

var fieldIDToName_GetFileInfoByFileIdReq = map[int32]string{
	1: "FileId",
}

var fieldIDToName_GetFileInfoByFileIdResp = map[int32]string{
	1: "File",
	2: "Error",
}

var fieldIDToName_GetFileByFileIdWithUserIdReq = map[int32]string{
	1: "FileId",
	2: "UserId",
}

var fieldIDToName_GetFileByFileIdWithUserIdResp = map[int32]string{
	1: "File",
	2: "Error",
}

var fieldIDToName_GetFileInfoByFileIdsReq = map[int32]string{
	1: "FileIds",
	2: "UserId",
}

var fieldIDToName_GetFileInfoByFileIdsResp = map[int32]string{
	1: "Files",
	2: "Error",
}

var fieldIDToName_GetFileInfoByFileIdsWithUserIdReq = map[int32]string{
	1: "FileIds",
	2: "UserId",
}

var fieldIDToName_GetFileInfoByFileIdsWithUserIdResp = map[int32]string{
	1: "Files",
	2: "Error",
}

var fieldIDToName_GetFilesByFatherIdReq = map[int32]string{
	1: "FatherId",
}

var fieldIDToName_GetFilesByFatherIdResp = map[int32]string{
	1: "Files",
	2: "Error",
}

var fieldIDToName_GetFilesByFatherIdWithUserIdReq = map[int32]string{
	1: "FatherId",
	2: "UserId",
}

var fieldIDToName_GetFilesByFatherIdWithUserIdResp = map[int32]string{
	1: "Files",
	2: "Error",
}

var fieldIDToName_GetAllFileByFatherIdReq = map[int32]string{
	1: "FatherId",
	2: "UserId",
}

var fieldIDToName_GetAllFileByFatherIdResp = map[int32]string{
	1: "Files",
	2: "Error",
}

var fieldIDToName_CalFileSizeReq = map[int32]string{
	1: "UserId",
	2: "Size",
	3: "Path",
	4: "Op",
}

var fieldIDToName_CalFileSizeResp = map[int32]string{
	1: "Error",
}

var fieldIDToName_GetFileCountReq = map[int32]string{}

var fieldIDToName_GetFileCountResp = map[int32]string{}

var fieldIDToName_GetFileTypeReq = map[int32]string{}

var fieldIDToName_GetFileTypeResp = map[int32]string{}

var fieldIDToName_GetFileInfoInPublicByFileIdReq = map[int32]string{
	1: "FileId",
}

var fieldIDToName_GetFileInfoInPublicByFileIdResp = map[int32]string{
	1: "File",
	2: "Error",
}

var fieldIDToName_GetPublicFileByFileIdWithUserIdReq = map[int32]string{
	1: "FileId",
	2: "UserId",
}

var fieldIDToName_GetPublicFileByFileIdWithUserIdResp = map[int32]string{
	1: "File",
	2: "Error",
}

var fieldIDToName_GetPublicByFileIdsReq = map[int32]string{
	1: "FileIds",
	2: "Error",
}

var fieldIDToName_GetPublicByFileIdsResp = map[int32]string{
	1: "FileIds",
	2: "Error",
}

var fieldIDToName_CalPublicFileSizeReq = map[int32]string{
	1: "UserId",
	2: "Size",
	3: "Path",
	4: "Op",
}

var fieldIDToName_CalPublicFileSizeResp = map[int32]string{
	1: "Error",
}

var fieldIDToName_GetPublicFilesByUserIdReq = map[int32]string{
	1: "UserId",
}

var fieldIDToName_GetPublicFilesByUserIdResp = map[int32]string{
	1: "Files",
}

var fieldIDToName_GetPublicFilesByFatherIdReq = map[int32]string{
	1: "FatherId",
}

var fieldIDToName_GetPublicFilesByFatherIdResp = map[int32]string{
	1: "Files",
	2: "Error",
}

var fieldIDToName_GetAllPublicFileByFatherIdReq = map[int32]string{
	1: "FatherId",
}

var fieldIDToName_GetAllPublicFileByFatherIdResp = map[int32]string{
	1: "Files",
	2: "Error",
}

var fieldIDToName_GetFileBySharingCodeReq = map[int32]string{
	1: "SharingCode",
}

var fieldIDToName_GetFileBySharingCodeResp = map[int32]string{
	1: "Files",
	2: "Error",
}

var fieldIDToName_DeleteExpiredFilesReq = map[int32]string{}

var fieldIDToName_DeleteExpiredFilesResp = map[int32]string{}

var fieldIDToName_DeleteExpiredShareCodesReq = map[int32]string{}

var fieldIDToName_DeleteExpiredShareCodesResp = map[int32]string{}

var fieldIDToName_UploadFileReq = map[int32]string{
	1: "File",
	2: "Name",
}

var fieldIDToName_UploadFileResp = map[int32]string{}

var fieldIDToName_AskUploadFileReq = map[int32]string{
	1: "Size",
	2: "UserId",
	3: "Name",
	4: "Type",
	5: "Md5",
	6: "FatherId",
	7: "FileId",
	8: "Ok",
}

var fieldIDToName_AskUploadFileResp = map[int32]string{}
