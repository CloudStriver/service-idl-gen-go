// Code generated by Kitex v0.8.0. DO NOT EDIT.

package relationservice

import (
	"context"
	relation "github.com/CloudStriver/service-idl-gen-go/kitex_gen/platform/relation"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*relation.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateRelation":   kitex.NewMethodInfo(createRelationHandler, newCreateRelationArgs, newCreateRelationResult, false),
		"GetRelations":     kitex.NewMethodInfo(getRelationsHandler, newGetRelationsArgs, newGetRelationsResult, false),
		"GetRelationCount": kitex.NewMethodInfo(getRelationCountHandler, newGetRelationCountArgs, newGetRelationCountResult, false),
		"DeleteRelation":   kitex.NewMethodInfo(deleteRelationHandler, newDeleteRelationArgs, newDeleteRelationResult, false),
		"GetRelation":      kitex.NewMethodInfo(getRelationHandler, newGetRelationArgs, newGetRelationResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "platform.relation",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func createRelationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.CreateRelationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).CreateRelation(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateRelationArgs:
		success, err := handler.(relation.RelationService).CreateRelation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateRelationResult)
		realResult.Success = success
	}
	return nil
}
func newCreateRelationArgs() interface{} {
	return &CreateRelationArgs{}
}

func newCreateRelationResult() interface{} {
	return &CreateRelationResult{}
}

type CreateRelationArgs struct {
	Req *relation.CreateRelationReq
}

func (p *CreateRelationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.CreateRelationReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateRelationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateRelationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateRelationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateRelationArgs) Unmarshal(in []byte) error {
	msg := new(relation.CreateRelationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateRelationArgs_Req_DEFAULT *relation.CreateRelationReq

func (p *CreateRelationArgs) GetReq() *relation.CreateRelationReq {
	if !p.IsSetReq() {
		return CreateRelationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateRelationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateRelationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateRelationResult struct {
	Success *relation.CreateRelationResp
}

var CreateRelationResult_Success_DEFAULT *relation.CreateRelationResp

func (p *CreateRelationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.CreateRelationResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateRelationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateRelationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateRelationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateRelationResult) Unmarshal(in []byte) error {
	msg := new(relation.CreateRelationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateRelationResult) GetSuccess() *relation.CreateRelationResp {
	if !p.IsSetSuccess() {
		return CreateRelationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateRelationResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.CreateRelationResp)
}

func (p *CreateRelationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateRelationResult) GetResult() interface{} {
	return p.Success
}

func getRelationsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.GetRelationsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).GetRelations(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetRelationsArgs:
		success, err := handler.(relation.RelationService).GetRelations(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetRelationsResult)
		realResult.Success = success
	}
	return nil
}
func newGetRelationsArgs() interface{} {
	return &GetRelationsArgs{}
}

func newGetRelationsResult() interface{} {
	return &GetRelationsResult{}
}

type GetRelationsArgs struct {
	Req *relation.GetRelationsReq
}

func (p *GetRelationsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.GetRelationsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetRelationsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetRelationsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetRelationsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetRelationsArgs) Unmarshal(in []byte) error {
	msg := new(relation.GetRelationsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetRelationsArgs_Req_DEFAULT *relation.GetRelationsReq

func (p *GetRelationsArgs) GetReq() *relation.GetRelationsReq {
	if !p.IsSetReq() {
		return GetRelationsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetRelationsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetRelationsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetRelationsResult struct {
	Success *relation.GetRelationsResp
}

var GetRelationsResult_Success_DEFAULT *relation.GetRelationsResp

func (p *GetRelationsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.GetRelationsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetRelationsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetRelationsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetRelationsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetRelationsResult) Unmarshal(in []byte) error {
	msg := new(relation.GetRelationsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetRelationsResult) GetSuccess() *relation.GetRelationsResp {
	if !p.IsSetSuccess() {
		return GetRelationsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetRelationsResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.GetRelationsResp)
}

func (p *GetRelationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetRelationsResult) GetResult() interface{} {
	return p.Success
}

func getRelationCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.GetRelationCountReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).GetRelationCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetRelationCountArgs:
		success, err := handler.(relation.RelationService).GetRelationCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetRelationCountResult)
		realResult.Success = success
	}
	return nil
}
func newGetRelationCountArgs() interface{} {
	return &GetRelationCountArgs{}
}

func newGetRelationCountResult() interface{} {
	return &GetRelationCountResult{}
}

type GetRelationCountArgs struct {
	Req *relation.GetRelationCountReq
}

func (p *GetRelationCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.GetRelationCountReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetRelationCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetRelationCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetRelationCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetRelationCountArgs) Unmarshal(in []byte) error {
	msg := new(relation.GetRelationCountReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetRelationCountArgs_Req_DEFAULT *relation.GetRelationCountReq

func (p *GetRelationCountArgs) GetReq() *relation.GetRelationCountReq {
	if !p.IsSetReq() {
		return GetRelationCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetRelationCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetRelationCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetRelationCountResult struct {
	Success *relation.GetRelationCountResp
}

var GetRelationCountResult_Success_DEFAULT *relation.GetRelationCountResp

func (p *GetRelationCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.GetRelationCountResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetRelationCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetRelationCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetRelationCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetRelationCountResult) Unmarshal(in []byte) error {
	msg := new(relation.GetRelationCountResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetRelationCountResult) GetSuccess() *relation.GetRelationCountResp {
	if !p.IsSetSuccess() {
		return GetRelationCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetRelationCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.GetRelationCountResp)
}

func (p *GetRelationCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetRelationCountResult) GetResult() interface{} {
	return p.Success
}

func deleteRelationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.DeleteRelationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).DeleteRelation(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteRelationArgs:
		success, err := handler.(relation.RelationService).DeleteRelation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteRelationResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteRelationArgs() interface{} {
	return &DeleteRelationArgs{}
}

func newDeleteRelationResult() interface{} {
	return &DeleteRelationResult{}
}

type DeleteRelationArgs struct {
	Req *relation.DeleteRelationReq
}

func (p *DeleteRelationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.DeleteRelationReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteRelationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteRelationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteRelationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteRelationArgs) Unmarshal(in []byte) error {
	msg := new(relation.DeleteRelationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteRelationArgs_Req_DEFAULT *relation.DeleteRelationReq

func (p *DeleteRelationArgs) GetReq() *relation.DeleteRelationReq {
	if !p.IsSetReq() {
		return DeleteRelationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteRelationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteRelationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteRelationResult struct {
	Success *relation.DeleteRelationResp
}

var DeleteRelationResult_Success_DEFAULT *relation.DeleteRelationResp

func (p *DeleteRelationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.DeleteRelationResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteRelationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteRelationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteRelationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteRelationResult) Unmarshal(in []byte) error {
	msg := new(relation.DeleteRelationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteRelationResult) GetSuccess() *relation.DeleteRelationResp {
	if !p.IsSetSuccess() {
		return DeleteRelationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteRelationResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.DeleteRelationResp)
}

func (p *DeleteRelationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteRelationResult) GetResult() interface{} {
	return p.Success
}

func getRelationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.GetRelationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).GetRelation(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetRelationArgs:
		success, err := handler.(relation.RelationService).GetRelation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetRelationResult)
		realResult.Success = success
	}
	return nil
}
func newGetRelationArgs() interface{} {
	return &GetRelationArgs{}
}

func newGetRelationResult() interface{} {
	return &GetRelationResult{}
}

type GetRelationArgs struct {
	Req *relation.GetRelationReq
}

func (p *GetRelationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.GetRelationReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetRelationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetRelationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetRelationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetRelationArgs) Unmarshal(in []byte) error {
	msg := new(relation.GetRelationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetRelationArgs_Req_DEFAULT *relation.GetRelationReq

func (p *GetRelationArgs) GetReq() *relation.GetRelationReq {
	if !p.IsSetReq() {
		return GetRelationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetRelationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetRelationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetRelationResult struct {
	Success *relation.GetRelationResp
}

var GetRelationResult_Success_DEFAULT *relation.GetRelationResp

func (p *GetRelationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.GetRelationResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetRelationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetRelationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetRelationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetRelationResult) Unmarshal(in []byte) error {
	msg := new(relation.GetRelationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetRelationResult) GetSuccess() *relation.GetRelationResp {
	if !p.IsSetSuccess() {
		return GetRelationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetRelationResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.GetRelationResp)
}

func (p *GetRelationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetRelationResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateRelation(ctx context.Context, Req *relation.CreateRelationReq) (r *relation.CreateRelationResp, err error) {
	var _args CreateRelationArgs
	_args.Req = Req
	var _result CreateRelationResult
	if err = p.c.Call(ctx, "CreateRelation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRelations(ctx context.Context, Req *relation.GetRelationsReq) (r *relation.GetRelationsResp, err error) {
	var _args GetRelationsArgs
	_args.Req = Req
	var _result GetRelationsResult
	if err = p.c.Call(ctx, "GetRelations", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRelationCount(ctx context.Context, Req *relation.GetRelationCountReq) (r *relation.GetRelationCountResp, err error) {
	var _args GetRelationCountArgs
	_args.Req = Req
	var _result GetRelationCountResult
	if err = p.c.Call(ctx, "GetRelationCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteRelation(ctx context.Context, Req *relation.DeleteRelationReq) (r *relation.DeleteRelationResp, err error) {
	var _args DeleteRelationArgs
	_args.Req = Req
	var _result DeleteRelationResult
	if err = p.c.Call(ctx, "DeleteRelation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRelation(ctx context.Context, Req *relation.GetRelationReq) (r *relation.GetRelationResp, err error) {
	var _args GetRelationArgs
	_args.Req = Req
	var _result GetRelationResult
	if err = p.c.Call(ctx, "GetRelation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
