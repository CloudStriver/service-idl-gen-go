// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package relation

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Relation) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Relation[number], err)
}

func (x *Relation) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FromType, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Relation) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FromId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Relation) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ToType, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Relation) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ToId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Relation) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.RelationType, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Relation) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RelationInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RelationInfo[number], err)
}

func (x *RelationInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FromType, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RelationInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FromId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RelationInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ToType, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RelationInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ToId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RelationInfo) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.RelationType, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Relation) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *Relation) fastWriteField1(buf []byte) (offset int) {
	if x.FromType == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetFromType())
	return offset
}

func (x *Relation) fastWriteField2(buf []byte) (offset int) {
	if x.FromId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFromId())
	return offset
}

func (x *Relation) fastWriteField3(buf []byte) (offset int) {
	if x.ToType == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetToType())
	return offset
}

func (x *Relation) fastWriteField4(buf []byte) (offset int) {
	if x.ToId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetToId())
	return offset
}

func (x *Relation) fastWriteField5(buf []byte) (offset int) {
	if x.RelationType == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetRelationType())
	return offset
}

func (x *Relation) fastWriteField6(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetCreateTime())
	return offset
}

func (x *RelationInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *RelationInfo) fastWriteField1(buf []byte) (offset int) {
	if x.FromType == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetFromType())
	return offset
}

func (x *RelationInfo) fastWriteField2(buf []byte) (offset int) {
	if x.FromId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFromId())
	return offset
}

func (x *RelationInfo) fastWriteField3(buf []byte) (offset int) {
	if x.ToType == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetToType())
	return offset
}

func (x *RelationInfo) fastWriteField4(buf []byte) (offset int) {
	if x.ToId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetToId())
	return offset
}

func (x *RelationInfo) fastWriteField5(buf []byte) (offset int) {
	if x.RelationType == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetRelationType())
	return offset
}

func (x *Relation) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *Relation) sizeField1() (n int) {
	if x.FromType == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetFromType())
	return n
}

func (x *Relation) sizeField2() (n int) {
	if x.FromId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetFromId())
	return n
}

func (x *Relation) sizeField3() (n int) {
	if x.ToType == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetToType())
	return n
}

func (x *Relation) sizeField4() (n int) {
	if x.ToId == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetToId())
	return n
}

func (x *Relation) sizeField5() (n int) {
	if x.RelationType == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetRelationType())
	return n
}

func (x *Relation) sizeField6() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetCreateTime())
	return n
}

func (x *RelationInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *RelationInfo) sizeField1() (n int) {
	if x.FromType == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetFromType())
	return n
}

func (x *RelationInfo) sizeField2() (n int) {
	if x.FromId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetFromId())
	return n
}

func (x *RelationInfo) sizeField3() (n int) {
	if x.ToType == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetToType())
	return n
}

func (x *RelationInfo) sizeField4() (n int) {
	if x.ToId == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetToId())
	return n
}

func (x *RelationInfo) sizeField5() (n int) {
	if x.RelationType == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetRelationType())
	return n
}

var fieldIDToName_Relation = map[int32]string{
	1: "FromType",
	2: "FromId",
	3: "ToType",
	4: "ToId",
	5: "RelationType",
	6: "CreateTime",
}

var fieldIDToName_RelationInfo = map[int32]string{
	1: "FromType",
	2: "FromId",
	3: "ToType",
	4: "ToId",
	5: "RelationType",
}
