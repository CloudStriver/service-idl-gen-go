// Code generated by Kitex v0.8.0. DO NOT EDIT.

package commentservice

import (
	"context"
	comment "github.com/CloudStriver/service-idl-gen-go/kitex_gen/platform/comment"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return commentServiceServiceInfo
}

var commentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CommentService"
	handlerType := (*comment.CommentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetComment":              kitex.NewMethodInfo(getCommentHandler, newGetCommentArgs, newGetCommentResult, false),
		"GetCommentList":          kitex.NewMethodInfo(getCommentListHandler, newGetCommentListArgs, newGetCommentListResult, false),
		"CreateComment":           kitex.NewMethodInfo(createCommentHandler, newCreateCommentArgs, newCreateCommentResult, false),
		"UpdateComment":           kitex.NewMethodInfo(updateCommentHandler, newUpdateCommentArgs, newUpdateCommentResult, false),
		"DeleteComment":           kitex.NewMethodInfo(deleteCommentHandler, newDeleteCommentArgs, newDeleteCommentResult, false),
		"DeleteCommentWithUserId": kitex.NewMethodInfo(deleteCommentWithUserIdHandler, newDeleteCommentWithUserIdArgs, newDeleteCommentWithUserIdResult, false),
		"SetCommentState":         kitex.NewMethodInfo(setCommentStateHandler, newSetCommentStateArgs, newSetCommentStateResult, false),
		"SetCommentAttrs":         kitex.NewMethodInfo(setCommentAttrsHandler, newSetCommentAttrsArgs, newSetCommentAttrsResult, false),
		"GetCommentSubject":       kitex.NewMethodInfo(getCommentSubjectHandler, newGetCommentSubjectArgs, newGetCommentSubjectResult, false),
		"CreateCommentSubject":    kitex.NewMethodInfo(createCommentSubjectHandler, newCreateCommentSubjectArgs, newCreateCommentSubjectResult, false),
		"UpdateCommentSubject":    kitex.NewMethodInfo(updateCommentSubjectHandler, newUpdateCommentSubjectArgs, newUpdateCommentSubjectResult, false),
		"DeleteCommentSubject":    kitex.NewMethodInfo(deleteCommentSubjectHandler, newDeleteCommentSubjectArgs, newDeleteCommentSubjectResult, false),
		"SetCommentSubjectState":  kitex.NewMethodInfo(setCommentSubjectStateHandler, newSetCommentSubjectStateArgs, newSetCommentSubjectStateResult, false),
		"SetCommentSubjectAttrs":  kitex.NewMethodInfo(setCommentSubjectAttrsHandler, newSetCommentSubjectAttrsArgs, newSetCommentSubjectAttrsResult, false),
		"CreateLabel":             kitex.NewMethodInfo(createLabelHandler, newCreateLabelArgs, newCreateLabelResult, false),
		"DeleteLabel":             kitex.NewMethodInfo(deleteLabelHandler, newDeleteLabelArgs, newDeleteLabelResult, false),
		"GetLabel":                kitex.NewMethodInfo(getLabelHandler, newGetLabelArgs, newGetLabelResult, false),
		"GetLabelsInBatch":        kitex.NewMethodInfo(getLabelsInBatchHandler, newGetLabelsInBatchArgs, newGetLabelsInBatchResult, false),
		"UpdateLabel":             kitex.NewMethodInfo(updateLabelHandler, newUpdateLabelArgs, newUpdateLabelResult, false),
		"GetLabels":               kitex.NewMethodInfo(getLabelsHandler, newGetLabelsArgs, newGetLabelsResult, false),
		"CreateObject":            kitex.NewMethodInfo(createObjectHandler, newCreateObjectArgs, newCreateObjectResult, false),
		"CreateObjects":           kitex.NewMethodInfo(createObjectsHandler, newCreateObjectsArgs, newCreateObjectsResult, false),
		"DeleteObject":            kitex.NewMethodInfo(deleteObjectHandler, newDeleteObjectArgs, newDeleteObjectResult, false),
		"GetObjects":              kitex.NewMethodInfo(getObjectsHandler, newGetObjectsArgs, newGetObjectsResult, false),
		"UpdateObject":            kitex.NewMethodInfo(updateObjectHandler, newUpdateObjectArgs, newUpdateObjectResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "platform.comment",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func getCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.GetCommentReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).GetComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetCommentArgs:
		success, err := handler.(comment.CommentService).GetComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCommentResult)
		realResult.Success = success
	}
	return nil
}
func newGetCommentArgs() interface{} {
	return &GetCommentArgs{}
}

func newGetCommentResult() interface{} {
	return &GetCommentResult{}
}

type GetCommentArgs struct {
	Req *comment.GetCommentReq
}

func (p *GetCommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.GetCommentReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetCommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetCommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetCommentArgs) Unmarshal(in []byte) error {
	msg := new(comment.GetCommentReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCommentArgs_Req_DEFAULT *comment.GetCommentReq

func (p *GetCommentArgs) GetReq() *comment.GetCommentReq {
	if !p.IsSetReq() {
		return GetCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetCommentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetCommentResult struct {
	Success *comment.GetCommentResp
}

var GetCommentResult_Success_DEFAULT *comment.GetCommentResp

func (p *GetCommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.GetCommentResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetCommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetCommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetCommentResult) Unmarshal(in []byte) error {
	msg := new(comment.GetCommentResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCommentResult) GetSuccess() *comment.GetCommentResp {
	if !p.IsSetSuccess() {
		return GetCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.GetCommentResp)
}

func (p *GetCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCommentResult) GetResult() interface{} {
	return p.Success
}

func getCommentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.GetCommentListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).GetCommentList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetCommentListArgs:
		success, err := handler.(comment.CommentService).GetCommentList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCommentListResult)
		realResult.Success = success
	}
	return nil
}
func newGetCommentListArgs() interface{} {
	return &GetCommentListArgs{}
}

func newGetCommentListResult() interface{} {
	return &GetCommentListResult{}
}

type GetCommentListArgs struct {
	Req *comment.GetCommentListReq
}

func (p *GetCommentListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.GetCommentListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetCommentListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetCommentListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetCommentListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetCommentListArgs) Unmarshal(in []byte) error {
	msg := new(comment.GetCommentListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCommentListArgs_Req_DEFAULT *comment.GetCommentListReq

func (p *GetCommentListArgs) GetReq() *comment.GetCommentListReq {
	if !p.IsSetReq() {
		return GetCommentListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCommentListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetCommentListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetCommentListResult struct {
	Success *comment.GetCommentListResp
}

var GetCommentListResult_Success_DEFAULT *comment.GetCommentListResp

func (p *GetCommentListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.GetCommentListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetCommentListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetCommentListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetCommentListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetCommentListResult) Unmarshal(in []byte) error {
	msg := new(comment.GetCommentListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCommentListResult) GetSuccess() *comment.GetCommentListResp {
	if !p.IsSetSuccess() {
		return GetCommentListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCommentListResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.GetCommentListResp)
}

func (p *GetCommentListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCommentListResult) GetResult() interface{} {
	return p.Success
}

func createCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.CreateCommentReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).CreateComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateCommentArgs:
		success, err := handler.(comment.CommentService).CreateComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateCommentResult)
		realResult.Success = success
	}
	return nil
}
func newCreateCommentArgs() interface{} {
	return &CreateCommentArgs{}
}

func newCreateCommentResult() interface{} {
	return &CreateCommentResult{}
}

type CreateCommentArgs struct {
	Req *comment.CreateCommentReq
}

func (p *CreateCommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.CreateCommentReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateCommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateCommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateCommentArgs) Unmarshal(in []byte) error {
	msg := new(comment.CreateCommentReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateCommentArgs_Req_DEFAULT *comment.CreateCommentReq

func (p *CreateCommentArgs) GetReq() *comment.CreateCommentReq {
	if !p.IsSetReq() {
		return CreateCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateCommentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateCommentResult struct {
	Success *comment.CreateCommentResp
}

var CreateCommentResult_Success_DEFAULT *comment.CreateCommentResp

func (p *CreateCommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.CreateCommentResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateCommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateCommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateCommentResult) Unmarshal(in []byte) error {
	msg := new(comment.CreateCommentResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateCommentResult) GetSuccess() *comment.CreateCommentResp {
	if !p.IsSetSuccess() {
		return CreateCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.CreateCommentResp)
}

func (p *CreateCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateCommentResult) GetResult() interface{} {
	return p.Success
}

func updateCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.UpdateCommentReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).UpdateComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateCommentArgs:
		success, err := handler.(comment.CommentService).UpdateComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateCommentResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateCommentArgs() interface{} {
	return &UpdateCommentArgs{}
}

func newUpdateCommentResult() interface{} {
	return &UpdateCommentResult{}
}

type UpdateCommentArgs struct {
	Req *comment.UpdateCommentReq
}

func (p *UpdateCommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.UpdateCommentReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateCommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateCommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateCommentArgs) Unmarshal(in []byte) error {
	msg := new(comment.UpdateCommentReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateCommentArgs_Req_DEFAULT *comment.UpdateCommentReq

func (p *UpdateCommentArgs) GetReq() *comment.UpdateCommentReq {
	if !p.IsSetReq() {
		return UpdateCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateCommentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateCommentResult struct {
	Success *comment.UpdateCommentResp
}

var UpdateCommentResult_Success_DEFAULT *comment.UpdateCommentResp

func (p *UpdateCommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.UpdateCommentResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateCommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateCommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateCommentResult) Unmarshal(in []byte) error {
	msg := new(comment.UpdateCommentResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateCommentResult) GetSuccess() *comment.UpdateCommentResp {
	if !p.IsSetSuccess() {
		return UpdateCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.UpdateCommentResp)
}

func (p *UpdateCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateCommentResult) GetResult() interface{} {
	return p.Success
}

func deleteCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.DeleteCommentReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).DeleteComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteCommentArgs:
		success, err := handler.(comment.CommentService).DeleteComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteCommentResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteCommentArgs() interface{} {
	return &DeleteCommentArgs{}
}

func newDeleteCommentResult() interface{} {
	return &DeleteCommentResult{}
}

type DeleteCommentArgs struct {
	Req *comment.DeleteCommentReq
}

func (p *DeleteCommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.DeleteCommentReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteCommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteCommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteCommentArgs) Unmarshal(in []byte) error {
	msg := new(comment.DeleteCommentReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteCommentArgs_Req_DEFAULT *comment.DeleteCommentReq

func (p *DeleteCommentArgs) GetReq() *comment.DeleteCommentReq {
	if !p.IsSetReq() {
		return DeleteCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteCommentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteCommentResult struct {
	Success *comment.DeleteCommentResp
}

var DeleteCommentResult_Success_DEFAULT *comment.DeleteCommentResp

func (p *DeleteCommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.DeleteCommentResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteCommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteCommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteCommentResult) Unmarshal(in []byte) error {
	msg := new(comment.DeleteCommentResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteCommentResult) GetSuccess() *comment.DeleteCommentResp {
	if !p.IsSetSuccess() {
		return DeleteCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.DeleteCommentResp)
}

func (p *DeleteCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteCommentResult) GetResult() interface{} {
	return p.Success
}

func deleteCommentWithUserIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.DeleteCommentWithUserIdReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).DeleteCommentWithUserId(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteCommentWithUserIdArgs:
		success, err := handler.(comment.CommentService).DeleteCommentWithUserId(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteCommentWithUserIdResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteCommentWithUserIdArgs() interface{} {
	return &DeleteCommentWithUserIdArgs{}
}

func newDeleteCommentWithUserIdResult() interface{} {
	return &DeleteCommentWithUserIdResult{}
}

type DeleteCommentWithUserIdArgs struct {
	Req *comment.DeleteCommentWithUserIdReq
}

func (p *DeleteCommentWithUserIdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.DeleteCommentWithUserIdReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteCommentWithUserIdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteCommentWithUserIdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteCommentWithUserIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteCommentWithUserIdArgs) Unmarshal(in []byte) error {
	msg := new(comment.DeleteCommentWithUserIdReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteCommentWithUserIdArgs_Req_DEFAULT *comment.DeleteCommentWithUserIdReq

func (p *DeleteCommentWithUserIdArgs) GetReq() *comment.DeleteCommentWithUserIdReq {
	if !p.IsSetReq() {
		return DeleteCommentWithUserIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteCommentWithUserIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteCommentWithUserIdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteCommentWithUserIdResult struct {
	Success *comment.DeleteCommentWithUserIdResp
}

var DeleteCommentWithUserIdResult_Success_DEFAULT *comment.DeleteCommentWithUserIdResp

func (p *DeleteCommentWithUserIdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.DeleteCommentWithUserIdResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteCommentWithUserIdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteCommentWithUserIdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteCommentWithUserIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteCommentWithUserIdResult) Unmarshal(in []byte) error {
	msg := new(comment.DeleteCommentWithUserIdResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteCommentWithUserIdResult) GetSuccess() *comment.DeleteCommentWithUserIdResp {
	if !p.IsSetSuccess() {
		return DeleteCommentWithUserIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteCommentWithUserIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.DeleteCommentWithUserIdResp)
}

func (p *DeleteCommentWithUserIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteCommentWithUserIdResult) GetResult() interface{} {
	return p.Success
}

func setCommentStateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.SetCommentStateReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).SetCommentState(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SetCommentStateArgs:
		success, err := handler.(comment.CommentService).SetCommentState(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SetCommentStateResult)
		realResult.Success = success
	}
	return nil
}
func newSetCommentStateArgs() interface{} {
	return &SetCommentStateArgs{}
}

func newSetCommentStateResult() interface{} {
	return &SetCommentStateResult{}
}

type SetCommentStateArgs struct {
	Req *comment.SetCommentStateReq
}

func (p *SetCommentStateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.SetCommentStateReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SetCommentStateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SetCommentStateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SetCommentStateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SetCommentStateArgs) Unmarshal(in []byte) error {
	msg := new(comment.SetCommentStateReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SetCommentStateArgs_Req_DEFAULT *comment.SetCommentStateReq

func (p *SetCommentStateArgs) GetReq() *comment.SetCommentStateReq {
	if !p.IsSetReq() {
		return SetCommentStateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SetCommentStateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SetCommentStateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SetCommentStateResult struct {
	Success *comment.SetCommentStateResp
}

var SetCommentStateResult_Success_DEFAULT *comment.SetCommentStateResp

func (p *SetCommentStateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.SetCommentStateResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SetCommentStateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SetCommentStateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SetCommentStateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SetCommentStateResult) Unmarshal(in []byte) error {
	msg := new(comment.SetCommentStateResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SetCommentStateResult) GetSuccess() *comment.SetCommentStateResp {
	if !p.IsSetSuccess() {
		return SetCommentStateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SetCommentStateResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.SetCommentStateResp)
}

func (p *SetCommentStateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SetCommentStateResult) GetResult() interface{} {
	return p.Success
}

func setCommentAttrsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.SetCommentAttrsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).SetCommentAttrs(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SetCommentAttrsArgs:
		success, err := handler.(comment.CommentService).SetCommentAttrs(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SetCommentAttrsResult)
		realResult.Success = success
	}
	return nil
}
func newSetCommentAttrsArgs() interface{} {
	return &SetCommentAttrsArgs{}
}

func newSetCommentAttrsResult() interface{} {
	return &SetCommentAttrsResult{}
}

type SetCommentAttrsArgs struct {
	Req *comment.SetCommentAttrsReq
}

func (p *SetCommentAttrsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.SetCommentAttrsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SetCommentAttrsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SetCommentAttrsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SetCommentAttrsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SetCommentAttrsArgs) Unmarshal(in []byte) error {
	msg := new(comment.SetCommentAttrsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SetCommentAttrsArgs_Req_DEFAULT *comment.SetCommentAttrsReq

func (p *SetCommentAttrsArgs) GetReq() *comment.SetCommentAttrsReq {
	if !p.IsSetReq() {
		return SetCommentAttrsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SetCommentAttrsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SetCommentAttrsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SetCommentAttrsResult struct {
	Success *comment.SetCommentAttrsResp
}

var SetCommentAttrsResult_Success_DEFAULT *comment.SetCommentAttrsResp

func (p *SetCommentAttrsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.SetCommentAttrsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SetCommentAttrsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SetCommentAttrsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SetCommentAttrsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SetCommentAttrsResult) Unmarshal(in []byte) error {
	msg := new(comment.SetCommentAttrsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SetCommentAttrsResult) GetSuccess() *comment.SetCommentAttrsResp {
	if !p.IsSetSuccess() {
		return SetCommentAttrsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SetCommentAttrsResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.SetCommentAttrsResp)
}

func (p *SetCommentAttrsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SetCommentAttrsResult) GetResult() interface{} {
	return p.Success
}

func getCommentSubjectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.GetCommentSubjectReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).GetCommentSubject(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetCommentSubjectArgs:
		success, err := handler.(comment.CommentService).GetCommentSubject(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCommentSubjectResult)
		realResult.Success = success
	}
	return nil
}
func newGetCommentSubjectArgs() interface{} {
	return &GetCommentSubjectArgs{}
}

func newGetCommentSubjectResult() interface{} {
	return &GetCommentSubjectResult{}
}

type GetCommentSubjectArgs struct {
	Req *comment.GetCommentSubjectReq
}

func (p *GetCommentSubjectArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.GetCommentSubjectReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetCommentSubjectArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetCommentSubjectArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetCommentSubjectArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetCommentSubjectArgs) Unmarshal(in []byte) error {
	msg := new(comment.GetCommentSubjectReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCommentSubjectArgs_Req_DEFAULT *comment.GetCommentSubjectReq

func (p *GetCommentSubjectArgs) GetReq() *comment.GetCommentSubjectReq {
	if !p.IsSetReq() {
		return GetCommentSubjectArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCommentSubjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetCommentSubjectArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetCommentSubjectResult struct {
	Success *comment.GetCommentSubjectResp
}

var GetCommentSubjectResult_Success_DEFAULT *comment.GetCommentSubjectResp

func (p *GetCommentSubjectResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.GetCommentSubjectResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetCommentSubjectResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetCommentSubjectResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetCommentSubjectResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetCommentSubjectResult) Unmarshal(in []byte) error {
	msg := new(comment.GetCommentSubjectResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCommentSubjectResult) GetSuccess() *comment.GetCommentSubjectResp {
	if !p.IsSetSuccess() {
		return GetCommentSubjectResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCommentSubjectResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.GetCommentSubjectResp)
}

func (p *GetCommentSubjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCommentSubjectResult) GetResult() interface{} {
	return p.Success
}

func createCommentSubjectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.CreateCommentSubjectReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).CreateCommentSubject(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateCommentSubjectArgs:
		success, err := handler.(comment.CommentService).CreateCommentSubject(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateCommentSubjectResult)
		realResult.Success = success
	}
	return nil
}
func newCreateCommentSubjectArgs() interface{} {
	return &CreateCommentSubjectArgs{}
}

func newCreateCommentSubjectResult() interface{} {
	return &CreateCommentSubjectResult{}
}

type CreateCommentSubjectArgs struct {
	Req *comment.CreateCommentSubjectReq
}

func (p *CreateCommentSubjectArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.CreateCommentSubjectReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateCommentSubjectArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateCommentSubjectArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateCommentSubjectArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateCommentSubjectArgs) Unmarshal(in []byte) error {
	msg := new(comment.CreateCommentSubjectReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateCommentSubjectArgs_Req_DEFAULT *comment.CreateCommentSubjectReq

func (p *CreateCommentSubjectArgs) GetReq() *comment.CreateCommentSubjectReq {
	if !p.IsSetReq() {
		return CreateCommentSubjectArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateCommentSubjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateCommentSubjectArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateCommentSubjectResult struct {
	Success *comment.CreateCommentSubjectResp
}

var CreateCommentSubjectResult_Success_DEFAULT *comment.CreateCommentSubjectResp

func (p *CreateCommentSubjectResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.CreateCommentSubjectResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateCommentSubjectResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateCommentSubjectResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateCommentSubjectResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateCommentSubjectResult) Unmarshal(in []byte) error {
	msg := new(comment.CreateCommentSubjectResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateCommentSubjectResult) GetSuccess() *comment.CreateCommentSubjectResp {
	if !p.IsSetSuccess() {
		return CreateCommentSubjectResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateCommentSubjectResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.CreateCommentSubjectResp)
}

func (p *CreateCommentSubjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateCommentSubjectResult) GetResult() interface{} {
	return p.Success
}

func updateCommentSubjectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.UpdateCommentSubjectReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).UpdateCommentSubject(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateCommentSubjectArgs:
		success, err := handler.(comment.CommentService).UpdateCommentSubject(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateCommentSubjectResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateCommentSubjectArgs() interface{} {
	return &UpdateCommentSubjectArgs{}
}

func newUpdateCommentSubjectResult() interface{} {
	return &UpdateCommentSubjectResult{}
}

type UpdateCommentSubjectArgs struct {
	Req *comment.UpdateCommentSubjectReq
}

func (p *UpdateCommentSubjectArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.UpdateCommentSubjectReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateCommentSubjectArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateCommentSubjectArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateCommentSubjectArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateCommentSubjectArgs) Unmarshal(in []byte) error {
	msg := new(comment.UpdateCommentSubjectReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateCommentSubjectArgs_Req_DEFAULT *comment.UpdateCommentSubjectReq

func (p *UpdateCommentSubjectArgs) GetReq() *comment.UpdateCommentSubjectReq {
	if !p.IsSetReq() {
		return UpdateCommentSubjectArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateCommentSubjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateCommentSubjectArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateCommentSubjectResult struct {
	Success *comment.UpdateCommentSubjectResp
}

var UpdateCommentSubjectResult_Success_DEFAULT *comment.UpdateCommentSubjectResp

func (p *UpdateCommentSubjectResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.UpdateCommentSubjectResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateCommentSubjectResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateCommentSubjectResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateCommentSubjectResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateCommentSubjectResult) Unmarshal(in []byte) error {
	msg := new(comment.UpdateCommentSubjectResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateCommentSubjectResult) GetSuccess() *comment.UpdateCommentSubjectResp {
	if !p.IsSetSuccess() {
		return UpdateCommentSubjectResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateCommentSubjectResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.UpdateCommentSubjectResp)
}

func (p *UpdateCommentSubjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateCommentSubjectResult) GetResult() interface{} {
	return p.Success
}

func deleteCommentSubjectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.DeleteCommentSubjectReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).DeleteCommentSubject(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteCommentSubjectArgs:
		success, err := handler.(comment.CommentService).DeleteCommentSubject(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteCommentSubjectResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteCommentSubjectArgs() interface{} {
	return &DeleteCommentSubjectArgs{}
}

func newDeleteCommentSubjectResult() interface{} {
	return &DeleteCommentSubjectResult{}
}

type DeleteCommentSubjectArgs struct {
	Req *comment.DeleteCommentSubjectReq
}

func (p *DeleteCommentSubjectArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.DeleteCommentSubjectReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteCommentSubjectArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteCommentSubjectArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteCommentSubjectArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteCommentSubjectArgs) Unmarshal(in []byte) error {
	msg := new(comment.DeleteCommentSubjectReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteCommentSubjectArgs_Req_DEFAULT *comment.DeleteCommentSubjectReq

func (p *DeleteCommentSubjectArgs) GetReq() *comment.DeleteCommentSubjectReq {
	if !p.IsSetReq() {
		return DeleteCommentSubjectArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteCommentSubjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteCommentSubjectArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteCommentSubjectResult struct {
	Success *comment.DeleteCommentSubjectResp
}

var DeleteCommentSubjectResult_Success_DEFAULT *comment.DeleteCommentSubjectResp

func (p *DeleteCommentSubjectResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.DeleteCommentSubjectResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteCommentSubjectResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteCommentSubjectResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteCommentSubjectResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteCommentSubjectResult) Unmarshal(in []byte) error {
	msg := new(comment.DeleteCommentSubjectResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteCommentSubjectResult) GetSuccess() *comment.DeleteCommentSubjectResp {
	if !p.IsSetSuccess() {
		return DeleteCommentSubjectResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteCommentSubjectResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.DeleteCommentSubjectResp)
}

func (p *DeleteCommentSubjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteCommentSubjectResult) GetResult() interface{} {
	return p.Success
}

func setCommentSubjectStateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.SetCommentSubjectStateReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).SetCommentSubjectState(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SetCommentSubjectStateArgs:
		success, err := handler.(comment.CommentService).SetCommentSubjectState(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SetCommentSubjectStateResult)
		realResult.Success = success
	}
	return nil
}
func newSetCommentSubjectStateArgs() interface{} {
	return &SetCommentSubjectStateArgs{}
}

func newSetCommentSubjectStateResult() interface{} {
	return &SetCommentSubjectStateResult{}
}

type SetCommentSubjectStateArgs struct {
	Req *comment.SetCommentSubjectStateReq
}

func (p *SetCommentSubjectStateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.SetCommentSubjectStateReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SetCommentSubjectStateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SetCommentSubjectStateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SetCommentSubjectStateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SetCommentSubjectStateArgs) Unmarshal(in []byte) error {
	msg := new(comment.SetCommentSubjectStateReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SetCommentSubjectStateArgs_Req_DEFAULT *comment.SetCommentSubjectStateReq

func (p *SetCommentSubjectStateArgs) GetReq() *comment.SetCommentSubjectStateReq {
	if !p.IsSetReq() {
		return SetCommentSubjectStateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SetCommentSubjectStateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SetCommentSubjectStateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SetCommentSubjectStateResult struct {
	Success *comment.SetCommentSubjectStateResp
}

var SetCommentSubjectStateResult_Success_DEFAULT *comment.SetCommentSubjectStateResp

func (p *SetCommentSubjectStateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.SetCommentSubjectStateResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SetCommentSubjectStateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SetCommentSubjectStateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SetCommentSubjectStateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SetCommentSubjectStateResult) Unmarshal(in []byte) error {
	msg := new(comment.SetCommentSubjectStateResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SetCommentSubjectStateResult) GetSuccess() *comment.SetCommentSubjectStateResp {
	if !p.IsSetSuccess() {
		return SetCommentSubjectStateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SetCommentSubjectStateResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.SetCommentSubjectStateResp)
}

func (p *SetCommentSubjectStateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SetCommentSubjectStateResult) GetResult() interface{} {
	return p.Success
}

func setCommentSubjectAttrsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.SetCommentSubjectAttrsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).SetCommentSubjectAttrs(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SetCommentSubjectAttrsArgs:
		success, err := handler.(comment.CommentService).SetCommentSubjectAttrs(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SetCommentSubjectAttrsResult)
		realResult.Success = success
	}
	return nil
}
func newSetCommentSubjectAttrsArgs() interface{} {
	return &SetCommentSubjectAttrsArgs{}
}

func newSetCommentSubjectAttrsResult() interface{} {
	return &SetCommentSubjectAttrsResult{}
}

type SetCommentSubjectAttrsArgs struct {
	Req *comment.SetCommentSubjectAttrsReq
}

func (p *SetCommentSubjectAttrsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.SetCommentSubjectAttrsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SetCommentSubjectAttrsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SetCommentSubjectAttrsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SetCommentSubjectAttrsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SetCommentSubjectAttrsArgs) Unmarshal(in []byte) error {
	msg := new(comment.SetCommentSubjectAttrsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SetCommentSubjectAttrsArgs_Req_DEFAULT *comment.SetCommentSubjectAttrsReq

func (p *SetCommentSubjectAttrsArgs) GetReq() *comment.SetCommentSubjectAttrsReq {
	if !p.IsSetReq() {
		return SetCommentSubjectAttrsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SetCommentSubjectAttrsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SetCommentSubjectAttrsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SetCommentSubjectAttrsResult struct {
	Success *comment.SetCommentSubjectAttrsResp
}

var SetCommentSubjectAttrsResult_Success_DEFAULT *comment.SetCommentSubjectAttrsResp

func (p *SetCommentSubjectAttrsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.SetCommentSubjectAttrsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SetCommentSubjectAttrsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SetCommentSubjectAttrsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SetCommentSubjectAttrsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SetCommentSubjectAttrsResult) Unmarshal(in []byte) error {
	msg := new(comment.SetCommentSubjectAttrsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SetCommentSubjectAttrsResult) GetSuccess() *comment.SetCommentSubjectAttrsResp {
	if !p.IsSetSuccess() {
		return SetCommentSubjectAttrsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SetCommentSubjectAttrsResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.SetCommentSubjectAttrsResp)
}

func (p *SetCommentSubjectAttrsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SetCommentSubjectAttrsResult) GetResult() interface{} {
	return p.Success
}

func createLabelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.CreateLabelReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).CreateLabel(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateLabelArgs:
		success, err := handler.(comment.CommentService).CreateLabel(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateLabelResult)
		realResult.Success = success
	}
	return nil
}
func newCreateLabelArgs() interface{} {
	return &CreateLabelArgs{}
}

func newCreateLabelResult() interface{} {
	return &CreateLabelResult{}
}

type CreateLabelArgs struct {
	Req *comment.CreateLabelReq
}

func (p *CreateLabelArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.CreateLabelReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateLabelArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateLabelArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateLabelArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateLabelArgs) Unmarshal(in []byte) error {
	msg := new(comment.CreateLabelReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateLabelArgs_Req_DEFAULT *comment.CreateLabelReq

func (p *CreateLabelArgs) GetReq() *comment.CreateLabelReq {
	if !p.IsSetReq() {
		return CreateLabelArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateLabelArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateLabelArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateLabelResult struct {
	Success *comment.CreateLabelResp
}

var CreateLabelResult_Success_DEFAULT *comment.CreateLabelResp

func (p *CreateLabelResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.CreateLabelResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateLabelResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateLabelResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateLabelResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateLabelResult) Unmarshal(in []byte) error {
	msg := new(comment.CreateLabelResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateLabelResult) GetSuccess() *comment.CreateLabelResp {
	if !p.IsSetSuccess() {
		return CreateLabelResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateLabelResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.CreateLabelResp)
}

func (p *CreateLabelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateLabelResult) GetResult() interface{} {
	return p.Success
}

func deleteLabelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.DeleteLabelReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).DeleteLabel(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteLabelArgs:
		success, err := handler.(comment.CommentService).DeleteLabel(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteLabelResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteLabelArgs() interface{} {
	return &DeleteLabelArgs{}
}

func newDeleteLabelResult() interface{} {
	return &DeleteLabelResult{}
}

type DeleteLabelArgs struct {
	Req *comment.DeleteLabelReq
}

func (p *DeleteLabelArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.DeleteLabelReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteLabelArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteLabelArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteLabelArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteLabelArgs) Unmarshal(in []byte) error {
	msg := new(comment.DeleteLabelReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteLabelArgs_Req_DEFAULT *comment.DeleteLabelReq

func (p *DeleteLabelArgs) GetReq() *comment.DeleteLabelReq {
	if !p.IsSetReq() {
		return DeleteLabelArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteLabelArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteLabelArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteLabelResult struct {
	Success *comment.DeleteLabelResp
}

var DeleteLabelResult_Success_DEFAULT *comment.DeleteLabelResp

func (p *DeleteLabelResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.DeleteLabelResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteLabelResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteLabelResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteLabelResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteLabelResult) Unmarshal(in []byte) error {
	msg := new(comment.DeleteLabelResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteLabelResult) GetSuccess() *comment.DeleteLabelResp {
	if !p.IsSetSuccess() {
		return DeleteLabelResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteLabelResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.DeleteLabelResp)
}

func (p *DeleteLabelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteLabelResult) GetResult() interface{} {
	return p.Success
}

func getLabelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.GetLabelReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).GetLabel(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetLabelArgs:
		success, err := handler.(comment.CommentService).GetLabel(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetLabelResult)
		realResult.Success = success
	}
	return nil
}
func newGetLabelArgs() interface{} {
	return &GetLabelArgs{}
}

func newGetLabelResult() interface{} {
	return &GetLabelResult{}
}

type GetLabelArgs struct {
	Req *comment.GetLabelReq
}

func (p *GetLabelArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.GetLabelReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetLabelArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetLabelArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetLabelArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetLabelArgs) Unmarshal(in []byte) error {
	msg := new(comment.GetLabelReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetLabelArgs_Req_DEFAULT *comment.GetLabelReq

func (p *GetLabelArgs) GetReq() *comment.GetLabelReq {
	if !p.IsSetReq() {
		return GetLabelArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetLabelArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetLabelArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetLabelResult struct {
	Success *comment.GetLabelResp
}

var GetLabelResult_Success_DEFAULT *comment.GetLabelResp

func (p *GetLabelResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.GetLabelResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetLabelResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetLabelResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetLabelResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetLabelResult) Unmarshal(in []byte) error {
	msg := new(comment.GetLabelResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetLabelResult) GetSuccess() *comment.GetLabelResp {
	if !p.IsSetSuccess() {
		return GetLabelResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetLabelResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.GetLabelResp)
}

func (p *GetLabelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetLabelResult) GetResult() interface{} {
	return p.Success
}

func getLabelsInBatchHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.GetLabelsInBatchReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).GetLabelsInBatch(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetLabelsInBatchArgs:
		success, err := handler.(comment.CommentService).GetLabelsInBatch(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetLabelsInBatchResult)
		realResult.Success = success
	}
	return nil
}
func newGetLabelsInBatchArgs() interface{} {
	return &GetLabelsInBatchArgs{}
}

func newGetLabelsInBatchResult() interface{} {
	return &GetLabelsInBatchResult{}
}

type GetLabelsInBatchArgs struct {
	Req *comment.GetLabelsInBatchReq
}

func (p *GetLabelsInBatchArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.GetLabelsInBatchReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetLabelsInBatchArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetLabelsInBatchArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetLabelsInBatchArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetLabelsInBatchArgs) Unmarshal(in []byte) error {
	msg := new(comment.GetLabelsInBatchReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetLabelsInBatchArgs_Req_DEFAULT *comment.GetLabelsInBatchReq

func (p *GetLabelsInBatchArgs) GetReq() *comment.GetLabelsInBatchReq {
	if !p.IsSetReq() {
		return GetLabelsInBatchArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetLabelsInBatchArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetLabelsInBatchArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetLabelsInBatchResult struct {
	Success *comment.GetLabelsInBatchResp
}

var GetLabelsInBatchResult_Success_DEFAULT *comment.GetLabelsInBatchResp

func (p *GetLabelsInBatchResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.GetLabelsInBatchResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetLabelsInBatchResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetLabelsInBatchResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetLabelsInBatchResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetLabelsInBatchResult) Unmarshal(in []byte) error {
	msg := new(comment.GetLabelsInBatchResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetLabelsInBatchResult) GetSuccess() *comment.GetLabelsInBatchResp {
	if !p.IsSetSuccess() {
		return GetLabelsInBatchResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetLabelsInBatchResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.GetLabelsInBatchResp)
}

func (p *GetLabelsInBatchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetLabelsInBatchResult) GetResult() interface{} {
	return p.Success
}

func updateLabelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.UpdateLabelReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).UpdateLabel(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateLabelArgs:
		success, err := handler.(comment.CommentService).UpdateLabel(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateLabelResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateLabelArgs() interface{} {
	return &UpdateLabelArgs{}
}

func newUpdateLabelResult() interface{} {
	return &UpdateLabelResult{}
}

type UpdateLabelArgs struct {
	Req *comment.UpdateLabelReq
}

func (p *UpdateLabelArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.UpdateLabelReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateLabelArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateLabelArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateLabelArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateLabelArgs) Unmarshal(in []byte) error {
	msg := new(comment.UpdateLabelReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateLabelArgs_Req_DEFAULT *comment.UpdateLabelReq

func (p *UpdateLabelArgs) GetReq() *comment.UpdateLabelReq {
	if !p.IsSetReq() {
		return UpdateLabelArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateLabelArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateLabelArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateLabelResult struct {
	Success *comment.UpdateLabelResp
}

var UpdateLabelResult_Success_DEFAULT *comment.UpdateLabelResp

func (p *UpdateLabelResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.UpdateLabelResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateLabelResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateLabelResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateLabelResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateLabelResult) Unmarshal(in []byte) error {
	msg := new(comment.UpdateLabelResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateLabelResult) GetSuccess() *comment.UpdateLabelResp {
	if !p.IsSetSuccess() {
		return UpdateLabelResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateLabelResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.UpdateLabelResp)
}

func (p *UpdateLabelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateLabelResult) GetResult() interface{} {
	return p.Success
}

func getLabelsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.GetLabelsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).GetLabels(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetLabelsArgs:
		success, err := handler.(comment.CommentService).GetLabels(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetLabelsResult)
		realResult.Success = success
	}
	return nil
}
func newGetLabelsArgs() interface{} {
	return &GetLabelsArgs{}
}

func newGetLabelsResult() interface{} {
	return &GetLabelsResult{}
}

type GetLabelsArgs struct {
	Req *comment.GetLabelsReq
}

func (p *GetLabelsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.GetLabelsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetLabelsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetLabelsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetLabelsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetLabelsArgs) Unmarshal(in []byte) error {
	msg := new(comment.GetLabelsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetLabelsArgs_Req_DEFAULT *comment.GetLabelsReq

func (p *GetLabelsArgs) GetReq() *comment.GetLabelsReq {
	if !p.IsSetReq() {
		return GetLabelsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetLabelsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetLabelsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetLabelsResult struct {
	Success *comment.GetLabelsResp
}

var GetLabelsResult_Success_DEFAULT *comment.GetLabelsResp

func (p *GetLabelsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.GetLabelsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetLabelsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetLabelsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetLabelsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetLabelsResult) Unmarshal(in []byte) error {
	msg := new(comment.GetLabelsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetLabelsResult) GetSuccess() *comment.GetLabelsResp {
	if !p.IsSetSuccess() {
		return GetLabelsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetLabelsResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.GetLabelsResp)
}

func (p *GetLabelsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetLabelsResult) GetResult() interface{} {
	return p.Success
}

func createObjectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.CreateObjectReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).CreateObject(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateObjectArgs:
		success, err := handler.(comment.CommentService).CreateObject(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateObjectResult)
		realResult.Success = success
	}
	return nil
}
func newCreateObjectArgs() interface{} {
	return &CreateObjectArgs{}
}

func newCreateObjectResult() interface{} {
	return &CreateObjectResult{}
}

type CreateObjectArgs struct {
	Req *comment.CreateObjectReq
}

func (p *CreateObjectArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.CreateObjectReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateObjectArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateObjectArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateObjectArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateObjectArgs) Unmarshal(in []byte) error {
	msg := new(comment.CreateObjectReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateObjectArgs_Req_DEFAULT *comment.CreateObjectReq

func (p *CreateObjectArgs) GetReq() *comment.CreateObjectReq {
	if !p.IsSetReq() {
		return CreateObjectArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateObjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateObjectArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateObjectResult struct {
	Success *comment.CreateObjectResp
}

var CreateObjectResult_Success_DEFAULT *comment.CreateObjectResp

func (p *CreateObjectResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.CreateObjectResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateObjectResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateObjectResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateObjectResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateObjectResult) Unmarshal(in []byte) error {
	msg := new(comment.CreateObjectResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateObjectResult) GetSuccess() *comment.CreateObjectResp {
	if !p.IsSetSuccess() {
		return CreateObjectResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateObjectResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.CreateObjectResp)
}

func (p *CreateObjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateObjectResult) GetResult() interface{} {
	return p.Success
}

func createObjectsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.CreateObjectsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).CreateObjects(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateObjectsArgs:
		success, err := handler.(comment.CommentService).CreateObjects(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateObjectsResult)
		realResult.Success = success
	}
	return nil
}
func newCreateObjectsArgs() interface{} {
	return &CreateObjectsArgs{}
}

func newCreateObjectsResult() interface{} {
	return &CreateObjectsResult{}
}

type CreateObjectsArgs struct {
	Req *comment.CreateObjectsReq
}

func (p *CreateObjectsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.CreateObjectsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateObjectsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateObjectsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateObjectsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateObjectsArgs) Unmarshal(in []byte) error {
	msg := new(comment.CreateObjectsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateObjectsArgs_Req_DEFAULT *comment.CreateObjectsReq

func (p *CreateObjectsArgs) GetReq() *comment.CreateObjectsReq {
	if !p.IsSetReq() {
		return CreateObjectsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateObjectsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateObjectsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateObjectsResult struct {
	Success *comment.CreateObjectsResp
}

var CreateObjectsResult_Success_DEFAULT *comment.CreateObjectsResp

func (p *CreateObjectsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.CreateObjectsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateObjectsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateObjectsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateObjectsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateObjectsResult) Unmarshal(in []byte) error {
	msg := new(comment.CreateObjectsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateObjectsResult) GetSuccess() *comment.CreateObjectsResp {
	if !p.IsSetSuccess() {
		return CreateObjectsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateObjectsResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.CreateObjectsResp)
}

func (p *CreateObjectsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateObjectsResult) GetResult() interface{} {
	return p.Success
}

func deleteObjectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.DeleteObjectReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).DeleteObject(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteObjectArgs:
		success, err := handler.(comment.CommentService).DeleteObject(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteObjectResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteObjectArgs() interface{} {
	return &DeleteObjectArgs{}
}

func newDeleteObjectResult() interface{} {
	return &DeleteObjectResult{}
}

type DeleteObjectArgs struct {
	Req *comment.DeleteObjectReq
}

func (p *DeleteObjectArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.DeleteObjectReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteObjectArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteObjectArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteObjectArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteObjectArgs) Unmarshal(in []byte) error {
	msg := new(comment.DeleteObjectReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteObjectArgs_Req_DEFAULT *comment.DeleteObjectReq

func (p *DeleteObjectArgs) GetReq() *comment.DeleteObjectReq {
	if !p.IsSetReq() {
		return DeleteObjectArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteObjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteObjectArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteObjectResult struct {
	Success *comment.DeleteObjectResp
}

var DeleteObjectResult_Success_DEFAULT *comment.DeleteObjectResp

func (p *DeleteObjectResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.DeleteObjectResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteObjectResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteObjectResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteObjectResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteObjectResult) Unmarshal(in []byte) error {
	msg := new(comment.DeleteObjectResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteObjectResult) GetSuccess() *comment.DeleteObjectResp {
	if !p.IsSetSuccess() {
		return DeleteObjectResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteObjectResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.DeleteObjectResp)
}

func (p *DeleteObjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteObjectResult) GetResult() interface{} {
	return p.Success
}

func getObjectsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.GetObjectsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).GetObjects(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetObjectsArgs:
		success, err := handler.(comment.CommentService).GetObjects(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetObjectsResult)
		realResult.Success = success
	}
	return nil
}
func newGetObjectsArgs() interface{} {
	return &GetObjectsArgs{}
}

func newGetObjectsResult() interface{} {
	return &GetObjectsResult{}
}

type GetObjectsArgs struct {
	Req *comment.GetObjectsReq
}

func (p *GetObjectsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.GetObjectsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetObjectsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetObjectsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetObjectsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetObjectsArgs) Unmarshal(in []byte) error {
	msg := new(comment.GetObjectsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetObjectsArgs_Req_DEFAULT *comment.GetObjectsReq

func (p *GetObjectsArgs) GetReq() *comment.GetObjectsReq {
	if !p.IsSetReq() {
		return GetObjectsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetObjectsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetObjectsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetObjectsResult struct {
	Success *comment.GetObjectsResp
}

var GetObjectsResult_Success_DEFAULT *comment.GetObjectsResp

func (p *GetObjectsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.GetObjectsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetObjectsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetObjectsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetObjectsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetObjectsResult) Unmarshal(in []byte) error {
	msg := new(comment.GetObjectsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetObjectsResult) GetSuccess() *comment.GetObjectsResp {
	if !p.IsSetSuccess() {
		return GetObjectsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetObjectsResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.GetObjectsResp)
}

func (p *GetObjectsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetObjectsResult) GetResult() interface{} {
	return p.Success
}

func updateObjectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.UpdateObjectReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).UpdateObject(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateObjectArgs:
		success, err := handler.(comment.CommentService).UpdateObject(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateObjectResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateObjectArgs() interface{} {
	return &UpdateObjectArgs{}
}

func newUpdateObjectResult() interface{} {
	return &UpdateObjectResult{}
}

type UpdateObjectArgs struct {
	Req *comment.UpdateObjectReq
}

func (p *UpdateObjectArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.UpdateObjectReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateObjectArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateObjectArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateObjectArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateObjectArgs) Unmarshal(in []byte) error {
	msg := new(comment.UpdateObjectReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateObjectArgs_Req_DEFAULT *comment.UpdateObjectReq

func (p *UpdateObjectArgs) GetReq() *comment.UpdateObjectReq {
	if !p.IsSetReq() {
		return UpdateObjectArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateObjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateObjectArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateObjectResult struct {
	Success *comment.UpdateObjectResp
}

var UpdateObjectResult_Success_DEFAULT *comment.UpdateObjectResp

func (p *UpdateObjectResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.UpdateObjectResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateObjectResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateObjectResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateObjectResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateObjectResult) Unmarshal(in []byte) error {
	msg := new(comment.UpdateObjectResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateObjectResult) GetSuccess() *comment.UpdateObjectResp {
	if !p.IsSetSuccess() {
		return UpdateObjectResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateObjectResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.UpdateObjectResp)
}

func (p *UpdateObjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateObjectResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetComment(ctx context.Context, Req *comment.GetCommentReq) (r *comment.GetCommentResp, err error) {
	var _args GetCommentArgs
	_args.Req = Req
	var _result GetCommentResult
	if err = p.c.Call(ctx, "GetComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentList(ctx context.Context, Req *comment.GetCommentListReq) (r *comment.GetCommentListResp, err error) {
	var _args GetCommentListArgs
	_args.Req = Req
	var _result GetCommentListResult
	if err = p.c.Call(ctx, "GetCommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateComment(ctx context.Context, Req *comment.CreateCommentReq) (r *comment.CreateCommentResp, err error) {
	var _args CreateCommentArgs
	_args.Req = Req
	var _result CreateCommentResult
	if err = p.c.Call(ctx, "CreateComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateComment(ctx context.Context, Req *comment.UpdateCommentReq) (r *comment.UpdateCommentResp, err error) {
	var _args UpdateCommentArgs
	_args.Req = Req
	var _result UpdateCommentResult
	if err = p.c.Call(ctx, "UpdateComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteComment(ctx context.Context, Req *comment.DeleteCommentReq) (r *comment.DeleteCommentResp, err error) {
	var _args DeleteCommentArgs
	_args.Req = Req
	var _result DeleteCommentResult
	if err = p.c.Call(ctx, "DeleteComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCommentWithUserId(ctx context.Context, Req *comment.DeleteCommentWithUserIdReq) (r *comment.DeleteCommentWithUserIdResp, err error) {
	var _args DeleteCommentWithUserIdArgs
	_args.Req = Req
	var _result DeleteCommentWithUserIdResult
	if err = p.c.Call(ctx, "DeleteCommentWithUserId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetCommentState(ctx context.Context, Req *comment.SetCommentStateReq) (r *comment.SetCommentStateResp, err error) {
	var _args SetCommentStateArgs
	_args.Req = Req
	var _result SetCommentStateResult
	if err = p.c.Call(ctx, "SetCommentState", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetCommentAttrs(ctx context.Context, Req *comment.SetCommentAttrsReq) (r *comment.SetCommentAttrsResp, err error) {
	var _args SetCommentAttrsArgs
	_args.Req = Req
	var _result SetCommentAttrsResult
	if err = p.c.Call(ctx, "SetCommentAttrs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentSubject(ctx context.Context, Req *comment.GetCommentSubjectReq) (r *comment.GetCommentSubjectResp, err error) {
	var _args GetCommentSubjectArgs
	_args.Req = Req
	var _result GetCommentSubjectResult
	if err = p.c.Call(ctx, "GetCommentSubject", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateCommentSubject(ctx context.Context, Req *comment.CreateCommentSubjectReq) (r *comment.CreateCommentSubjectResp, err error) {
	var _args CreateCommentSubjectArgs
	_args.Req = Req
	var _result CreateCommentSubjectResult
	if err = p.c.Call(ctx, "CreateCommentSubject", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCommentSubject(ctx context.Context, Req *comment.UpdateCommentSubjectReq) (r *comment.UpdateCommentSubjectResp, err error) {
	var _args UpdateCommentSubjectArgs
	_args.Req = Req
	var _result UpdateCommentSubjectResult
	if err = p.c.Call(ctx, "UpdateCommentSubject", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCommentSubject(ctx context.Context, Req *comment.DeleteCommentSubjectReq) (r *comment.DeleteCommentSubjectResp, err error) {
	var _args DeleteCommentSubjectArgs
	_args.Req = Req
	var _result DeleteCommentSubjectResult
	if err = p.c.Call(ctx, "DeleteCommentSubject", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetCommentSubjectState(ctx context.Context, Req *comment.SetCommentSubjectStateReq) (r *comment.SetCommentSubjectStateResp, err error) {
	var _args SetCommentSubjectStateArgs
	_args.Req = Req
	var _result SetCommentSubjectStateResult
	if err = p.c.Call(ctx, "SetCommentSubjectState", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetCommentSubjectAttrs(ctx context.Context, Req *comment.SetCommentSubjectAttrsReq) (r *comment.SetCommentSubjectAttrsResp, err error) {
	var _args SetCommentSubjectAttrsArgs
	_args.Req = Req
	var _result SetCommentSubjectAttrsResult
	if err = p.c.Call(ctx, "SetCommentSubjectAttrs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateLabel(ctx context.Context, Req *comment.CreateLabelReq) (r *comment.CreateLabelResp, err error) {
	var _args CreateLabelArgs
	_args.Req = Req
	var _result CreateLabelResult
	if err = p.c.Call(ctx, "CreateLabel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteLabel(ctx context.Context, Req *comment.DeleteLabelReq) (r *comment.DeleteLabelResp, err error) {
	var _args DeleteLabelArgs
	_args.Req = Req
	var _result DeleteLabelResult
	if err = p.c.Call(ctx, "DeleteLabel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLabel(ctx context.Context, Req *comment.GetLabelReq) (r *comment.GetLabelResp, err error) {
	var _args GetLabelArgs
	_args.Req = Req
	var _result GetLabelResult
	if err = p.c.Call(ctx, "GetLabel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLabelsInBatch(ctx context.Context, Req *comment.GetLabelsInBatchReq) (r *comment.GetLabelsInBatchResp, err error) {
	var _args GetLabelsInBatchArgs
	_args.Req = Req
	var _result GetLabelsInBatchResult
	if err = p.c.Call(ctx, "GetLabelsInBatch", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateLabel(ctx context.Context, Req *comment.UpdateLabelReq) (r *comment.UpdateLabelResp, err error) {
	var _args UpdateLabelArgs
	_args.Req = Req
	var _result UpdateLabelResult
	if err = p.c.Call(ctx, "UpdateLabel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLabels(ctx context.Context, Req *comment.GetLabelsReq) (r *comment.GetLabelsResp, err error) {
	var _args GetLabelsArgs
	_args.Req = Req
	var _result GetLabelsResult
	if err = p.c.Call(ctx, "GetLabels", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateObject(ctx context.Context, Req *comment.CreateObjectReq) (r *comment.CreateObjectResp, err error) {
	var _args CreateObjectArgs
	_args.Req = Req
	var _result CreateObjectResult
	if err = p.c.Call(ctx, "CreateObject", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateObjects(ctx context.Context, Req *comment.CreateObjectsReq) (r *comment.CreateObjectsResp, err error) {
	var _args CreateObjectsArgs
	_args.Req = Req
	var _result CreateObjectsResult
	if err = p.c.Call(ctx, "CreateObjects", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteObject(ctx context.Context, Req *comment.DeleteObjectReq) (r *comment.DeleteObjectResp, err error) {
	var _args DeleteObjectArgs
	_args.Req = Req
	var _result DeleteObjectResult
	if err = p.c.Call(ctx, "DeleteObject", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetObjects(ctx context.Context, Req *comment.GetObjectsReq) (r *comment.GetObjectsResp, err error) {
	var _args GetObjectsArgs
	_args.Req = Req
	var _result GetObjectsResult
	if err = p.c.Call(ctx, "GetObjects", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateObject(ctx context.Context, Req *comment.UpdateObjectReq) (r *comment.UpdateObjectResp, err error) {
	var _args UpdateObjectArgs
	_args.Req = Req
	var _result UpdateObjectResult
	if err = p.c.Call(ctx, "UpdateObject", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
